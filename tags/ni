!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AbortCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AbortCalibration(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
AbortCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus AbortCalibration(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
AbortCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* AbortCalibration)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Add	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Add(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes)$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes)
Add	/usr/include/ni/XnList.h	/^	XnStatus Add(XnNode* pWhere, const XnValue& val)$/;"	f	class:XnList	access:protected	signature:(XnNode* pWhere, const XnValue& val)
AddAfter	/usr/include/ni/XnList.h	/^	XnStatus AddAfter(ConstIterator where, const XnValue& val)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, const XnValue& val)
AddBefore	/usr/include/ni/XnList.h	/^	XnStatus AddBefore(ConstIterator where, const XnValue& val)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, const XnValue& val)
AddEx	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddEx(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler)$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler)
AddExportedNode	/usr/include/ni/XnModuleCppInterface.h	/^		inline XnStatus AddExportedNode(XnModuleGetExportedInterfacePtr pEntryPoint) { return m_ExportedNodes.AddLast(pEntryPoint); }$/;"	f	class:xn::Module	access:public	signature:(XnModuleGetExportedInterfacePtr pEntryPoint)
AddFirst	/usr/include/ni/XnList.h	/^	XnStatus AddFirst(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
AddGesture	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddGesture(const XnChar* strGesture, XnBoundingBox3D* pArea)$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture, XnBoundingBox3D* pArea)
AddGesture	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus AddGesture(const XnChar* strGesture, XnBoundingBox3D* pArea) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture, XnBoundingBox3D* pArea)
AddGesture	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* AddGesture)(XnModuleNodeHandle hGenerator, const XnChar* strGesture, XnBoundingBox3D* pArea);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
AddLast	/usr/include/ni/XnArray.h	/^	XnStatus AddLast(const T& val)$/;"	f	class:XnArray	access:public	signature:(const T& val)
AddLast	/usr/include/ni/XnArray.h	/^	XnStatus AddLast(const T* aValues, XnUInt32 nCount)$/;"	f	class:XnArray	access:public	signature:(const T* aValues, XnUInt32 nCount)
AddLast	/usr/include/ni/XnList.h	/^	XnStatus AddLast(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
AddLicense	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddLicense(const XnLicense& License)$/;"	f	class:xn::Context	access:public	signature:(const XnLicense& License)
AddNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNeededNode(ProductionNode& needed)$/;"	f	class:xn::ProductionNode	access:public	signature:(ProductionNode& needed)
AddNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNeededNode(const XnChar* strInstanceName)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strInstanceName)
AddNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNode(NodeInfo& info)$/;"	f	class:xn::NodeInfoList	access:public	signature:(NodeInfo& info)
AddNodeFromAnotherList	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNodeFromAnotherList(Iterator& it)$/;"	f	class:xn::NodeInfoList	access:public	signature:(Iterator& it)
AddNodeToRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNodeToRecording(ProductionNode& Node, XnCodecID compression = XN_CODEC_NULL)$/;"	f	class:xn::Recorder	access:public	signature:(ProductionNode& Node, XnCodecID compression = XN_CODEC_NULL)
AddRef	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddRef() { return xnProductionNodeAddRef(m_hNode); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
AddSupportedCapability	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddSupportedCapability(const XnChar* strNeededCapability)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strNeededCapability)
AddSupportedMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddSupportedMapOutputMode(const XnMapOutputMode& MapOutputMode)$/;"	f	class:xn::Query	access:public	signature:(const XnMapOutputMode& MapOutputMode)
Allocate	/usr/include/ni/IXnNodeAllocator.h	/^	virtual XnNode *Allocate() = 0;$/;"	p	class:INiNodeAllocator	access:public	signature:()
Allocate	/usr/include/ni/XnNode.h	/^	static XnNode *Allocate() { return (XnNode*)xnAllocateBaseNode(); }$/;"	f	class:XnNode	access:public	signature:()
Allocate	/usr/include/ni/XnNodeAllocator.h	/^	virtual XnNode *Allocate() { return XnNode::Allocate();	}$/;"	f	class:XnNodeAllocator	access:public	signature:()
AllocateData	/usr/include/ni/XnCppWrapper.h	/^		XnStatus AllocateData(XnUInt32 nBytes)$/;"	f	class:xn::OutputMetaData	access:public	signature:(XnUInt32 nBytes)
AllocateData	/usr/include/ni/XnCppWrapper.h	/^		XnStatus AllocateData(XnUInt32 nXRes, XnUInt32 nYRes)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes)
AllocateData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AllocateData(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format)$/;"	f	class:xn::ImageMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format)
AlternativeViewPointCapability	/usr/include/ni/XnCppWrapper.h	/^		inline AlternativeViewPointCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(XnNodeHandle hNode)
AlternativeViewPointCapability	/usr/include/ni/XnCppWrapper.h	/^	class AlternativeViewPointCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
AntiFlickerCapability	/usr/include/ni/XnCppWrapper.h	/^		inline AntiFlickerCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnNodeHandle hNode)
AntiFlickerCapability	/usr/include/ni/XnCppWrapper.h	/^	class AntiFlickerCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
Append	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Append(NodeInfoList& other)$/;"	f	class:xn::NodeInfoList	access:public	signature:(NodeInfoList& other)
ApplyListChanges	/usr/include/ni/XnEvent.h	/^	XnStatus ApplyListChanges()$/;"	f	class:XnEvent	access:protected	signature:()
Audio	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Audio)(struct XnModuleAudioGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
AudioGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline AudioGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
AudioGenerator	/usr/include/ni/XnCppWrapper.h	/^	class AudioGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^		AudioMetaData(const AudioMetaData& other);$/;"	p	class:xn::AudioMetaData	access:private	signature:(const AudioMetaData& other)
AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline AudioMetaData() : OutputMetaData(&m_audio.pData)$/;"	f	class:xn::AudioMetaData	access:public	signature:()
AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^	class AudioMetaData : public OutputMetaData$/;"	c	namespace:xn	inherits:OutputMetaData
AutoEnumerateOverSingleInput	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AutoEnumerateOverSingleInput(NodeInfoList& List, XnProductionNodeDescription& description, const XnChar* strCreationInfo, XnProductionNodeType InputType, EnumerationErrors* pErrors, Query* pQuery = NULL) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& List, XnProductionNodeDescription& description, const XnChar* strCreationInfo, XnProductionNodeType InputType, EnumerationErrors* pErrors, Query* pQuery = NULL) const
BASE_SIZE	/usr/include/ni/XnArray.h	/^	enum {BASE_SIZE = 8};$/;"	e	enum:XnArray::__anon2
Begin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator Begin() const { return Iterator(xnEnumerationErrorsGetFirst(m_pErrors)); } $/;"	f	class:xn::EnumerationErrors	access:public	signature:() const
Begin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator Begin() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
BitsPerSample	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16 BitsPerSample() const { return m_audio.Wave.nBitsPerSample; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
BitsPerSample	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16& BitsPerSample() { return m_audio.Wave.nBitsPerSample; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
BubbleSort	/usr/include/ni/XnAlgorithms.h	/^	static void BubbleSort(T elements[], XnUInt32 nCount)$/;"	f	class:XnAlgorithms	access:public	signature:(T elements[], XnUInt32 nCount)
BubbleSort	/usr/include/ni/XnAlgorithms.h	/^	static void BubbleSort(T elements[], XnUInt32 nCount, Comparer comp)$/;"	f	class:XnAlgorithms	access:public	signature:(T elements[], XnUInt32 nCount, Comparer comp)
BytesPerPixel	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 BytesPerPixel() const$/;"	f	class:xn::MapMetaData	access:public	signature:() const
CalibrationEnd	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* CalibrationEnd)(SkeletonCapability& skeleton, XnUserID user, XnBool bSuccess, void* pCookie);$/;"	t	class:xn::SkeletonCapability	access:public
CalibrationEndCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE CalibrationEndCallback(XnNodeHandle hNode, XnUserID user, XnBool bSuccess, void* pCookie)$/;"	f	class:xn::SkeletonCapability	access:private	signature:(XnNodeHandle hNode, XnUserID user, XnBool bSuccess, void* pCookie)
CalibrationStart	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* CalibrationStart)(SkeletonCapability& skeleton, XnUserID user, void* pCookie);$/;"	t	class:xn::SkeletonCapability	access:public
CalibrationStartCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE CalibrationStartCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::SkeletonCapability	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
CanFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool CanFrameSyncWith(Generator& other) const;$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other) const
CanFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnBool FrameSyncCapability::CanFrameSyncWith(Generator& other) const$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other) const
CanFrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool CanFrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
CanFrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* CanFrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
Capability	/usr/include/ni/XnCppWrapper.h	/^		Capability(XnNodeHandle hNode) : m_hNode(hNode) {}$/;"	f	class:xn::Capability	access:public	signature:(XnNodeHandle hNode)
Capability	/usr/include/ni/XnCppWrapper.h	/^	class Capability$/;"	c	namespace:xn
Clear	/usr/include/ni/XnArray.h	/^	void Clear()$/;"	f	class:XnArray	access:public	signature:()
Clear	/usr/include/ni/XnBitSet.h	/^	void Clear()$/;"	f	class:XnBitSet	access:public	signature:()
Clear	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Clear()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
Clear	/usr/include/ni/XnEvent.h	/^	XnStatus Clear()$/;"	f	class:XnEvent	access:public	signature:()
Clear	/usr/include/ni/XnHash.h	/^	XnStatus Clear()$/;"	f	class:XnHash	access:public	signature:()
Clear	/usr/include/ni/XnList.h	/^	XnStatus Clear()$/;"	f	class:XnList	access:public	signature:()
ClearCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ClearCalibrationData(XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUInt32 nSlot)
ClearCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ClearCalibrationData(XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUInt32 nSlot)
ClearCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ClearCalibrationData)(XnModuleNodeHandle hGenerator, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Close	/usr/include/ni/XnOSCpp.h	/^	XnStatus Close()$/;"	f	class:XnOSEvent	access:public	signature:()
Close	/usr/include/ni/XnTypes.h	/^	void (XN_CALLBACK_TYPE* Close)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
Close	/usr/include/ni/XnTypes.h	/^	void (XN_CALLBACK_TYPE* Close)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
Codec	/usr/include/ni/XnCppWrapper.h	/^		inline Codec(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Codec	access:public	signature:(XnNodeHandle hNode = NULL)
Codec	/usr/include/ni/XnCppWrapper.h	/^	class Codec : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
Codec	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Codec)(struct XnModuleCodecInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
Compare	/usr/include/ni/XnStringsHash.h	/^	static XnInt32 Compare(const XnChar* const& key1, const XnChar* const& key2)$/;"	f	class:XnStringsKeyManager	access:public	signature:(const XnChar* const& key1, const XnChar* const& key2)
CompressData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus CompressData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
CompressData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* CompressData)(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten);$/;"	m	struct:XnModuleCodecInterface	access:public
ConstFind	/usr/include/ni/XnHash.h	/^	XnStatus ConstFind(const XnKey& key, ConstIterator& hiter) const$/;"	f	class:XnHash	access:private	signature:(const XnKey& key, ConstIterator& hiter) const
ConstIterator	/usr/include/ni/XnArray.h	/^	typedef const T* ConstIterator;$/;"	t	class:XnArray	access:public
ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const ConstIterator& other) :$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other)
ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const XnHash* pHash) : $/;"	f	class:XnHash::ConstIterator	access:protected	signature:(const XnHash* pHash)
ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator) :$/;"	f	class:XnHash::ConstIterator	access:protected	signature:(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator)
ConstIterator	/usr/include/ni/XnHash.h	/^	class ConstIterator$/;"	c	class:XnHash	access:public
ConstIterator	/usr/include/ni/XnList.h	/^		ConstIterator(XnNode* pNode) : m_pCurrent(pNode) {}$/;"	f	class:XnList::ConstIterator	access:protected	signature:(XnNode* pNode)
ConstIterator	/usr/include/ni/XnList.h	/^		ConstIterator(const ConstIterator& other) : m_pCurrent(other.m_pCurrent) {}$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other)
ConstIterator	/usr/include/ni/XnList.h	/^	class ConstIterator$/;"	c	class:XnList	access:public
Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context() : m_pContext(NULL), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:()
Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context(XnContext* pContext) : m_pContext(pContext), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:(XnContext* pContext)
Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context(const Context& other) : m_pContext(other.m_pContext), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:(const Context& other)
Context	/usr/include/ni/XnCppWrapper.h	/^	class Context$/;"	c	namespace:xn
ConvertProjectiveToRealWorld	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ConvertProjectiveToRealWorld(XnUInt32 nCount, const XnPoint3D aProjective[], XnPoint3D aRealWorld[]) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnUInt32 nCount, const XnPoint3D aProjective[], XnPoint3D aRealWorld[]) const
ConvertRealWorldToProjective	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ConvertRealWorldToProjective(XnUInt32 nCount, const XnPoint3D aRealWorld[], XnPoint3D aProjective[]) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnUInt32 nCount, const XnPoint3D aRealWorld[], XnPoint3D aProjective[]) const
CopyFrom	/usr/include/ni/XnArray.h	/^	XnStatus CopyFrom(const XnArray& other)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const DepthMetaData& other)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other)
CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const IRMetaData& other)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other)
CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const SceneMetaData& other)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other)
CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CopyFrom(const ImageMetaData& other)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other)
Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockAudioGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockDepthGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockIRGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockImageGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::AudioGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::DepthGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::Device	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::GestureGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::HandsGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::IRGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::ImageGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::SceneAnalyzer	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::UserGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, XnCodecID codecID, ProductionNode& initializerNode);$/;"	p	class:xn::Codec	access:public	signature:(Context& context, XnCodecID codecID, ProductionNode& initializerNode)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strFormatName = NULL);$/;"	p	class:xn::Recorder	access:public	signature:(Context& context, const XnChar* strFormatName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strFormatName);$/;"	p	class:xn::Player	access:public	signature:(Context& context, const XnChar* strFormatName)
Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockRawGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus AudioGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::AudioGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Codec::Create(Context& context, XnCodecID codecID, ProductionNode& initializerNode)$/;"	f	class:xn::Codec	signature:(Context& context, XnCodecID codecID, ProductionNode& initializerNode)
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus DepthGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::DepthGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Device::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::Device	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus GestureGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::GestureGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus HandsGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::HandsGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus IRGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::IRGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus ImageGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::ImageGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockAudioGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockAudioGenerator	signature:(Context& context, const XnChar* strName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockDepthGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockDepthGenerator	signature:(Context& context, const XnChar* strName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockIRGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockIRGenerator	signature:(Context& context, const XnChar* strName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockImageGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockImageGenerator	signature:(Context& context, const XnChar* strName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockRawGenerator::Create(Context& context, const XnChar* strName \/*= NULL*\/)$/;"	f	class:xn::MockRawGenerator	signature:(Context& context, const XnChar* strName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Player::Create(Context& context, const XnChar* strFormatName)$/;"	f	class:xn::Player	signature:(Context& context, const XnChar* strFormatName)
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Recorder::Create(Context& context, const XnChar* strFormatName \/*= NULL*\/)$/;"	f	class:xn::Recorder	signature:(Context& context, const XnChar* strFormatName )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus SceneAnalyzer::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::SceneAnalyzer	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus UserGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::UserGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
Create	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Create(Context& context, const XnChar* strInstanceName, const XnChar* strCreationInfo, NodeInfoList* pNeededTrees, const XnChar* strConfigurationDir, ModuleProductionNode** ppInstance) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(Context& context, const XnChar* strInstanceName, const XnChar* strCreationInfo, NodeInfoList* pNeededTrees, const XnChar* strConfigurationDir, ModuleProductionNode** ppInstance)
Create	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Create)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
Create	/usr/include/ni/XnOSCpp.h	/^	XnStatus Create(XnBool bManualReset)$/;"	f	class:XnOSEvent	access:public	signature:(XnBool bManualReset)
Create	/usr/include/ni/XnOSCpp.h	/^	XnStatus Create(const XnChar* strName, XnBool bManualReset)$/;"	f	class:XnOSEvent	access:public	signature:(const XnChar* strName, XnBool bManualReset)
CreateAnyProductionTree	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateAnyProductionTree(XnProductionNodeType type, Query* pQuery, ProductionNode& node, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, Query* pQuery, ProductionNode& node, EnumerationErrors* pErrors = NULL)
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(AudioGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockAudioGenerator	access:public	signature:(AudioGenerator& other, const XnChar* strName = NULL)
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(DepthGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockDepthGenerator	access:public	signature:(DepthGenerator& other, const XnChar* strName = NULL)
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(IRGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockIRGenerator	access:public	signature:(IRGenerator& other, const XnChar* strName = NULL)
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(ImageGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockImageGenerator	access:public	signature:(ImageGenerator& other, const XnChar* strName = NULL)
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockAudioGenerator::CreateBasedOn(AudioGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockAudioGenerator	signature:(AudioGenerator& other, const XnChar* strName )
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockDepthGenerator::CreateBasedOn(DepthGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockDepthGenerator	signature:(DepthGenerator& other, const XnChar* strName )
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockIRGenerator::CreateBasedOn(IRGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockIRGenerator	signature:(IRGenerator& other, const XnChar* strName )
CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockImageGenerator::CreateBasedOn(ImageGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockImageGenerator	signature:(ImageGenerator& other, const XnChar* strName )
CreateCodec	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateCodec(XnCodecID codecID, ProductionNode& initializerNode, Codec& codec)$/;"	f	class:xn::Context	access:public	signature:(XnCodecID codecID, ProductionNode& initializerNode, Codec& codec)
CreateMockNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateMockNode(XnProductionNodeType type, const XnChar* strName, ProductionNode& node)$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, const XnChar* strName, ProductionNode& node)
CreateMockNodeBasedOn	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateMockNodeBasedOn(ProductionNode& originalNode, const XnChar* strName, ProductionNode& mockNode)$/;"	f	class:xn::Context	access:public	signature:(ProductionNode& originalNode, const XnChar* strName, ProductionNode& mockNode)
CreateProductionTree	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateProductionTree(NodeInfo& Tree)$/;"	f	class:xn::Context	access:public	signature:(NodeInfo& Tree)
CreateValueCopy	/usr/include/ni/XnStringsHash.h	/^	static XnValue CreateValueCopy(const XnChar* const& orig)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnChar* const& orig)
CroppingCapability	/usr/include/ni/XnCppWrapper.h	/^		inline CroppingCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnNodeHandle hNode)
CroppingCapability	/usr/include/ni/XnCppWrapper.h	/^	class CroppingCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel* Data() const { return (const XnDepthPixel*)MapMetaData::Data(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel*& Data() { return (const XnDepthPixel*&)MapMetaData::Data(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel* Data() const { return (const XnIRPixel*)MapMetaData::Data(); }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel*& Data() { return (const XnIRPixel*&)MapMetaData::Data(); }$/;"	f	class:xn::IRMetaData	access:public	signature:()
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel* Data() const { return (const XnLabel*)MapMetaData::Data(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel*& Data() { return (const XnLabel*&)MapMetaData::Data(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8* Data() const { return *m_ppData; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8*& Data() { return *m_ppData; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
Data	/usr/include/ni/XnNode.h	/^	XnValue& Data() {return m_Data;}$/;"	f	class:XnNode	access:public	signature:()
Data	/usr/include/ni/XnNode.h	/^	const XnValue& Data() const {return m_Data;}$/;"	f	class:XnNode	access:public	signature:() const
DataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 DataSize() const { return m_output.nDataSize; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
DataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& DataSize() { return m_output.nDataSize; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
Deallocate	/usr/include/ni/IXnNodeAllocator.h	/^	virtual void Deallocate(XnNode *pNode) = 0;$/;"	p	class:INiNodeAllocator	access:public	signature:(XnNode *pNode)
Deallocate	/usr/include/ni/XnNode.h	/^	static void Deallocate(XnNode *pNode) { xnDeallocateBaseNode((XnBaseNode*)pNode); }$/;"	f	class:XnNode	access:public	signature:(XnNode *pNode)
Deallocate	/usr/include/ni/XnNodeAllocator.h	/^	virtual void Deallocate(XnNode *pNode) { XnNode::Deallocate(pNode); }$/;"	f	class:XnNodeAllocator	access:public	signature:(XnNode *pNode)
DecodeData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus DecodeData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const$/;"	f	class:xn::Codec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
DecompressData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus DecompressData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
DecompressData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* DecompressData)(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten);$/;"	m	struct:XnModuleCodecInterface	access:public
DefaultComparer	/usr/include/ni/XnAlgorithms.h	/^XnBool DefaultComparer(const T& arg1, const T& arg2)$/;"	f	signature:(const T& arg1, const T& arg2)
Depth	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Depth)(struct XnModuleDepthGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
DepthGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline DepthGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
DepthGenerator	/usr/include/ni/XnCppWrapper.h	/^	class DepthGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
DepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::DepthMap& DepthMap() const { return m_depthMap; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^		DepthMetaData(const DepthMetaData& other);$/;"	p	class:xn::DepthMetaData	access:private	signature:(const DepthMetaData& other)
DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline DepthMetaData() : $/;"	f	class:xn::DepthMetaData	access:public	signature:()
DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^	class DepthMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
Description	/usr/include/ni/XnCppWrapper.h	/^			inline const XnProductionNodeDescription& Description() { return *xnEnumerationErrorsGetCurrentDescription(m_it); }$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
Destroy	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void Destroy(ModuleProductionNode* pInstance) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(ModuleProductionNode* pInstance)
Destroy	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* Destroy)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
Device	/usr/include/ni/XnCppWrapper.h	/^		inline Device(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Device	access:public	signature:(XnNodeHandle hNode = NULL)
Device	/usr/include/ni/XnCppWrapper.h	/^	class Device : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
Device	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Device)(struct XnModuleDeviceInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
DeviceIdentificationCapability	/usr/include/ni/XnCppWrapper.h	/^		DeviceIdentificationCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnNodeHandle hNode)
DeviceIdentificationCapability	/usr/include/ni/XnCppWrapper.h	/^	class DeviceIdentificationCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
EncodeData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EncodeData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const$/;"	f	class:xn::Codec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
End	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator End() const { return Iterator(NULL); } $/;"	f	class:xn::EnumerationErrors	access:public	signature:() const
End	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator End() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
EnumerateActiveJoints	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateActiveJoints(XnSkeletonJoint* pJoints, XnUInt16& nJoints) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint* pJoints, XnUInt16& nJoints) const
EnumerateActiveJoints	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateActiveJoints(XnSkeletonJoint* pJoints, XnUInt16& nJoints) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint* pJoints, XnUInt16& nJoints)
EnumerateActiveJoints	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateActiveJoints)(XnModuleNodeHandle hGenerator, XnSkeletonJoint* pJoints, XnUInt16* pnJoints);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
EnumerateAllGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateAllGestures(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const
EnumerateAllGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateAllGestures(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures)
EnumerateAllGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateAllGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
EnumerateExistingNodes	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateExistingNodes(NodeInfoList& list) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& list) const
EnumerateExistingNodes	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateExistingNodes(NodeInfoList& list, XnProductionNodeType type) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& list, XnProductionNodeType type) const
EnumerateGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateGestures(XnChar*& astrGestures, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar*& astrGestures, XnUInt16& nGestures) const
EnumerateGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateGestures(XnChar** pstrGestures, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt16& nGestures)
EnumerateGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
EnumerateLicenses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateLicenses(XnLicense*& aLicenses, XnUInt32& nCount) const$/;"	f	class:xn::Context	access:public	signature:(XnLicense*& aLicenses, XnUInt32& nCount) const
EnumerateNodes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateNodes(NodeInfoList& list) const$/;"	f	class:xn::Player	access:public	signature:(NodeInfoList& list) const
EnumerateProductionTrees	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateProductionTrees(XnProductionNodeType Type, Query* pQuery, NodeInfoList& TreesList, EnumerationErrors* pErrors = NULL) const$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType Type, Query* pQuery, NodeInfoList& TreesList, EnumerationErrors* pErrors = NULL) const
EnumerateProductionTrees	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateProductionTrees(Context& context, NodeInfoList& TreesList, EnumerationErrors* pErrors) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(Context& context, NodeInfoList& TreesList, EnumerationErrors* pErrors)
EnumerateProductionTrees	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateProductionTrees)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		inline EnumerationErrors() : m_bAllocated(TRUE), m_pErrors(NULL) { xnEnumerationErrorsAllocate(&m_pErrors); }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		inline EnumerationErrors(XnEnumerationErrors* pErrors, XnBool bOwn = FALSE) : m_bAllocated(bOwn), m_pErrors(pErrors) {}$/;"	f	class:xn::EnumerationErrors	access:public	signature:(XnEnumerationErrors* pErrors, XnBool bOwn = FALSE)
EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^	class EnumerationErrors$/;"	c	namespace:xn
Error	/usr/include/ni/XnCppWrapper.h	/^			inline XnStatus Error() { return xnEnumerationErrorsGetCurrentError(m_it); }$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
ErrorStateCapability	/usr/include/ni/XnCppWrapper.h	/^		ErrorStateCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(XnNodeHandle hNode)
ErrorStateCapability	/usr/include/ni/XnCppWrapper.h	/^	class ErrorStateCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
ExtensionModule	/usr/include/ni/XnModuleCppInterface.h	/^	class ExtensionModule : public Module$/;"	c	namespace:xn	inherits:Module
FALSE	/usr/include/ni/XnPlatform.h	/^	#define FALSE /;"	d
FPS	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FPS() const { return m_map.nFPS; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
FPS	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FPS() { return m_map.nFPS; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
FilterList	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus FilterList(Context& context, Query& query);$/;"	p	class:xn::NodeInfoList	access:public	signature:(Context& context, Query& query)
FilterList	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus NodeInfoList::FilterList(Context& context, Query& query)$/;"	f	class:xn::NodeInfoList	signature:(Context& context, Query& query)
Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, ConstIterator& hiter) const$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, ConstIterator& hiter) const
Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, Iterator& hiter)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, Iterator& hiter)
Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, XnHashValue hashValue, ConstIterator& hiter) const$/;"	f	class:XnHash	access:protected	signature:(const XnKey& key, XnHashValue hashValue, ConstIterator& hiter) const
Find	/usr/include/ni/XnList.h	/^	ConstIterator Find(const XnValue& value) const$/;"	f	class:XnList	access:public	signature:(const XnValue& value) const
Find	/usr/include/ni/XnList.h	/^	Iterator Find(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
FindExistingNode	/usr/include/ni/XnCppWrapper.h	/^		XnStatus FindExistingNode(XnProductionNodeType type, ProductionNode& node) const$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, ProductionNode& node) const
FrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FrameID() const { return m_output.nFrameID; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
FrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FrameID() { return m_output.nFrameID; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
FrameSyncCapability	/usr/include/ni/XnCppWrapper.h	/^		inline FrameSyncCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(XnNodeHandle hNode)
FrameSyncCapability	/usr/include/ni/XnCppWrapper.h	/^	class FrameSyncCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
FrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus FrameSyncWith(Generator& other);$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other)
FrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus FrameSyncCapability::FrameSyncWith(Generator& other)$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other)
FrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus FrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
FrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* FrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
Free	/usr/include/ni/XnCppWrapper.h	/^		inline void Free()$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
Free	/usr/include/ni/XnCppWrapper.h	/^		void Free()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
FreeImpl	/usr/include/ni/XnCppWrapper.h	/^		inline void FreeImpl()$/;"	f	class:xn::NodeInfoList	access:private	signature:()
FreeImpl	/usr/include/ni/XnCppWrapper.h	/^		void FreeImpl()$/;"	f	class:xn::Context	access:private	signature:()
FreeLicensesList	/usr/include/ni/XnCppWrapper.h	/^		inline static void FreeLicensesList(XnLicense aLicenses[])$/;"	f	class:xn::Context	access:public	signature:(XnLicense aLicenses[])
FreeValue	/usr/include/ni/XnStringsHash.h	/^	static void FreeValue(XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(XnValue& Value)
FullRes	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair FullRes;$/;"	m	struct:XnMapMetaData	access:public
FullXRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FullXRes() const { return m_map.FullRes.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
FullXRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FullXRes() { return m_map.FullRes.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
FullYRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FullYRes() const { return m_map.FullRes.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
FullYRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FullYRes() { return m_map.FullRes.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
General	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* General)(void* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
GeneralIntCapability	/usr/include/ni/XnCppWrapper.h	/^		GeneralIntCapability(XnNodeHandle hNode, const XnChar* strCap) : Capability(hNode), m_strCap(strCap) {}$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnNodeHandle hNode, const XnChar* strCap)
GeneralIntCapability	/usr/include/ni/XnCppWrapper.h	/^	class GeneralIntCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
Generator	/usr/include/ni/XnCppWrapper.h	/^		inline Generator(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Generator	access:public	signature:(XnNodeHandle hNode = NULL)
Generator	/usr/include/ni/XnCppWrapper.h	/^	class Generator : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
Generator	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Generator)(struct XnModuleGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
Gesture	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Gesture)(struct XnModuleGestureGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
GestureCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct GestureCookie$/;"	s	class:xn::GestureGenerator	access:private
GestureCookie	/usr/include/ni/XnCppWrapper.h	/^		} GestureCookie;$/;"	t	class:xn::GestureGenerator	typeref:struct:xn::GestureGenerator::GestureCookie	access:private
GestureGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline GestureGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {} $/;"	f	class:xn::GestureGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
GestureGenerator	/usr/include/ni/XnCppWrapper.h	/^	class GestureGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
GestureProgress	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* GestureProgress)(GestureGenerator& generator, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie);$/;"	t	class:xn::GestureGenerator	access:public
GestureProgressCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE GestureProgressCallback(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie)$/;"	f	class:xn::GestureGenerator	access:private	signature:(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie)
GestureRecognized	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* GestureRecognized)(GestureGenerator& generator, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie);$/;"	t	class:xn::GestureGenerator	access:public
GestureRecognizedCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE GestureRecognizedCallback(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie)$/;"	f	class:xn::GestureGenerator	access:private	signature:(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie)
Get	/usr/include/ni/XnCppWrapper.h	/^		inline XnInt32 Get()$/;"	f	class:xn::GeneralIntCapability	access:public	signature:()
Get	/usr/include/ni/XnHash.h	/^	XnStatus Get(const XnKey& key, XnValue& value) const$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, XnValue& value) const
Get	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Get(const XnChar* strCap, XnInt32& nValue) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32& nValue)
Get	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Get)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32* pnValue);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
GetActiveGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetActiveGestures(XnChar*& astrGestures, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar*& astrGestures, XnUInt16& nGestures) const
GetActiveGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetActiveGestures(XnChar** pstrGestures, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt16& nGestures)
GetActiveGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetActiveGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
GetAdditionalData	/usr/include/ni/XnCppWrapper.h	/^		inline const void* GetAdditionalData() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
GetAllActiveGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAllActiveGestures(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const
GetAllActiveGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAllActiveGestures(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures)
GetAllActiveGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAllActiveGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
GetAllAvailablePoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAllAvailablePoses(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) const
GetAllAvailablePoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAllAvailablePoses(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses)
GetAllAvailablePoses	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAllAvailablePoses)(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
GetAllocatedSize	/usr/include/ni/XnArray.h	/^	XnUInt32 GetAllocatedSize() const$/;"	f	class:XnArray	access:public	signature:() const
GetAlternativeViewPointCap	/usr/include/ni/XnCppWrapper.h	/^		inline AlternativeViewPointCapability GetAlternativeViewPointCap()$/;"	f	class:xn::Generator	access:public	signature:()
GetAlternativeViewPointCap	/usr/include/ni/XnCppWrapper.h	/^		inline const AlternativeViewPointCapability GetAlternativeViewPointCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleAlternativeViewPointInterface* GetAlternativeViewPointInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
GetAntiFlickerCap	/usr/include/ni/XnCppWrapper.h	/^		inline AntiFlickerCapability GetAntiFlickerCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleAntiFlickerInterface* GetAntiFlickerInterface() { return NULL; }$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
GetAsValue	/usr/include/ni/XnStringsHash.h	/^	static XnValue GetAsValue(const XnChar* const& orig)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnChar* const& orig)
GetAudioBuffer	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUChar* GetAudioBuffer() const$/;"	f	class:xn::AudioGenerator	access:public	signature:() const
GetAudioBuffer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUChar* GetAudioBuffer() = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:()
GetAudioBuffer	/usr/include/ni/XnModuleInterface.h	/^	XnUChar* (XN_CALLBACK_TYPE* GetAudioBuffer)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
GetAvailablePoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAvailablePoses(XnChar** pstrPoses, XnUInt32& nPoses) const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnChar** pstrPoses, XnUInt32& nPoses) const
GetAvailablePoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAvailablePoses(XnChar** pstrPoses, XnUInt32& nPoses) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnChar** pstrPoses, XnUInt32& nPoses)
GetAvailablePoses	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAvailablePoses)(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32* pnPoses);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
GetBacklightCompensationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetBacklightCompensationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetBrightnessCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetBrightnessCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetBytesPerPixel() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnDepthPixel); }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnIRPixel); }$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnLabel); }$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return xnGetBytesPerPixelForPixelFormat(GetPixelFormat()); }$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
GetBytesPerPixel	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetBytesPerPixel)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
GetCalibrationPose	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCalibrationPose(XnChar* strPose) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnChar* strPose) const
GetCalibrationPose	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCalibrationPose(XnChar* strPose) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnChar* strPose)
GetCalibrationPose	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCalibrationPose)(XnModuleNodeHandle hGenerator, XnChar* strPose);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
GetCoM	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCoM(XnUserID user, XnPoint3D& com) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID user, XnPoint3D& com) const
GetCoM	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCoM(XnUserID user, XnPoint3D& com) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID user, XnPoint3D& com)
GetCoM	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCoM)(XnModuleNodeHandle hGenerator, XnUserID user, XnPoint3D* pCoM);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
GetCodecID	/usr/include/ni/XnCppWrapper.h	/^		inline XnCodecID GetCodecID() const$/;"	f	class:xn::Codec	access:public	signature:() const
GetCodecID	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnCodecID GetCodecID() const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:() const
GetCodecID	/usr/include/ni/XnModuleInterface.h	/^	XnCodecID (XN_CALLBACK_TYPE* GetCodecID)(XnModuleNodeHandle hCodec);$/;"	m	struct:XnModuleCodecInterface	access:public
GetContext	/usr/include/ni/XnCppWrapper.h	/^		inline void GetContext(Context& context) const;$/;"	p	class:xn::ProductionNode	access:public	signature:(Context& context) const
GetContext	/usr/include/ni/XnCppWrapper.h	/^	inline void ProductionNode::GetContext(Context& context) const$/;"	f	class:xn::ProductionNode	signature:(Context& context) const
GetContrastCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetContrastCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetCreationInfo	/usr/include/ni/XnCppWrapper.h	/^		 *\/		inline const XnChar* GetCreationInfo() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
GetCropping	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCropping(XnCropping& Cropping) const$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnCropping& Cropping) const
GetCropping	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCropping(XnCropping &Cropping) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnCropping &Cropping)
GetCropping	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCropping)(XnModuleNodeHandle hGenerator, XnCropping* pCropping);$/;"	m	struct:XnModuleCroppingInterface	access:public
GetCroppingCap	/usr/include/ni/XnCppWrapper.h	/^		inline CroppingCapability GetCroppingCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetCroppingCap	/usr/include/ni/XnCppWrapper.h	/^		inline const CroppingCapability GetCroppingCap() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
GetCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleCroppingInterface* GetCroppingInterface() { return NULL; }$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
GetData	/usr/include/ni/XnArray.h	/^	T* GetData()$/;"	f	class:XnArray	access:public	signature:()
GetData	/usr/include/ni/XnArray.h	/^	const T* GetData() const$/;"	f	class:XnArray	access:public	signature:() const
GetData	/usr/include/ni/XnBitSet.h	/^	XnUInt32* GetData()$/;"	f	class:XnBitSet	access:public	signature:()
GetData	/usr/include/ni/XnBitSet.h	/^	const XnUInt32* GetData() const$/;"	f	class:XnBitSet	access:public	signature:() const
GetData	/usr/include/ni/XnCppWrapper.h	/^		inline const void* GetData()$/;"	f	class:xn::Generator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetAudioBuffer(); }$/;"	f	class:xn::ModuleAudioGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetDepthMap(); }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetIRMap(); }$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetImageMap(); }$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetLabelMap(); }$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleGestureGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleHandsGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
GetData	/usr/include/ni/XnModuleInterface.h	/^	const void* (XN_CALLBACK_TYPE* GetData)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
GetDataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetDataSize() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetDataSize	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetDataSize() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
GetDataSize	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetDataSize)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
GetDepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel* GetDepthMap() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
GetDepthMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnDepthPixel* GetDepthMap() = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:()
GetDepthMap	/usr/include/ni/XnModuleInterface.h	/^	XnDepthPixel* (XN_CALLBACK_TYPE* GetDepthMap)$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
GetDescription	/usr/include/ni/XnCppWrapper.h	/^		inline const XnProductionNodeDescription& GetDescription() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
GetDescription	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void GetDescription(XnProductionNodeDescription* pDescription) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(XnProductionNodeDescription* pDescription)
GetDescription	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* GetDescription)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
GetDeviceMaxDepth	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel GetDeviceMaxDepth() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
GetDeviceMaxDepth	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnDepthPixel GetDeviceMaxDepth() = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:()
GetDeviceMaxDepth	/usr/include/ni/XnModuleInterface.h	/^	XnDepthPixel (XN_CALLBACK_TYPE* GetDeviceMaxDepth)$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
GetDeviceName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetDeviceName(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
GetDeviceName	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetDeviceName(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
GetDeviceName	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetDeviceName)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
GetErrorState	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetErrorState() const$/;"	f	class:xn::ErrorStateCapability	access:public	signature:() const
GetErrorState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetErrorState() = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:()
GetErrorState	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetErrorState)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleErrorStateInterface	access:public
GetErrorStateCap	/usr/include/ni/XnCppWrapper.h	/^		inline ErrorStateCapability GetErrorStateCap()$/;"	f	class:xn::ProductionNode	access:public	signature:()
GetErrorStateCap	/usr/include/ni/XnCppWrapper.h	/^		inline const ErrorStateCapability GetErrorStateCap() const$/;"	f	class:xn::ProductionNode	access:public	signature:() const
GetErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleErrorStateInterface* GetErrorStateInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
GetExportedNodes	/usr/include/ni/XnModuleCppInterface.h	/^		XnStatus GetExportedNodes(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)$/;"	f	class:xn::Module	access:public	signature:(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)
GetExportedNodesCount	/usr/include/ni/XnModuleCppInterface.h	/^		XnUInt32 GetExportedNodesCount() { return m_ExportedNodes.Size(); }$/;"	f	class:xn::Module	access:public	signature:()
GetExposureCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetExposureCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleExtendedSerializationInterface* GetExtendedSerializationInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
GetFieldOfView	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetFieldOfView(XnFieldOfView& FOV) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnFieldOfView& FOV) const
GetFieldOfView	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void GetFieldOfView(XnFieldOfView& FOV) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnFieldOfView& FOV)
GetFieldOfView	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* GetFieldOfView)(XnModuleNodeHandle hGenerator, XnFieldOfView* pFOV);$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
GetFloor	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetFloor(XnPlane3D& Plane) const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(XnPlane3D& Plane) const
GetFloor	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetFloor(XnPlane3D& pPlane) = 0;$/;"	p	class:xn::ModuleSceneAnalyzer	access:public	signature:(XnPlane3D& pPlane)
GetFloor	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetFloor)(XnModuleNodeHandle hGenerator, XnPlane3D* pPlane);$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
GetFocusCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetFocusCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetFrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetFrameID() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetFrameID	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetFrameID() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
GetFrameID	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetFrameID)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
GetFrameSyncCap	/usr/include/ni/XnCppWrapper.h	/^		inline FrameSyncCapability GetFrameSyncCap()$/;"	f	class:xn::Generator	access:public	signature:()
GetFrameSyncCap	/usr/include/ni/XnCppWrapper.h	/^		inline const FrameSyncCapability GetFrameSyncCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetFrameSyncInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleFrameSyncInterface* GetFrameSyncInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
GetFromValue	/usr/include/ni/XnStringsHash.h	/^	static const XnChar* const& GetFromValue(const XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnValue& Value)
GetFromValue	/usr/include/ni/XnStringsHash.h	/^	static const XnChar*& GetFromValue(XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(XnValue& Value)
GetGainCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGainCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetGammaCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGammaCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetGeneralIntCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGeneralIntCap(const XnChar* strCapability)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strCapability)
GetGeneralIntInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleGeneralIntInterface* GetGeneralIntInterface(const XnChar* \/*strCap*\/) { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* )
GetGeneralProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetGeneralProperty(const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer) const
GetGeneralProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetGeneralProperty(const XnChar* \/*strName*\/, XnUInt32 \/*nBufferSize*\/, void* \/*pBuffer*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt32 , void* ) const
GetGeneralProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetGeneralProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
GetGlobalErrorState	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetGlobalErrorState()$/;"	f	class:xn::Context	access:public	signature:()
GetGlobalMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool GetGlobalMirror()$/;"	f	class:xn::Context	access:public	signature:()
GetGrayscale16ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel* GetGrayscale16ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetGrayscale8ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel* GetGrayscale8ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetHueCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetHueCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetIRMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel* GetIRMap() const$/;"	f	class:xn::IRGenerator	access:public	signature:() const
GetIRMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnIRPixel* GetIRMap() = 0;$/;"	p	class:xn::ModuleIRGenerator	access:public	signature:()
GetIRMap	/usr/include/ni/XnModuleInterface.h	/^	XnIRPixel* (XN_CALLBACK_TYPE* GetIRMap)($/;"	m	struct:XnModuleIRGeneratorInterface	access:public
GetIdentificationCap	/usr/include/ni/XnCppWrapper.h	/^		inline DeviceIdentificationCapability GetIdentificationCap()$/;"	f	class:xn::Device	access:public	signature:()
GetIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleDeviceIdentificationInterface* GetIdentificationInterface() { return NULL; }$/;"	f	class:xn::ModuleDevice	access:public	signature:()
GetImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8* GetImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetImageMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt8* GetImageMap() = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:()
GetImageMap	/usr/include/ni/XnModuleInterface.h	/^	XnUInt8* (XN_CALLBACK_TYPE* GetImageMap)($/;"	m	struct:XnModuleImageGeneratorInterface	access:public
GetInfo	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfo GetInfo() const { return NodeInfo(xnGetNodeInfo(m_hNode)); }$/;"	f	class:xn::ProductionNode	access:public	signature:() const
GetInitStatus	/usr/include/ni/XnHash.h	/^	XnStatus GetInitStatus() const$/;"	f	class:XnHash	access:public	signature:() const
GetInstance	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetInstance(ProductionNode& node) const;$/;"	p	class:xn::NodeInfo	access:public	signature:(ProductionNode& node) const
GetInstance	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus NodeInfo::GetInstance(ProductionNode& node) const$/;"	f	class:xn::NodeInfo	signature:(ProductionNode& node) const
GetInstanceName	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetInstanceName() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
GetIntProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetIntProperty(const XnChar* strName, XnUInt64& nValue) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt64& nValue) const
GetIntProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetIntProperty(const XnChar* \/*strName*\/, XnUInt64& \/*nValue*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt64& ) const
GetIntProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetIntProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
GetInterface	/usr/include/ni/XnModuleInterface.h	/^	} GetInterface;$/;"	m	struct:XnModuleExportedProductionNodeInterface	typeref:union:XnModuleExportedProductionNodeInterface::__anon4	access:public
GetInterfaceFuncPtr	/usr/include/ni/XnModuleCppRegistratration.h	/^typedef void (XN_CALLBACK_TYPE *GetInterfaceFuncPtr)(void* pInterface);$/;"	t
GetIrisCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetIrisCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetLabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel* GetLabelMap() const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:() const
GetLabelMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const XnLabel* GetLabelMap() = 0;$/;"	p	class:xn::ModuleSceneAnalyzer	access:public	signature:()
GetLabelMap	/usr/include/ni/XnModuleInterface.h	/^	const XnLabel* (XN_CALLBACK_TYPE* GetLabelMap)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
GetLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleLockAwareInterface* GetLockAwareInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
GetLockState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool GetLockState() = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:()
GetLockState	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* GetLockState)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleLockAwareInterface	access:public
GetLowLightCompensationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetLowLightCompensationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetMapOutputMode(XnMapOutputMode &OutputMode) const$/;"	f	class:xn::MapGenerator	access:public	signature:(XnMapOutputMode &OutputMode) const
GetMapOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetMapOutputMode(XnMapOutputMode& Mode) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnMapOutputMode& Mode)
GetMapOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetMapOutputMode)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(AudioMetaData& metaData) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(AudioMetaData& metaData) const
GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(DepthMetaData& metaData) const $/;"	f	class:xn::DepthGenerator	access:public	signature:(DepthMetaData& metaData) const
GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(IRMetaData& metaData) const $/;"	f	class:xn::IRGenerator	access:public	signature:(IRMetaData& metaData) const
GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(ImageMetaData& metaData) const $/;"	f	class:xn::ImageGenerator	access:public	signature:(ImageMetaData& metaData) const
GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(SceneMetaData& metaData) const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(SceneMetaData& metaData) const
GetMirrorCap	/usr/include/ni/XnCppWrapper.h	/^		inline MirrorCapability GetMirrorCap()$/;"	f	class:xn::Generator	access:public	signature:()
GetMirrorCap	/usr/include/ni/XnCppWrapper.h	/^		inline const MirrorCapability GetMirrorCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleMirrorInterface* GetMirrorInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
GetName	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* GetName() const {return xnGetNodeName(m_hNode); }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
GetName	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetName() const { return m_strName; }$/;"	f	class:xn::Resolution	access:public	signature:() const
GetNeededNodes	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList& GetNeededNodes() const;$/;"	p	class:xn::NodeInfo	access:public	signature:() const
GetNeededNodes	/usr/include/ni/XnCppWrapper.h	/^	inline NodeInfoList& NodeInfo::GetNeededNodes() const$/;"	f	class:xn::NodeInfo	signature:() const
GetNode	/usr/include/ni/XnHash.h	/^		XnNode* GetNode()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
GetNode	/usr/include/ni/XnHash.h	/^		const XnNode* GetNode() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
GetNode	/usr/include/ni/XnList.h	/^		XnNode* GetNode()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
GetNode	/usr/include/ni/XnList.h	/^		const XnNode* GetNode() const$/;"	f	class:XnList::ConstIterator	access:public	signature:() const
GetNumFrames	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetNumFrames(const XnChar* strNodeName, XnUInt32& nFrames) const$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrames) const
GetNumFrames	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetNumFrames(const XnChar* strNodeName, XnUInt32& nFrames) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrames)
GetNumFrames	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetNumFrames)$/;"	m	struct:XnModulePlayerInterface	access:public
GetNumberOfPoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetNumberOfPoses() const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:() const
GetNumberOfPoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetNumberOfPoses() = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:()
GetNumberOfPoses	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetNumberOfPoses)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
GetNumberOfUsers	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16 GetNumberOfUsers() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
GetNumberOfUsers	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt16 GetNumberOfUsers() = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:()
GetNumberOfUsers	/usr/include/ni/XnModuleInterface.h	/^	XnUInt16 (XN_CALLBACK_TYPE* GetNumberOfUsers)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
GetPanCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetPanCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetPixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat GetPixelFormat() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetPixelFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnPixelFormat GetPixelFormat() = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:()
GetPixelFormat	/usr/include/ni/XnModuleInterface.h	/^	XnPixelFormat (XN_CALLBACK_TYPE* GetPixelFormat)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
GetPlaybackSpeed	/usr/include/ni/XnCppWrapper.h	/^		inline XnDouble GetPlaybackSpeed() const$/;"	f	class:xn::Player	access:public	signature:() const
GetPoseDetectionCap	/usr/include/ni/XnCppWrapper.h	/^		inline PoseDetectionCapability GetPoseDetectionCap()$/;"	f	class:xn::UserGenerator	access:public	signature:()
GetPoseDetectionCap	/usr/include/ni/XnCppWrapper.h	/^		inline const PoseDetectionCapability GetPoseDetectionCap() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
GetPoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModulePoseDetectionInteface* GetPoseDetectionInteface() {return NULL;}$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
GetPowerLineFrequency	/usr/include/ni/XnCppWrapper.h	/^		inline XnPowerLineFrequency GetPowerLineFrequency()$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:()
GetPowerLineFrequency	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnPowerLineFrequency GetPowerLineFrequency() = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:()
GetPowerLineFrequency	/usr/include/ni/XnModuleInterface.h	/^	XnPowerLineFrequency (XN_CALLBACK_TYPE* GetPowerLineFrequency)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
GetProductionNodeByName	/usr/include/ni/XnCppWrapper.h	/^		XnStatus GetProductionNodeByName(const XnChar* strInstanceName, ProductionNode& node) const$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strInstanceName, ProductionNode& node) const
GetProductionNodeInfoByName	/usr/include/ni/XnCppWrapper.h	/^		XnStatus GetProductionNodeInfoByName(const XnChar* strInstanceName, NodeInfo& nodeInfo) const$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strInstanceName, NodeInfo& nodeInfo) const
GetRGB24ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel* GetRGB24ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetRange	/usr/include/ni/XnCppWrapper.h	/^		inline void GetRange(XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) const$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) const
GetRange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetRange(const XnChar* strCap, XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported)
GetRange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetRange)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
GetRealProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetRealProperty(const XnChar* strName, XnDouble &dValue) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnDouble &dValue) const
GetRealProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetRealProperty(const XnChar* \/*strName*\/, XnDouble& \/*dValue*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnDouble& ) const
GetRealProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetRealProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
GetResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnResolution GetResolution() const { return m_Res; }$/;"	f	class:xn::Resolution	access:public	signature:() const
GetRollCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetRollCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetSaturationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetSaturationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetSerialNumber	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSerialNumber(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
GetSerialNumber	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSerialNumber(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
GetSerialNumber	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSerialNumber)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
GetSharpnessCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetSharpnessCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetSize	/usr/include/ni/XnArray.h	/^	XnUInt32 GetSize() const$/;"	f	class:XnArray	access:public	signature:() const
GetSize	/usr/include/ni/XnBitSet.h	/^	XnUInt32 GetSize() const$/;"	f	class:XnBitSet	access:public	signature:() const
GetSkeletonCap	/usr/include/ni/XnCppWrapper.h	/^		inline SkeletonCapability GetSkeletonCap()$/;"	f	class:xn::UserGenerator	access:public	signature:()
GetSkeletonCap	/usr/include/ni/XnCppWrapper.h	/^		inline const SkeletonCapability GetSkeletonCap() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
GetSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleSkeletonInterface* GetSkeletonInterface() { return NULL; }$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
GetSkeletonJoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJoint(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& Joint) const
GetSkeletonJoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJoint(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& jointTransformation) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& jointTransformation)
GetSkeletonJoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJoint)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
GetSkeletonJointOrientation	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJointOrientation(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& Joint) const
GetSkeletonJointOrientation	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJointOrientation(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& pJointOrientation) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& pJointOrientation)
GetSkeletonJointOrientation	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJointOrientation)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
GetSkeletonJointPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJointPosition(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& Joint) const
GetSkeletonJointPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJointPosition(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& pJointPosition) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& pJointPosition)
GetSkeletonJointPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJointPosition)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
GetSource	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSource(XnRecordMedium &sourceType, XnChar* strSource, XnUInt32 nBufSize) const$/;"	f	class:xn::Player	access:public	signature:(XnRecordMedium &sourceType, XnChar* strSource, XnUInt32 nBufSize) const
GetStatus	/usr/include/ni/XnOSCpp.h	/^	XnStatus GetStatus() const $/;"	f	class:XnAutoMutexLocker	access:public	signature:() const
GetStringProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetStringProperty(const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize) const
GetStringProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetStringProperty(const XnChar* \/*strName*\/, XnChar* \/*csValue*\/, XnUInt32 \/*nBufSize*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnChar* , XnUInt32 ) const
GetStringProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetStringProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
GetSupportedFormat	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetSupportedFormat() const$/;"	f	class:xn::Player	access:public	signature:() const
GetSupportedFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const XnChar* GetSupportedFormat() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
GetSupportedFormat	/usr/include/ni/XnModuleInterface.h	/^	const XnChar* (XN_CALLBACK_TYPE* GetSupportedFormat)$/;"	m	struct:XnModulePlayerInterface	access:public
GetSupportedMapOutputModes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSupportedMapOutputModes(XnMapOutputMode* aModes, XnUInt32& nCount) const$/;"	f	class:xn::MapGenerator	access:public	signature:(XnMapOutputMode* aModes, XnUInt32& nCount) const
GetSupportedMapOutputModes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSupportedMapOutputModes(XnMapOutputMode aModes[], XnUInt32& nCount) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnMapOutputMode aModes[], XnUInt32& nCount)
GetSupportedMapOutputModes	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSupportedMapOutputModes)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
GetSupportedMapOutputModesCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedMapOutputModesCount() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
GetSupportedMapOutputModesCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedMapOutputModesCount() = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:()
GetSupportedMapOutputModesCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedMapOutputModesCount)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
GetSupportedUserPositionsCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedUserPositionsCount() const$/;"	f	class:xn::UserPositionCapability	access:public	signature:() const
GetSupportedUserPositionsCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedUserPositionsCount() = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:()
GetSupportedUserPositionsCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedUserPositionsCount)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
GetSupportedWaveOutputModes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSupportedWaveOutputModes(XnWaveOutputMode* aSupportedModes, XnUInt32& nCount) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnWaveOutputMode* aSupportedModes, XnUInt32& nCount) const
GetSupportedWaveOutputModes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSupportedWaveOutputModes(XnWaveOutputMode aSupportedModes[], XnUInt32& nCount) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnWaveOutputMode aSupportedModes[], XnUInt32& nCount)
GetSupportedWaveOutputModes	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSupportedWaveOutputModes)(XnModuleNodeHandle hGenerator, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
GetSupportedWaveOutputModesCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedWaveOutputModesCount() const$/;"	f	class:xn::AudioGenerator	access:public	signature:() const
GetSupportedWaveOutputModesCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedWaveOutputModesCount() = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:()
GetSupportedWaveOutputModesCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedWaveOutputModesCount)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
GetTiltCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetTiltCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetTimestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64 GetTimestamp() const$/;"	f	class:xn::Generator	access:public	signature:() const
GetTimestamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt64 GetTimestamp() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
GetTimestamp	/usr/include/ni/XnModuleInterface.h	/^	XnUInt64 (XN_CALLBACK_TYPE* GetTimestamp)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnAudioMetaData* GetUnderlying() { return &m_audio; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthMetaData* GetUnderlying() { return &m_depth; }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnEnumerationErrors* GetUnderlying() { return m_pErrors; }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnIRMetaData* GetUnderlying() { return &m_ir; }$/;"	f	class:xn::IRMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnImageMetaData* GetUnderlying() { return &m_image; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnMapMetaData* GetUnderlying() { return &m_map; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnOutputMetaData* GetUnderlying() { return &m_output; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnSceneMetaData* GetUnderlying() { return &m_scene; }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnAudioMetaData* GetUnderlying() const { return &m_audio; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthMetaData* GetUnderlying() const { return &m_depth; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRMetaData* GetUnderlying() const { return &m_ir; }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnImageMetaData* GetUnderlying() const { return &m_image; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnMapMetaData* GetUnderlying() const { return &m_map; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnOutputMetaData* GetUnderlying() const { return &m_output; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnSceneMetaData* GetUnderlying() const { return &m_scene; }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnContext* GetUnderlyingObject() const { return m_pContext; }$/;"	f	class:xn::Context	access:public	signature:() const
GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnNodeInfoList* GetUnderlyingObject() const { return m_pList; }$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnNodeQuery* GetUnderlyingObject() const { return m_pQuery; }$/;"	f	class:xn::Query	access:public	signature:() const
GetUserPixels	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUserPixels(XnUserID user, SceneMetaData& smd) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID user, SceneMetaData& smd) const
GetUserPixels	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUserPixels(XnUserID user, XnSceneMetaData *pScene) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID user, XnSceneMetaData *pScene)
GetUserPixels	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUserPixels)(XnModuleNodeHandle hGenerator, XnUserID user, XnSceneMetaData* pScene);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
GetUserPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUserPosition(XnUInt32 nIndex, XnBoundingBox3D& Position) const$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnUInt32 nIndex, XnBoundingBox3D& Position) const
GetUserPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUserPosition(XnUInt32 nIndex, XnBoundingBox3D& Position) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnUInt32 nIndex, XnBoundingBox3D& Position)
GetUserPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUserPosition)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
GetUserPositionCap	/usr/include/ni/XnCppWrapper.h	/^		inline UserPositionCapability GetUserPositionCap()$/;"	f	class:xn::DepthGenerator	access:public	signature:()
GetUserPositionCap	/usr/include/ni/XnCppWrapper.h	/^		inline const UserPositionCapability GetUserPositionCap() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
GetUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleUserPositionInterface* GetUserPositionInterface() { return NULL; }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
GetUsers	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUsers(XnUserID aUsers[], XnUInt16& nUsers) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID aUsers[], XnUInt16& nUsers) const
GetUsers	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUsers(XnUserID* pUsers, XnUInt16& nUsers) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID* pUsers, XnUInt16& nUsers)
GetUsers	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUsers)(XnModuleNodeHandle hGenerator, XnUserID* pUsers, XnUInt16* pnUsers);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
GetVendorSpecificData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetVendorSpecificData(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
GetVendorSpecificData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetVendorSpecificData(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
GetVendorSpecificData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetVendorSpecificData)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
GetVersion	/usr/include/ni/XnCppWrapper.h	/^	inline void GetVersion(XnVersion& Version)$/;"	f	namespace:xn	signature:(XnVersion& Version)
GetWaveOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetWaveOutputMode(XnWaveOutputMode& OutputMode) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnWaveOutputMode& OutputMode) const
GetWaveOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetWaveOutputMode(XnWaveOutputMode& OutputMode) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnWaveOutputMode& OutputMode)
GetWaveOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetWaveOutputMode)(XnModuleNodeHandle hGenerator, XnWaveOutputMode* OutputMode);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
GetWhiteBalanceCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetWhiteBalanceCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
GetXResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetXResolution() const { return m_nXRes; }$/;"	f	class:xn::Resolution	access:public	signature:() const
GetYResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetYResolution() const { return m_nYRes; }$/;"	f	class:xn::Resolution	access:public	signature:() const
GetYUV422ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel* GetYUV422ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
GetZoomCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetZoomCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
Grayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel* Grayscale16Data() const { return (const XnGrayscale16Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
Grayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel*& Grayscale16Data() { return (const XnGrayscale16Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
Grayscale16Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::Grayscale16Map& Grayscale16Map() const { return m_gray16Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
Grayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel* Grayscale8Data() const { return (const XnGrayscale8Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
Grayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel*& Grayscale8Data() { return (const XnGrayscale8Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
Grayscale8Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::Grayscale8Map& Grayscale8Map() const { return m_gray8Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
HandCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct HandCookie$/;"	s	class:xn::HandsGenerator	access:private
HandCookie	/usr/include/ni/XnCppWrapper.h	/^		} HandCookie;$/;"	t	class:xn::HandsGenerator	typeref:struct:xn::HandsGenerator::HandCookie	access:private
HandCreate	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandCreate)(HandsGenerator& generator, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
HandCreateCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandCreateCB(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)
HandDestroy	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandDestroy)(HandsGenerator& generator, XnUserID user, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
HandDestroyCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandDestroyCB(XnNodeHandle hNode, XnUserID user, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, XnFloat fTime, void* pCookie)
HandUpdate	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandUpdate)(HandsGenerator& generator, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
HandUpdateCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandUpdateCB(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)
HandlerPtr	/usr/include/ni/XnEvent.h	/^	typedef XnStatus (XN_CALLBACK_TYPE* HandlerPtr)(void* pCookie);$/;"	t	class:XnEventInterface	access:public
Hands	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Hands)(struct XnModuleHandsGeneratorInterface* pInterace);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
HandsGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline HandsGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
HandsGenerator	/usr/include/ni/XnCppWrapper.h	/^	class HandsGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
Hash	/usr/include/ni/XnStringsHash.h	/^	static XnHashValue Hash(const XnChar* const& key)$/;"	f	class:XnStringsKeyManager	access:public	signature:(const XnChar* const& key)
INVALID_PROFILING_HANDLE	/usr/include/ni/XnProfiling.h	/^#define INVALID_PROFILING_HANDLE	/;"	d
INiNodeAllocator	/usr/include/ni/IXnNodeAllocator.h	/^class INiNodeAllocator$/;"	c
INiNodeAllocator::Allocate	/usr/include/ni/IXnNodeAllocator.h	/^	virtual XnNode *Allocate() = 0;$/;"	p	class:INiNodeAllocator	access:public	signature:()
INiNodeAllocator::Deallocate	/usr/include/ni/IXnNodeAllocator.h	/^	virtual void Deallocate(XnNode *pNode) = 0;$/;"	p	class:INiNodeAllocator	access:public	signature:(XnNode *pNode)
INiNodeAllocator::~INiNodeAllocator	/usr/include/ni/IXnNodeAllocator.h	/^	virtual ~INiNodeAllocator() {}$/;"	f	class:INiNodeAllocator	access:public	signature:()
IR	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* IR)(struct XnModuleIRGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
IRGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline IRGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::IRGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
IRGenerator	/usr/include/ni/XnCppWrapper.h	/^	class IRGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
IRMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::IRMap& IRMap() const { return m_irMap; }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
IRMetaData	/usr/include/ni/XnCppWrapper.h	/^		IRMetaData(const IRMetaData& other);$/;"	p	class:xn::IRMetaData	access:private	signature:(const IRMetaData& other)
IRMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline IRMetaData() : $/;"	f	class:xn::IRMetaData	access:public	signature:()
IRMetaData	/usr/include/ni/XnCppWrapper.h	/^	class IRMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
Image	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Image)(struct XnModuleImageGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
ImageGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline ImageGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
ImageGenerator	/usr/include/ni/XnCppWrapper.h	/^	class ImageGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::ImageMap& ImageMap() const { return m_imageMap; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^		ImageMetaData(const ImageMetaData& other);$/;"	p	class:xn::ImageMetaData	access:private	signature:(const ImageMetaData& other)
ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline ImageMetaData() : $/;"	f	class:xn::ImageMetaData	access:public	signature:()
ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^	class ImageMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
Init	/usr/include/ni/XnArray.h	/^	void Init()$/;"	f	class:XnArray	access:private	signature:()
Init	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Init()$/;"	f	class:xn::Context	access:public	signature:()
Init	/usr/include/ni/XnHash.h	/^	XnStatus Init()$/;"	f	class:XnHash	access:protected	signature:()
Init	/usr/include/ni/XnList.h	/^	void Init(INiNodeAllocator* pNodeAllocator)$/;"	f	class:XnList	access:protected	signature:(INiNodeAllocator* pNodeAllocator)
Init	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Init(const ProductionNode& node) = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const ProductionNode& node)
Init	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Init)(XnModuleNodeHandle hCodec, XnNodeHandle hNode);$/;"	m	struct:XnModuleCodecInterface	access:public
Init	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Init()$/;"	f	class:XnQueue	access:public	signature:()
Init	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Init()$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const DepthMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const IRMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const ImageMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const SceneMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const AudioMetaData& other)$/;"	f	class:xn::AudioMetaData	access:public	signature:(const AudioMetaData& other)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const DepthMetaData& other)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const IRMetaData& other)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const ImageMetaData& other)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other)
InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const SceneMetaData& other)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other)
InitFromXmlFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFromXmlFile(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)
InitNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* InitNotifications)(XnModuleNodeHandle hInstance, XnNodeNotifications* pNotifications, void* pCookie);$/;"	m	struct:XnModuleExtendedSerializationInterface	access:public
IsCalibrated	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrated(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
IsCalibrated	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrated(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
IsCalibrated	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrated)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsCalibrating	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrating(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
IsCalibrating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrating(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
IsCalibrating	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrating)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrationData(XnUInt32 nSlot) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUInt32 nSlot) const
IsCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrationData(XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUInt32 nSlot)
IsCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrationData)(XnModuleNodeHandle hGenerator, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsCapabilitySupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCapabilitySupported(const XnChar* strCapabilityName) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strCapabilityName) const
IsCapabilitySupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCapabilitySupported(const XnChar* \/*strCapabilityName*\/) { return FALSE; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* )
IsCapabilitySupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCapabilitySupported)($/;"	m	struct:XnModuleProductionNodeInterface	access:public
IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsDataNew() const { return m_output.bIsNew; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsDataNew() const$/;"	f	class:xn::Generator	access:public	signature:() const
IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool& IsDataNew() { return m_output.bIsNew; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
IsEOF	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsEOF() const$/;"	f	class:xn::Player	access:public	signature:() const
IsEOF	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsEOF() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
IsEOF	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsEOF)$/;"	m	struct:XnModulePlayerInterface	access:public
IsEmpty	/usr/include/ni/XnArray.h	/^	XnBool IsEmpty() const$/;"	f	class:XnArray	access:public	signature:() const
IsEmpty	/usr/include/ni/XnBitSet.h	/^	XnBool IsEmpty() const$/;"	f	class:XnBitSet	access:public	signature:() const
IsEmpty	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsEmpty()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
IsEmpty	/usr/include/ni/XnHash.h	/^	XnBool IsEmpty() const$/;"	f	class:XnHash	access:public	signature:() const
IsEmpty	/usr/include/ni/XnList.h	/^	XnBool IsEmpty() const$/;"	f	class:XnList	access:public	signature:() const
IsEmpty	/usr/include/ni/XnQueue.h	/^	XnBool IsEmpty() const$/;"	f	class:XnQueue	access:public	signature:() const
IsEmpty	/usr/include/ni/XnStack.h	/^	XnBool IsEmpty() const$/;"	f	class:XnStack	access:public	signature:() const
IsFrameSyncedWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsFrameSyncedWith(Generator& other) const;$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other) const
IsFrameSyncedWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnBool FrameSyncCapability::IsFrameSyncedWith(Generator& other) const$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other) const
IsFrameSyncedWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsFrameSyncedWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
IsFrameSyncedWith	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsFrameSyncedWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
IsGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGenerating() const$/;"	f	class:xn::Generator	access:public	signature:() const
IsGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
IsGenerating	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
IsGestureAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGestureAvailable(const XnChar* strGesture) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture) const
IsGestureAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGestureAvailable(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
IsGestureAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGestureAvailable)(XnModuleNodeHandle hInstance, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
IsGestureProgressSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGestureProgressSupported(const XnChar* strGesture) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture) const
IsGestureProgressSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGestureProgressSupported(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
IsGestureProgressSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGestureProgressSupported)(XnModuleNodeHandle hGenerator, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
IsJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointActive(XnSkeletonJoint eJoint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint) const
IsJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointActive(XnSkeletonJoint eJoint, XnBool \/*bState*\/) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint, XnBool ) const
IsJointActive	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsJointActive(XnSkeletonJoint eJoint) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint)
IsJointActive	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsJointActive)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsJointAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointAvailable(XnSkeletonJoint eJoint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint) const
IsJointAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsJointAvailable(XnSkeletonJoint eJoint) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint)
IsJointAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsJointAvailable)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsMirrored	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsMirrored() const$/;"	f	class:xn::MirrorCapability	access:public	signature:() const
IsMirrored	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsMirrored() = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:()
IsMirrored	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsMirrored)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleMirrorInterface	access:public
IsNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsNewDataAvailable(XnUInt64* pnTimestamp = NULL) const$/;"	f	class:xn::Generator	access:public	signature:(XnUInt64* pnTimestamp = NULL) const
IsNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsNewDataAvailable(XnUInt64& nTimestamp) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnUInt64& nTimestamp)
IsNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
IsPixelFormatSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsPixelFormatSupported(XnPixelFormat Format) const$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnPixelFormat Format) const
IsPixelFormatSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsPixelFormatSupported(XnPixelFormat Format) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnPixelFormat Format)
IsPixelFormatSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsPixelFormatSupported)(XnModuleNodeHandle hGenerator, XnPixelFormat Format);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
IsProfileAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsProfileAvailable(XnSkeletonProfile eProfile) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonProfile eProfile) const
IsProfileAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsProfileAvailable(XnSkeletonProfile eProfile) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonProfile eProfile)
IsProfileAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsProfileAvailable)(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsSet	/usr/include/ni/XnBitSet.h	/^	XnBool IsSet(XnUInt32 nIndex) const$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nIndex) const
IsTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsTracking(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
IsTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
IsTracking	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
IsValid	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsValid() const { return (m_hNode != NULL); }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
IsViewPointAs	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsViewPointAs(ProductionNode& otherNode) const$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode) const
IsViewPointAs	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsViewPointAs(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
IsViewPointAs	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsViewPointAs)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
IsViewPointSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsViewPointSupported(ProductionNode& otherNode) const$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode) const
IsViewPointSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsViewPointSupported(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
IsViewPointSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsViewPointSupported)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
Iterator	/usr/include/ni/XnArray.h	/^	typedef T* Iterator;$/;"	t	class:XnArray	access:public
Iterator	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator(XnEnumerationErrorsIterator it) : m_it(it) {}$/;"	f	class:xn::EnumerationErrors::Iterator	access:private	signature:(XnEnumerationErrorsIterator it)
Iterator	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator(XnNodeInfoListIterator it) : m_Info(NULL)$/;"	f	class:xn::NodeInfoList::Iterator	access:private	signature:(XnNodeInfoListIterator it)
Iterator	/usr/include/ni/XnCppWrapper.h	/^		class Iterator$/;"	c	class:xn::EnumerationErrors	access:public
Iterator	/usr/include/ni/XnCppWrapper.h	/^		class Iterator$/;"	c	class:xn::NodeInfoList	access:public
Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const ConstIterator& other) : ConstIterator(other) {}$/;"	f	class:XnHash::Iterator	access:protected	signature:(const ConstIterator& other)
Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const XnHash* pHash) : ConstIterator(pHash) {}$/;"	f	class:XnHash::Iterator	access:protected	signature:(const XnHash* pHash)
Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator) :$/;"	f	class:XnHash::Iterator	access:protected	signature:(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator)
Iterator	/usr/include/ni/XnHash.h	/^		inline Iterator(const Iterator& other) : ConstIterator(other) {}$/;"	f	class:XnHash::Iterator	access:public	signature:(const Iterator& other)
Iterator	/usr/include/ni/XnHash.h	/^	class Iterator : public ConstIterator$/;"	c	class:XnHash	inherits:ConstIterator	access:public
Iterator	/usr/include/ni/XnList.h	/^		inline Iterator(XnNode* pNode) : ConstIterator(pNode) {}$/;"	f	class:XnList::Iterator	access:protected	signature:(XnNode* pNode)
Iterator	/usr/include/ni/XnList.h	/^		inline Iterator(const Iterator& other) : ConstIterator(other) {}$/;"	f	class:XnList::Iterator	access:public	signature:(const Iterator& other)
Iterator	/usr/include/ni/XnList.h	/^	class Iterator : public ConstIterator$/;"	c	class:XnList	inherits:ConstIterator	access:public
Key	/usr/include/ni/XnHash.h	/^		XnKey& Key() const { return (XnKey&)ConstIterator::Key(); }$/;"	f	class:XnHash::Iterator	access:public	signature:() const
Key	/usr/include/ni/XnHash.h	/^		const XnKey& Key() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
LabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::LabelMap& LabelMap() const { return m_labelMap; }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
LeftBottomNear	/usr/include/ni/XnTypes.h	/^	XnPoint3D LeftBottomNear;$/;"	m	struct:XnBoundingBox3D	access:public
Load	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Load() { return XN_STATUS_OK; }$/;"	f	class:xn::Module	access:public	signature:()
Load	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Load()$/;"	f	class:xn::ExtensionModule	access:public	signature:()
LoadCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LoadCalibrationData(XnUserID user, XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnUInt32 nSlot)
LoadCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus LoadCalibrationData(XnUserID user, XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnUInt32 nSlot)
LoadCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* LoadCalibrationData)(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
LoadCalibrationDataFromFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LoadCalibrationDataFromFile(XnUserID user, const XnChar* strFileName)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, const XnChar* strFileName)
LoadCalibrationDataFromFile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus LoadCalibrationDataFromFile(XnUserID user, const XnChar* strFileName) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, const XnChar* strFileName)
LoadCalibrationDataFromFile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* LoadCalibrationDataFromFile)(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Lock	/usr/include/ni/XnOSCpp.h	/^	inline void Lock()$/;"	f	class:XnAutoCSLocker	access:private	signature:()
LockForChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LockForChanges(XnLockHandle* phLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle* phLock)
LockedNodeEndChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void LockedNodeEndChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
LockedNodeStartChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LockedNodeStartChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
LostUserCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE LostUserCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::UserGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
MakeDataWritable	/usr/include/ni/XnCppWrapper.h	/^		XnStatus MakeDataWritable()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
MapGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MapGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::MapGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MapGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MapGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
MapGenerator	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* MapGenerator)(struct XnModuleMapGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
MapMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline MapMetaData(XnPixelFormat format, const XnUInt8** ppData) : OutputMetaData(ppData)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnPixelFormat format, const XnUInt8** ppData)
MapMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline MapMetaData(const MapMetaData& other);$/;"	p	class:xn::MapMetaData	access:private	signature:(const MapMetaData& other)
MapMetaData	/usr/include/ni/XnCppWrapper.h	/^	class MapMetaData : public OutputMetaData$/;"	c	namespace:xn	inherits:OutputMetaData
MirrorCapability	/usr/include/ni/XnCppWrapper.h	/^		inline MirrorCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnNodeHandle hNode)
MirrorCapability	/usr/include/ni/XnCppWrapper.h	/^	class MirrorCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
MockAudioGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockAudioGenerator(XnNodeHandle hNode = NULL) : AudioGenerator(hNode) {}$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MockAudioGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockAudioGenerator : public AudioGenerator$/;"	c	namespace:xn	inherits:AudioGenerator
MockDepthGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockDepthGenerator(XnNodeHandle hNode = NULL) : DepthGenerator(hNode) {}$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MockDepthGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockDepthGenerator : public DepthGenerator$/;"	c	namespace:xn	inherits:DepthGenerator
MockIRGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockIRGenerator(XnNodeHandle hNode = NULL) : IRGenerator(hNode) {}$/;"	f	class:xn::MockIRGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MockIRGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockIRGenerator : public IRGenerator$/;"	c	namespace:xn	inherits:IRGenerator
MockImageGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockImageGenerator(XnNodeHandle hNode = NULL) : ImageGenerator(hNode) {}$/;"	f	class:xn::MockImageGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MockImageGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockImageGenerator : public ImageGenerator$/;"	c	namespace:xn	inherits:ImageGenerator
MockRawGenerator	/usr/include/ni/XnCppWrapper.h	/^		MockRawGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::MockRawGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
MockRawGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockRawGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
Module	/usr/include/ni/XnModuleCppInterface.h	/^		Module() {}$/;"	f	class:xn::Module	access:public	signature:()
Module	/usr/include/ni/XnModuleCppInterface.h	/^	class Module$/;"	c	namespace:xn
ModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAlternativeViewPointInterface$/;"	c	namespace:xn
ModuleAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAntiFlickerInterface$/;"	c	namespace:xn
ModuleAudioGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAudioGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
ModuleCodec	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleCodec : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
ModuleCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleCroppingInterface$/;"	c	namespace:xn
ModuleDepthGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDepthGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
ModuleDevice	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDevice : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
ModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDeviceIdentificationInterface$/;"	c	namespace:xn
ModuleErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleErrorStateInterface$/;"	c	namespace:xn
ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		ModuleExportedProductionNode() {}$/;"	f	class:xn::ModuleExportedProductionNode	access:public	signature:()
ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleExportedProductionNode$/;"	c	namespace:xn
ModuleExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleExtendedSerializationInterface$/;"	c	namespace:xn
ModuleFrameSyncInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleFrameSyncInterface$/;"	c	namespace:xn
ModuleGeneralIntInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGeneralIntInterface$/;"	c	namespace:xn
ModuleGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGenerator : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
ModuleGestureGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGestureGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
ModuleHandsGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleHandsGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
ModuleIRGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleIRGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
ModuleImageGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleImageGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
ModuleLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleLockAwareInterface$/;"	c	namespace:xn
ModuleMapGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleMapGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
ModuleMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleMirrorInterface$/;"	c	namespace:xn
ModuleNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleNodeNotifications$/;"	c	namespace:xn
ModulePlayer	/usr/include/ni/XnModuleCppInterface.h	/^	class ModulePlayer : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
ModulePoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModulePoseDetectionInteface$/;"	c	namespace:xn
ModuleProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleProductionNode$/;"	c	namespace:xn
ModuleRecorder	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleRecorder : $/;"	c	namespace:xn	inherits:ModuleProductionNode,ModuleNodeNotifications
ModuleSceneAnalyzer	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleSceneAnalyzer : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
ModuleSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleSkeletonInterface$/;"	c	namespace:xn
ModuleUserGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleUserGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
ModuleUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleUserPositionInterface$/;"	c	namespace:xn
NamedSem	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	int NamedSem;$/;"	m	struct:__anon1	access:public
NeedPoseForCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool NeedPoseForCalibration() const$/;"	f	class:xn::SkeletonCapability	access:public	signature:() const
NeedPoseForCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool NeedPoseForCalibration() = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:()
NeedPoseForCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* NeedPoseForCalibration)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
NewUserCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE NewUserCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::UserGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
Next	/usr/include/ni/XnNode.h	/^	XnNode*& Next() {return (XnNode*&)m_pNext;}$/;"	f	class:XnNode	access:public	signature:()
Next	/usr/include/ni/XnNode.h	/^	const XnNode* const Next() const {return (const XnNode*)m_pNext;}$/;"	f	class:XnNode	access:public	signature:() const
NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		NodeInfo(XnNodeInfo* pInfo) : m_pNeededNodes(NULL)$/;"	f	class:xn::NodeInfo	access:public	signature:(XnNodeInfo* pInfo)
NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		NodeInfo(const NodeInfo& other) : m_pNeededNodes(NULL)$/;"	f	class:xn::NodeInfo	access:public	signature:(const NodeInfo& other)
NodeInfo	/usr/include/ni/XnCppWrapper.h	/^	class NodeInfo$/;"	c	namespace:xn
NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList() $/;"	f	class:xn::NodeInfoList	access:public	signature:()
NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList(XnNodeInfoList* pList) : m_pList(pList), m_bAllocated(FALSE) {}$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnNodeInfoList* pList)
NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^	class NodeInfoList$/;"	c	namespace:xn
NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^		inline NodeWrapper(XnNodeHandle hNode) : m_hNode(NULL)$/;"	f	class:xn::NodeWrapper	access:public	signature:(XnNodeHandle hNode)
NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^	class NodeWrapper$/;"	c	namespace:xn
NotifyExState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus NotifyExState(XnNodeNotifications* pNotifications, void* pCookie) = 0;$/;"	p	class:xn::ModuleExtendedSerializationInterface	access:public	signature:(XnNodeNotifications* pNotifications, void* pCookie)
NumberOfChannels	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8 NumberOfChannels() const { return m_audio.Wave.nChannels; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
NumberOfChannels	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8& NumberOfChannels() { return m_audio.Wave.nChannels; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
Offset	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair Offset;$/;"	m	struct:XnMapMetaData	access:public
OnNodeAdded	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeAdded(const XnChar* strNodeName, XnProductionNodeType type, XnCodecID compression) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, XnProductionNodeType type, XnCodecID compression)
OnNodeAdded	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeAdded)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeGeneralPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeGeneralPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer)
OnNodeGeneralPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeGeneralPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeIntPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeIntPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnUInt64 nValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnUInt64 nValue)
OnNodeIntPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeIntPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeNewData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeNewData(const XnChar* strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void* pData, XnUInt32 nSize) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void* pData, XnUInt32 nSize)
OnNodeNewData	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeNewData)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeRealPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeRealPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnDouble dValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnDouble dValue)
OnNodeRealPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeRealPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeRemoved	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeRemoved(const XnChar* strNodeName) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName)
OnNodeRemoved	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeRemoved)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeStateReady	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeStateReady(const XnChar* strNodeName) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName)
OnNodeStateReady	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeStateReady)$/;"	m	struct:XnNodeNotifications	access:public
OnNodeStringPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeStringPropChanged(const XnChar* strNodeName, const XnChar* strPropName, const XnChar* strValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, const XnChar* strValue)
OnNodeStringPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeStringPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
Open	/usr/include/ni/XnOSCpp.h	/^	XnStatus Open(const XnChar* strName)$/;"	f	class:XnOSEvent	access:public	signature:(const XnChar* strName)
Open	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Open)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
Open	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Open)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
OpenFileRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus OpenFileRecording(const XnChar* strFileName)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName)
OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline OutputMetaData(const XnUInt8** ppData) : m_ppData(ppData), m_nAllocatedSize(0), m_pAllocatedData(NULL)$/;"	f	class:xn::OutputMetaData	access:public	signature:(const XnUInt8** ppData)
OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^	class OutputMetaData$/;"	c	namespace:xn
PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat PixelFormat() const { return MapMetaData::PixelFormat(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat PixelFormat() const { return m_map.PixelFormat; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat& PixelFormat() { return MapMetaData::PixelFormatImpl(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
PixelFormat	/usr/include/ni/XnTypes.h	/^	XnPixelFormat PixelFormat;$/;"	m	struct:XnMapMetaData	access:public
PixelFormatImpl	/usr/include/ni/XnCppWrapper.h	/^		XnPixelFormat& PixelFormatImpl() { return m_map.PixelFormat; }$/;"	f	class:xn::MapMetaData	access:protected	signature:()
Player	/usr/include/ni/XnCppWrapper.h	/^		inline Player(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Player	access:public	signature:(XnNodeHandle hNode = NULL)
Player	/usr/include/ni/XnCppWrapper.h	/^	class Player : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
Player	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Player)(struct XnModulePlayerInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
Pop	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Pop(XnValue& value)$/;"	f	class:XnQueue	access:public	signature:(XnValue& value)
Pop	/usr/include/ni/XnStack.h	/^	XnStatus Pop(XnValue& value)$/;"	f	class:XnStack	access:public	signature:(XnValue& value)
Pop	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Pop(XnValue& value)$/;"	f	class:XnThreadSafeQueue	access:public	signature:(XnValue& value)
PoseCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct PoseCookie$/;"	s	class:xn::PoseDetectionCapability	access:private
PoseCookie	/usr/include/ni/XnCppWrapper.h	/^		} PoseCookie;$/;"	t	class:xn::PoseDetectionCapability	typeref:struct:xn::PoseDetectionCapability::PoseCookie	access:private
PoseDetection	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* PoseDetection)(PoseDetectionCapability& pose, const XnChar* strPose, XnUserID user, void* pCookie);$/;"	t	class:xn::PoseDetectionCapability	access:public
PoseDetectionCapability	/usr/include/ni/XnCppWrapper.h	/^		inline PoseDetectionCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnNodeHandle hNode)
PoseDetectionCapability	/usr/include/ni/XnCppWrapper.h	/^	class PoseDetectionCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
PoseDetectionStartCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE PoseDetectionStartCallback(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)$/;"	f	class:xn::PoseDetectionCapability	access:private	signature:(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)
PoseDetectionStartEndCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE PoseDetectionStartEndCallback(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)$/;"	f	class:xn::PoseDetectionCapability	access:private	signature:(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)
Previous	/usr/include/ni/XnNode.h	/^	XnNode*& Previous() {return (XnNode*&)m_pPrevious;}$/;"	f	class:XnNode	access:public	signature:()
Previous	/usr/include/ni/XnNode.h	/^	const XnNode* const Previous() const {return (const XnNode*)m_pPrevious;}$/;"	f	class:XnNode	access:public	signature:() const
ProductionNode	/usr/include/ni/XnCppWrapper.h	/^		inline ProductionNode(XnNodeHandle hNode = NULL) : NodeWrapper(hNode) {}$/;"	f	class:xn::ProductionNode	access:public	signature:(XnNodeHandle hNode = NULL)
ProductionNode	/usr/include/ni/XnCppWrapper.h	/^	class ProductionNode : public NodeWrapper$/;"	c	namespace:xn	inherits:NodeWrapper
ProductionNode	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* ProductionNode)(struct XnModuleProductionNodeInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
Push	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Push(XnValue const& value)$/;"	f	class:XnQueue	access:public	signature:(XnValue const& value)
Push	/usr/include/ni/XnStack.h	/^	XnStatus Push(XnValue const& value)$/;"	f	class:XnStack	access:public	signature:(XnValue const& value)
Push	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Push(XnValue const& value)$/;"	f	class:XnThreadSafeQueue	access:public	signature:(XnValue const& value)
Query	/usr/include/ni/XnCppWrapper.h	/^		inline Query()$/;"	f	class:xn::Query	access:public	signature:()
Query	/usr/include/ni/XnCppWrapper.h	/^	class Query$/;"	c	namespace:xn
RBegin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator RBegin() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
REnd	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator REnd() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
RGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel* RGB24Data() const { return (const XnRGB24Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
RGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel*& RGB24Data() { return (const XnRGB24Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
RGB24Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::RGB24Map& RGB24Map() const { return m_rgb24Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer = NULL)$/;"	f	class:xn::ImageMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer = NULL)
ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer = NULL)$/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer = NULL)
ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer = NULL)$/;"	f	class:xn::IRMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer = NULL)
ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer = NULL)$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer = NULL)
ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnUInt8* pExternalBuffer)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnUInt8* pExternalBuffer)
Read	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Read)(void* pCookie, void* pBuffer, XnUInt32 nSize, XnUInt32* pnBytesRead);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
ReadNext	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ReadNext()$/;"	f	class:xn::Player	access:public	signature:()
ReadNext	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ReadNext() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
ReadNext	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ReadNext)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModulePlayerInterface	access:public
Record	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Record()$/;"	f	class:xn::Recorder	access:public	signature:()
Recorder	/usr/include/ni/XnCppWrapper.h	/^		inline Recorder(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Recorder	access:public	signature:(XnNodeHandle hNode = NULL)
Recorder	/usr/include/ni/XnCppWrapper.h	/^	class Recorder : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
Recorder	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Recorder)(struct XnModuleRecorderInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
Ref	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus XN_API_DEPRECATED("Please use AddRef() instead.") Ref() { return AddRef(); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
Register	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Register(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)
Register	/usr/include/ni/XnEvent.h	/^	XnStatus Register(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle)$/;"	f	class:XnEvent	access:public	signature:(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle)
Register	/usr/include/ni/XnEvent.h	/^	virtual XnStatus Register(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle = NULL) = 0;$/;"	p	class:XnEventInterface	access:public	signature:(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle = NULL)
RegisterCalibrationCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterCalibrationCallbacks(CalibrationStart CalibrationStartCB, CalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(CalibrationStart CalibrationStartCB, CalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterCalibrationCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterCalibrationCallbacks(XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterCalibrationCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterCalibrationCallbacks)(XnModuleNodeHandle hGenerator, XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
RegisterGestureCallbacks	/usr/include/ni/XnCppWrapper.h	/^		XnStatus RegisterGestureCallbacks(GestureRecognized RecognizedCB, GestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(GestureRecognized RecognizedCB, GestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterGestureCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterGestureCallbacks(XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterGestureCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterGestureCallbacks)(XnModuleNodeHandle hGenerator, XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
RegisterHandCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterHandCallbacks(HandCreate CreateCB, HandUpdate UpdateCB, HandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::HandsGenerator	access:public	signature:(HandCreate CreateCB, HandUpdate UpdateCB, HandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterHandCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterHandCallbacks(XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterHandCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterHandCallbacks)(XnModuleNodeHandle hGenerator, XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
RegisterNewTypes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterNewTypes() = 0;$/;"	p	class:xn::ExtensionModule	access:protected	signature:()
RegisterToCroppingChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToCroppingChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::CroppingCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToCroppingChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToCroppingChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToCroppingChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToCroppingChange)$/;"	m	struct:XnModuleCroppingInterface	access:public
RegisterToEndOfFileReached	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToEndOfFileReached(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::Player	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToEndOfFileReached	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToEndOfFileReached(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToEndOfFileReached	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToEndOfFileReached)$/;"	m	struct:XnModulePlayerInterface	access:public
RegisterToErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToErrorStateChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToErrorStateChange(XnErrorStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::Context	access:public	signature:(XnErrorStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToErrorStateChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToErrorStateChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToErrorStateChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToErrorStateChange)$/;"	m	struct:XnModuleErrorStateInterface	access:public
RegisterToFieldOfViewChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToFieldOfViewChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::DepthGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToFieldOfViewChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToFieldOfViewChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToFieldOfViewChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToFieldOfViewChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
RegisterToFrameSyncChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToFrameSyncChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToFrameSyncChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToFrameSyncChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToFrameSyncChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToFrameSyncChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
RegisterToGenerationRunningChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToGenerationRunningChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)$/;"	f	class:xn::Generator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)
RegisterToGenerationRunningChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToGenerationRunningChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToGenerationRunningChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToGenerationRunningChange)$/;"	m	struct:XnModuleGeneratorInterface	access:public
RegisterToGestureChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToGestureChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToGestureChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToGestureChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToGestureChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToGestureChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
RegisterToJointConfigurationChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToJointConfigurationChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToJointConfigurationChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToJointConfigurationChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToJointConfigurationChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToJointConfigurationChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
RegisterToLockChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToLockChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToLockChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToLockChange)$/;"	m	struct:XnModuleLockAwareInterface	access:public
RegisterToMapOutputModeChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToMapOutputModeChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::MapGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToMapOutputModeChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToMapOutputModeChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToMapOutputModeChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToMapOutputModeChange)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
RegisterToMirrorChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToMirrorChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::MirrorCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToMirrorChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToMirrorChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToMirrorChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToMirrorChange)$/;"	m	struct:XnModuleMirrorInterface	access:public
RegisterToNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToNewDataAvailable(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)$/;"	f	class:xn::Generator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)
RegisterToNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToNewDataAvailable(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
RegisterToPixelFormatChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPixelFormatChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::ImageGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPixelFormatChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPixelFormatChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPixelFormatChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPixelFormatChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
RegisterToPoseCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPoseCallbacks(PoseDetection PoseStartCB, PoseDetection PoseEndCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(PoseDetection PoseStartCB, PoseDetection PoseEndCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPoseCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPoseCallbacks)(XnModuleNodeHandle hGenerator, XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
RegisterToPoseDetectionCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPoseDetectionCallbacks(XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndPoseCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndPoseCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPowerLineFrequencyChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPowerLineFrequencyChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPowerLineFrequencyChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPowerLineFrequencyChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToPowerLineFrequencyChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPowerLineFrequencyChange)$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
RegisterToUnderlying	/usr/include/ni/XnCppWrapper.h	/^		static XnStatus RegisterToUnderlying(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToUserPositionChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToUserPositionChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToUserPositionChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToUserPositionChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToUserPositionChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToUserPositionChange)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
RegisterToValueChange	/usr/include/ni/XnCppWrapper.h	/^		XnStatus RegisterToValueChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback);$/;"	p	class:xn::GeneralIntCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToValueChange	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus GeneralIntCapability::RegisterToValueChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GeneralIntCapability	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToValueChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToValueChange(const XnChar* strCap, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToValueChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToValueChange)$/;"	m	struct:XnModuleGeneralIntInterface	access:public
RegisterToViewPointChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToViewPointChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToViewPointChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToViewPointChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToViewPointChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToViewPointChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
RegisterToWaveOutputModeChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToWaveOutputModeChanges(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AudioGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToWaveOutputModeChanges	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToWaveOutputModeChanges(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
RegisterToWaveOutputModeChanges	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToWaveOutputModeChanges)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
RegisterUserCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterUserCallbacks(UserHandler NewUserCB, UserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::UserGenerator	access:public	signature:(UserHandler NewUserCB, UserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterUserCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterUserCallbacks(XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)
RegisterUserCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterUserCallbacks)(XnModuleNodeHandle hGenerator, XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
Release	/usr/include/ni/XnCppWrapper.h	/^		inline void Release() $/;"	f	class:xn::NodeWrapper	access:public	signature:()
Remove	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Remove(Iterator& it)$/;"	f	class:xn::NodeInfoList	access:public	signature:(Iterator& it)
Remove	/usr/include/ni/XnHash.h	/^	XnStatus Remove(ConstIterator iter, XnKey& key, XnValue& value)$/;"	f	class:XnHash	access:public	signature:(ConstIterator iter, XnKey& key, XnValue& value)
Remove	/usr/include/ni/XnHash.h	/^	XnStatus Remove(const XnKey& key, XnValue& value)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, XnValue& value)
Remove	/usr/include/ni/XnHash.h	/^	virtual XnStatus Remove(ConstIterator iter)$/;"	f	class:XnHash	access:public	signature:(ConstIterator iter)
Remove	/usr/include/ni/XnList.h	/^	XnStatus Remove(ConstIterator where, XnValue& value)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, XnValue& value)
Remove	/usr/include/ni/XnList.h	/^	virtual XnStatus Remove(ConstIterator where)$/;"	f	class:XnList	access:public	signature:(ConstIterator where)
RemoveGesture	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveGesture(const XnChar* strGesture)$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture)
RemoveGesture	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RemoveGesture(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
RemoveGesture	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RemoveGesture)(XnModuleNodeHandle hGenerator, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
RemoveNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveNeededNode(ProductionNode& needed)$/;"	f	class:xn::ProductionNode	access:public	signature:(ProductionNode& needed)
RemoveNodeFromRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveNodeFromRecording(ProductionNode& Node)$/;"	f	class:xn::Recorder	access:public	signature:(ProductionNode& Node)
ReplaceUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline void ReplaceUnderlyingObject(XnNodeInfoList* pList) $/;"	f	class:xn::NodeInfoList	access:public	signature:(XnNodeInfoList* pList)
RequestCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RequestCalibration(XnUserID user, XnBool bForce)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnBool bForce)
RequestCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RequestCalibration(XnUserID user, XnBool bForce) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnBool bForce)
RequestCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RequestCalibration)(XnModuleNodeHandle hGenerator, XnUserID user, XnBool bForce);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Res	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair Res;$/;"	m	struct:XnMapMetaData	access:public
Reserve	/usr/include/ni/XnArray.h	/^	XnStatus Reserve(XnUInt32 nReservedSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nReservedSize)
Reserve	/usr/include/ni/XnBitSet.h	/^	XnStatus Reserve(XnUInt32 nBits)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nBits)
Reset	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Reset(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
Reset	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Reset(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
Reset	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Reset)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Reset	/usr/include/ni/XnOSCpp.h	/^	XnStatus Reset()$/;"	f	class:XnOSEvent	access:public	signature:()
ResetViewPoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ResetViewPoint()$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:()
ResetViewPoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ResetViewPoint() = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:()
ResetViewPoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ResetViewPoint)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(XnResolution res) : m_Res(res)$/;"	f	class:xn::Resolution	access:public	signature:(XnResolution res)
Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(XnUInt32 xRes, XnUInt32 yRes) : m_nXRes(xRes), m_nYRes(yRes)$/;"	f	class:xn::Resolution	access:public	signature:(XnUInt32 xRes, XnUInt32 yRes)
Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(const XnChar* strName)$/;"	f	class:xn::Resolution	access:public	signature:(const XnChar* strName)
Resolution	/usr/include/ni/XnCppWrapper.h	/^	class Resolution$/;"	c	namespace:xn
RightTopFar	/usr/include/ni/XnTypes.h	/^	XnPoint3D RightTopFar;$/;"	m	struct:XnBoundingBox3D	access:public
RunXmlScript	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RunXmlScript(const XnChar* strScript, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strScript, EnumerationErrors* pErrors = NULL)
RunXmlScriptFromFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RunXmlScriptFromFile(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)
SampleRate	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 SampleRate() const { return m_audio.Wave.nSampleRate; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
SampleRate	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& SampleRate() { return m_audio.Wave.nSampleRate; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
SaveCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SaveCalibrationData(XnUserID user, XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnUInt32 nSlot)
SaveCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SaveCalibrationData(XnUserID user, XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnUInt32 nSlot)
SaveCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SaveCalibrationData)(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
SaveCalibrationDataToFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SaveCalibrationDataToFile(XnUserID user, const XnChar* strFileName)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, const XnChar* strFileName)
SaveCalibrationDataToFile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SaveCalibrationDataToFile(XnUserID user, const XnChar* strFileName) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, const XnChar* strFileName)
SaveCalibrationDataToFile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SaveCalibrationDataToFile)(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
Scene	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Scene)(struct XnModuleSceneAnalyzerInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
SceneAnalyzer	/usr/include/ni/XnCppWrapper.h	/^		inline SceneAnalyzer(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(XnNodeHandle hNode = NULL)
SceneAnalyzer	/usr/include/ni/XnCppWrapper.h	/^	class SceneAnalyzer : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^		SceneMetaData(const SceneMetaData& other);$/;"	p	class:xn::SceneMetaData	access:private	signature:(const SceneMetaData& other)
SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline SceneMetaData() : $/;"	f	class:xn::SceneMetaData	access:public	signature:()
SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^	class SceneMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
Seek	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Seek)(void* pCookie, XnOSSeekType seekType, const XnInt32 nOffset);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
Seek	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Seek)(void* pCookie, XnOSSeekType seekType, const XnUInt32 nOffset);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
SeekToFrame	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SeekToFrame(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
SeekToFrame	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SeekToFrame(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
SeekToFrame	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SeekToFrame)$/;"	m	struct:XnModulePlayerInterface	access:public
SeekToTimeStamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SeekToTimeStamp(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)$/;"	f	class:xn::Player	access:public	signature:(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
SeekToTimeStamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SeekToTimeStamp(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
SeekToTimeStamp	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SeekToTimeStamp)$/;"	m	struct:XnModulePlayerInterface	access:public
Set	/usr/include/ni/XnArray.h	/^	XnStatus Set(XnUInt32 nIndex, const T& val)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex, const T& val)
Set	/usr/include/ni/XnArray.h	/^	XnStatus Set(XnUInt32 nIndex, const T& val, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex, const T& val, const T& fillVal)
Set	/usr/include/ni/XnBitSet.h	/^	XnStatus Set(XnUInt32 nIndex, XnBool bValue)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nIndex, XnBool bValue)
Set	/usr/include/ni/XnCallback.h	/^	void Set(XnFuncPtr pFuncPtr, void* pCookie) { this->pFuncPtr = pFuncPtr; this->pCookie = pCookie; }$/;"	f	struct:XnCallback	access:public	signature:(XnFuncPtr pFuncPtr, void* pCookie)
Set	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Set(XnInt32 nValue)$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnInt32 nValue)
Set	/usr/include/ni/XnHash.h	/^	XnStatus Set(const XnKey& key, const XnValue& value)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, const XnValue& value)
Set	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnInt32 Set(const XnChar* strCap, XnInt32 nValue) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32 nValue)
Set	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Set)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32 nValue);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
Set	/usr/include/ni/XnOSCpp.h	/^	XnStatus Set()$/;"	f	class:XnOSEvent	access:public	signature:()
SetCompareFunction	/usr/include/ni/XnHash.h	/^	XnStatus SetCompareFunction(XnCompareFunction compareFunction)$/;"	f	class:XnHash	access:public	signature:(XnCompareFunction compareFunction)
SetCreationInfo	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetCreationInfo(const XnChar* strCreationInfo)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strCreationInfo)
SetCropping	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetCropping(const XnCropping& Cropping)$/;"	f	class:xn::CroppingCapability	access:public	signature:(const XnCropping& Cropping)
SetCropping	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetCropping(const XnCropping &Cropping) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(const XnCropping &Cropping)
SetCropping	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetCropping)(XnModuleNodeHandle hGenerator, const XnCropping* pCropping);$/;"	m	struct:XnModuleCroppingInterface	access:public
SetData	/usr/include/ni/XnArray.h	/^	XnStatus SetData(const T* pData, XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(const T* pData, XnUInt32 nSize)
SetData	/usr/include/ni/XnBitSet.h	/^	XnStatus SetData(const XnUInt32* pData, XnUInt32 nSizeInDwords)$/;"	f	class:XnBitSet	access:public	signature:(const XnUInt32* pData, XnUInt32 nSizeInDwords)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pDepthMap)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pDepthMap)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pIRMap)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pIRMap)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pAudioBuffer)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pAudioBuffer)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pImageMap)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pImageMap)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData)$/;"	f	class:xn::MockRawGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const AudioMetaData& audioMD)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(const AudioMetaData& audioMD)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const AudioMetaData& audioMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(const AudioMetaData& audioMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const DepthMetaData& depthMD)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(const DepthMetaData& depthMD)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const DepthMetaData& depthMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(const DepthMetaData& depthMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const IRMetaData& irMD)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(const IRMetaData& irMD)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const IRMetaData& irMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(const IRMetaData& irMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const ImageMetaData& imageMD)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(const ImageMetaData& imageMD)
SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const ImageMetaData& imageMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(const ImageMetaData& imageMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
SetDestination	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetDestination(XnRecordMedium destType, const XnChar* strDest)$/;"	f	class:xn::Recorder	access:public	signature:(XnRecordMedium destType, const XnChar* strDest)
SetExistingNodeOnly	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetExistingNodeOnly(XnBool bExistingNode)$/;"	f	class:xn::Query	access:public	signature:(XnBool bExistingNode)
SetGeneralProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetGeneralProperty(const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)
SetGeneralProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetGeneralProperty(const XnChar* \/*strName*\/, XnUInt32 \/*nBufferSize*\/, const void* \/*pBuffer*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt32 , const void* )
SetGeneralProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetGeneralProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
SetGlobalMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetGlobalMirror(XnBool bMirror)$/;"	f	class:xn::Context	access:public	signature:(XnBool bMirror)
SetHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetHandle(XnContext* pContext)$/;"	f	class:xn::Context	access:public	signature:(XnContext* pContext)
SetHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetHandle(XnNodeHandle hNode) { m_hNode = hNode; }$/;"	f	class:xn::NodeWrapper	access:public	signature:(XnNodeHandle hNode)
SetHashFunction	/usr/include/ni/XnHash.h	/^	XnStatus SetHashFunction(XnHashFunction hashFunction)$/;"	f	class:XnHash	access:public	signature:(XnHashFunction hashFunction)
SetInputStream	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetInputStream(void* pStreamCookie, XnPlayerInputStreamInterface* pStream) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(void* pStreamCookie, XnPlayerInputStreamInterface* pStream)
SetInputStream	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetInputStream)$/;"	m	struct:XnModulePlayerInterface	access:public
SetInstanceName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetInstanceName(const XnChar* strName)$/;"	f	class:xn::NodeInfo	access:public	signature:(const XnChar* strName)
SetIntProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetIntProperty(const XnChar* strName, XnUInt64 nValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt64 nValue)
SetIntProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetIntProperty(const XnChar* \/*strName*\/, XnUInt64 \/*nValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt64 )
SetIntProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetIntProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
SetJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetJointActive(XnSkeletonJoint eJoint, XnBool bState)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint, XnBool bState)
SetJointActive	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetJointActive(XnSkeletonJoint eJoint, XnBool bState) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint, XnBool bState)
SetJointActive	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetJointActive)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint, XnBool bState);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
SetLockState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetLockState(XnBool bLocked) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnBool bLocked)
SetLockState	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetLockState)(XnModuleNodeHandle hInstance, XnBool bLocked);$/;"	m	struct:XnModuleLockAwareInterface	access:public
SetMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMapOutputMode(const XnMapOutputMode& OutputMode)$/;"	f	class:xn::MapGenerator	access:public	signature:(const XnMapOutputMode& OutputMode)
SetMapOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetMapOutputMode(const XnMapOutputMode& Mode) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(const XnMapOutputMode& Mode)
SetMapOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetMapOutputMode)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
SetMaxVersion	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMaxVersion(const XnVersion& maxVersion)$/;"	f	class:xn::Query	access:public	signature:(const XnVersion& maxVersion)
SetMinSize	/usr/include/ni/XnArray.h	/^	XnStatus SetMinSize(XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize)
SetMinSize	/usr/include/ni/XnArray.h	/^	XnStatus SetMinSize(XnUInt32 nSize, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize, const T& fillVal)
SetMinVersion	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMinVersion(const XnVersion& minVersion)$/;"	f	class:xn::Query	access:public	signature:(const XnVersion& minVersion)
SetMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMirror(XnBool bMirror)$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnBool bMirror)
SetMirror	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetMirror(XnBool bMirror) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnBool bMirror)
SetMirror	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetMirror)(XnModuleNodeHandle hInstance, XnBool bMirror);$/;"	m	struct:XnModuleMirrorInterface	access:public
SetName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetName(const XnChar* strName)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strName)
SetNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetNodeNotifications(void* pNodeNotificationsCookie, XnNodeNotifications* pNodeNotifications) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(void* pNodeNotificationsCookie, XnNodeNotifications* pNodeNotifications)
SetNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetNodeNotifications)$/;"	m	struct:XnModulePlayerInterface	access:public
SetOutputStream	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetOutputStream(void* pCookie, XnRecorderOutputStreamInterface* pStream) = 0;$/;"	p	class:xn::ModuleRecorder	access:public	signature:(void* pCookie, XnRecorderOutputStreamInterface* pStream)
SetOutputStream	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetOutputStream)$/;"	m	struct:XnModuleRecorderInterface	access:public
SetPixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPixelFormat(XnPixelFormat Format)$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnPixelFormat Format)
SetPixelFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetPixelFormat(XnPixelFormat Format) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnPixelFormat Format)
SetPixelFormat	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetPixelFormat)(XnModuleNodeHandle hGenerator, XnPixelFormat Format);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
SetPlaybackSpeed	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPlaybackSpeed(XnDouble dSpeed)$/;"	f	class:xn::Player	access:public	signature:(XnDouble dSpeed)
SetPowerLineFrequency	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPowerLineFrequency(XnPowerLineFrequency nFrequency)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnPowerLineFrequency nFrequency)
SetPowerLineFrequency	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetPowerLineFrequency(XnPowerLineFrequency nFrequency) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnPowerLineFrequency nFrequency)
SetPowerLineFrequency	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetPowerLineFrequency)(XnModuleNodeHandle hGenerator, XnPowerLineFrequency nFrequency);$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
SetRawNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRawNodeNotifications)$/;"	m	struct:XnModulePlayerInterface	access:public
SetRealProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetRealProperty(const XnChar* strName, XnDouble dValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnDouble dValue)
SetRealProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetRealProperty(const XnChar* \/*strName*\/, XnDouble \/*dValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnDouble )
SetRealProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRealProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble dValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
SetRepeat	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetRepeat(XnBool bRepeat)$/;"	f	class:xn::Player	access:public	signature:(XnBool bRepeat)
SetRepeat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetRepeat(XnBool bRepeat) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnBool bRepeat)
SetRepeat	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRepeat)$/;"	m	struct:XnModulePlayerInterface	access:public
SetSize	/usr/include/ni/XnArray.h	/^	XnStatus SetSize(XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize)
SetSize	/usr/include/ni/XnArray.h	/^	XnStatus SetSize(XnUInt32 nSize, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize, const T& fillVal)
SetSize	/usr/include/ni/XnBitSet.h	/^	XnStatus SetSize(XnUInt32 nBits)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nBits)
SetSkeletonProfile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSkeletonProfile(XnSkeletonProfile eProfile)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonProfile eProfile)
SetSkeletonProfile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSkeletonProfile(XnSkeletonProfile eProfile) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonProfile eProfile)
SetSkeletonProfile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSkeletonProfile)(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
SetSmoothing	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSmoothing(XnFloat fSmoothingFactor)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnFloat fSmoothingFactor)
SetSmoothing	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSmoothing(XnFloat fSmoothingFactor)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnFloat fSmoothingFactor)
SetSmoothing	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSmoothing(XnFloat fSmoothingFactor) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnFloat fSmoothingFactor)
SetSmoothing	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSmoothing(XnFloat fSmoothingFactor) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnFloat fSmoothingFactor)
SetSmoothing	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSmoothing)(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
SetSmoothing	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSmoothing)(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
SetSource	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSource(XnRecordMedium sourceType, const XnChar* strSource)$/;"	f	class:xn::Player	access:public	signature:(XnRecordMedium sourceType, const XnChar* strSource)
SetStringProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetStringProperty(const XnChar* strName, const XnChar* strValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, const XnChar* strValue)
SetStringProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetStringProperty(const XnChar* \/*strName*\/, const XnChar* \/*strValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , const XnChar* )
SetStringProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetStringProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, const XnChar* strValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
SetSupportedMinUserPositions	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSupportedMinUserPositions(const XnUInt32 nCount)$/;"	f	class:xn::Query	access:public	signature:(const XnUInt32 nCount)
SetUnderlyingHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetUnderlyingHandle(XnNodeHandle hNode)$/;"	f	class:xn::Capability	access:public	signature:(XnNodeHandle hNode)
SetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline void SetUnderlyingObject(XnNodeInfo* pInfo);$/;"	p	class:xn::NodeInfo	access:private	signature:(XnNodeInfo* pInfo)
SetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^	inline void NodeInfo::SetUnderlyingObject(XnNodeInfo* pInfo)$/;"	f	class:xn::NodeInfo	signature:(XnNodeInfo* pInfo)
SetUserPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetUserPosition(XnUInt32 nIndex, const XnBoundingBox3D& Position)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnUInt32 nIndex, const XnBoundingBox3D& Position)
SetUserPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetUserPosition(XnUInt32 nIndex, const XnBoundingBox3D& Position) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnUInt32 nIndex, const XnBoundingBox3D& Position)
SetUserPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetUserPosition)($/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
SetVendor	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetVendor(const XnChar* strVendor)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strVendor)
SetViewPoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetViewPoint(ProductionNode& otherNode)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode)
SetViewPoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetViewPoint(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
SetViewPoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetViewPoint)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
SetWaveOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetWaveOutputMode(const XnWaveOutputMode& OutputMode)$/;"	f	class:xn::AudioGenerator	access:public	signature:(const XnWaveOutputMode& OutputMode)
SetWaveOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetWaveOutputMode(const XnWaveOutputMode& OutputMode) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(const XnWaveOutputMode& OutputMode)
SetWaveOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetWaveOutputMode)(XnModuleNodeHandle hGenerator, const XnWaveOutputMode* OutputMode);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
Shutdown	/usr/include/ni/XnCppWrapper.h	/^		inline void Shutdown()$/;"	f	class:xn::Context	access:public	signature:()
Size	/usr/include/ni/XnHash.h	/^	XnUInt32 Size() const$/;"	f	class:XnHash	access:public	signature:() const
Size	/usr/include/ni/XnList.h	/^	XnUInt32 Size() const$/;"	f	class:XnList	access:public	signature:() const
Size	/usr/include/ni/XnQueue.h	/^	virtual XnUInt32 Size() const$/;"	f	class:XnQueue	access:public	signature:() const
Size	/usr/include/ni/XnStack.h	/^	XnUInt32 Size() const$/;"	f	class:XnStack	access:public	signature:() const
Size	/usr/include/ni/XnThreadSafeQueue.h	/^	XnUInt32 Size() const$/;"	f	class:XnThreadSafeQueue	access:public	signature:() const
SkeletonCapability	/usr/include/ni/XnCppWrapper.h	/^		inline SkeletonCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnNodeHandle hNode)
SkeletonCapability	/usr/include/ni/XnCppWrapper.h	/^	class SkeletonCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
SkeletonCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct SkeletonCookie$/;"	s	class:xn::SkeletonCapability	access:private
SkeletonCookie	/usr/include/ni/XnCppWrapper.h	/^		} SkeletonCookie;$/;"	t	class:xn::SkeletonCapability	typeref:struct:xn::SkeletonCapability::SkeletonCookie	access:private
StartGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartGenerating()$/;"	f	class:xn::Generator	access:public	signature:()
StartGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
StartGenerating	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
StartGeneratingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartGeneratingAll()$/;"	f	class:xn::Context	access:public	signature:()
StartPoseDetection	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartPoseDetection(const XnChar* strPose, XnUserID user)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(const XnChar* strPose, XnUserID user)
StartPoseDetection	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartPoseDetection(const XnChar* strPose, XnUserID user) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(const XnChar* strPose, XnUserID user)
StartPoseDetection	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartPoseDetection)(XnModuleNodeHandle hGenerator, const XnChar* strPose, XnUserID user);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
StartTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartTracking(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
StartTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartTracking(const XnPoint3D& ptPosition)$/;"	f	class:xn::HandsGenerator	access:public	signature:(const XnPoint3D& ptPosition)
StartTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
StartTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartTracking(const XnPoint3D& ptPosition) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(const XnPoint3D& ptPosition)
StartTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
StartTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartTracking)(XnModuleNodeHandle hGenerator, const XnPoint3D* pPosition);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
StateChangeCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct StateChangeCookie$/;"	s	class:xn::StateChangedCallbackTranslator	access:private
StateChangeCookie	/usr/include/ni/XnCppWrapper.h	/^		} StateChangeCookie;$/;"	t	class:xn::StateChangedCallbackTranslator	typeref:struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:private
StateChangedCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE StateChangedCallback(XnNodeHandle hNode, void* pCookie)$/;"	f	class:xn::StateChangedCallbackTranslator	access:private	signature:(XnNodeHandle hNode, void* pCookie)
StateChangedCallbackTranslator	/usr/include/ni/XnCppWrapper.h	/^		StateChangedCallbackTranslator(StateChangedHandler handler, void* pCookie) : m_UserHandler(handler), m_pUserCookie(pCookie), m_hCallback(NULL) {}$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(StateChangedHandler handler, void* pCookie)
StateChangedCallbackTranslator	/usr/include/ni/XnCppWrapper.h	/^	class StateChangedCallbackTranslator$/;"	c	namespace:xn
StateChangedHandler	/usr/include/ni/XnCppWrapper.h	/^	typedef void (XN_CALLBACK_TYPE* StateChangedHandler)(ProductionNode& node, void* pCookie);$/;"	t	namespace:xn
StopFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopFrameSyncWith(Generator& other);$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other)
StopFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus FrameSyncCapability::StopFrameSyncWith(Generator& other)$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other)
StopFrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopFrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
StopFrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopFrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
StopGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopGenerating()$/;"	f	class:xn::Generator	access:public	signature:()
StopGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void StopGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
StopGenerating	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* StopGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
StopGeneratingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopGeneratingAll()$/;"	f	class:xn::Context	access:public	signature:()
StopNotifications	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* StopNotifications)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleExtendedSerializationInterface	access:public
StopPoseDetection	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopPoseDetection(XnUserID user)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnUserID user)
StopPoseDetection	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopPoseDetection(XnUserID user) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnUserID user)
StopPoseDetection	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopPoseDetection)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
StopTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTracking(XnUserID user)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnUserID user)
StopTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTracking(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
StopTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnUserID user)
StopTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
StopTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
StopTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
StopTrackingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTrackingAll()$/;"	f	class:xn::HandsGenerator	access:public	signature:()
StopTrackingAll	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTrackingAll() = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:()
StopTrackingAll	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTrackingAll)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
TRUE	/usr/include/ni/XnPlatform.h	/^	#define TRUE /;"	d
Tell	/usr/include/ni/XnTypes.h	/^	XnUInt32 (XN_CALLBACK_TYPE* Tell)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
Tell	/usr/include/ni/XnTypes.h	/^	XnUInt32 (XN_CALLBACK_TYPE* Tell)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
TellFrame	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus TellFrame(const XnChar* strNodeName, XnUInt32& nFrame) const$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrame) const
TellFrame	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus TellFrame(const XnChar* strNodeName, XnUInt32& nFrame) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrame)
TellFrame	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* TellFrame)$/;"	m	struct:XnModulePlayerInterface	access:public
TellTimestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus TellTimestamp(XnUInt64& nTimestamp) const$/;"	f	class:xn::Player	access:public	signature:(XnUInt64& nTimestamp) const
TellTimestamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus TellTimestamp(XnUInt64& nTimestamp) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnUInt64& nTimestamp)
TellTimestamp	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* TellTimestamp)$/;"	m	struct:XnModulePlayerInterface	access:public
Timestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64 Timestamp() const { return m_output.nTimestamp; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
Timestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64& Timestamp() { return m_output.nTimestamp; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
ToString	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ToString(XnChar* csBuffer, XnUInt32 nSize)$/;"	f	class:xn::EnumerationErrors	access:public	signature:(XnChar* csBuffer, XnUInt32 nSize)
Top	/usr/include/ni/XnQueue.h	/^	XnValue const& Top() const$/;"	f	class:XnQueue	access:public	signature:() const
Top	/usr/include/ni/XnQueue.h	/^	XnValue& Top()$/;"	f	class:XnQueue	access:public	signature:()
Top	/usr/include/ni/XnStack.h	/^	XnValue const& Top() const$/;"	f	class:XnStack	access:public	signature:() const
Top	/usr/include/ni/XnStack.h	/^	XnValue& Top()$/;"	f	class:XnStack	access:public	signature:()
Type	/usr/include/ni/XnTypes.h	/^	XnProductionNodeType Type;$/;"	m	struct:XnProductionNodeDescription	access:public
Unload	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void Unload() {}$/;"	f	class:xn::Module	access:public	signature:()
Unlock	/usr/include/ni/XnOSCpp.h	/^	inline void Unlock()$/;"	f	class:XnAutoCSLocker	access:private	signature:()
UnlockForChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void UnlockForChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
Unref	/usr/include/ni/XnCppWrapper.h	/^		inline void XN_API_DEPRECATED("Please use Release() instead.") Unref() { Release(); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
Unregister	/usr/include/ni/XnCppWrapper.h	/^		void Unregister(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)
Unregister	/usr/include/ni/XnEvent.h	/^	XnStatus Unregister(XnCallbackHandle handle)$/;"	f	class:XnEvent	access:public	signature:(XnCallbackHandle handle)
Unregister	/usr/include/ni/XnEvent.h	/^	virtual XnStatus Unregister(XnCallbackHandle handle) = 0;$/;"	p	class:XnEventInterface	access:public	signature:(XnCallbackHandle handle)
UnregisterCalibrationCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterCalibrationCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterCalibrationCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterCalibrationCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterCalibrationCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterCalibrationCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
UnregisterExNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterExNotifications() = 0;$/;"	p	class:xn::ModuleExtendedSerializationInterface	access:public	signature:()
UnregisterFromCroppingChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromCroppingChange(XnCallbackHandle hCallback)$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromCroppingChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromCroppingChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromCroppingChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromCroppingChange)$/;"	m	struct:XnModuleCroppingInterface	access:public
UnregisterFromEndOfFileReached	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromEndOfFileReached(XnCallbackHandle hCallback)$/;"	f	class:xn::Player	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromEndOfFileReached	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromEndOfFileReached(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromEndOfFileReached	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromEndOfFileReached)$/;"	m	struct:XnModulePlayerInterface	access:public
UnregisterFromErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromErrorStateChange(XnCallbackHandle hCallback)$/;"	f	class:xn::Context	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromErrorStateChange(XnCallbackHandle hCallback)$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromErrorStateChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromErrorStateChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromErrorStateChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromErrorStateChange)$/;"	m	struct:XnModuleErrorStateInterface	access:public
UnregisterFromFieldOfViewChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromFieldOfViewChange(XnCallbackHandle hCallback)$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromFieldOfViewChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromFieldOfViewChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromFieldOfViewChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromFieldOfViewChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
UnregisterFromFrameSyncChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromFrameSyncChange(XnCallbackHandle hCallback)$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromFrameSyncChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromFrameSyncChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromFrameSyncChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromFrameSyncChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
UnregisterFromGenerationRunningChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromGenerationRunningChange(XnCallbackHandle hCallback)$/;"	f	class:xn::Generator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromGenerationRunningChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromGenerationRunningChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromGenerationRunningChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromGenerationRunningChange)$/;"	m	struct:XnModuleGeneratorInterface	access:public
UnregisterFromGestureChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromGestureChange(XnCallbackHandle hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromGestureChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromGestureChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromGestureChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromGestureChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
UnregisterFromJointConfigurationChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromJointConfigurationChange(XnCallbackHandle hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromJointConfigurationChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromJointConfigurationChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromJointConfigurationChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromJointConfigurationChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
UnregisterFromLockChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromLockChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromLockChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromLockChange)$/;"	m	struct:XnModuleLockAwareInterface	access:public
UnregisterFromMapOutputModeChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromMapOutputModeChange(XnCallbackHandle hCallback)$/;"	f	class:xn::MapGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromMapOutputModeChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromMapOutputModeChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromMapOutputModeChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromMapOutputModeChange)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
UnregisterFromMirrorChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromMirrorChange(XnCallbackHandle hCallback)$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromMirrorChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromMirrorChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromMirrorChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromMirrorChange)$/;"	m	struct:XnModuleMirrorInterface	access:public
UnregisterFromNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromNewDataAvailable(XnCallbackHandle hCallback)$/;"	f	class:xn::Generator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromNewDataAvailable(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
UnregisterFromPixelFormatChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPixelFormatChange(XnCallbackHandle hCallback)$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPixelFormatChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPixelFormatChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPixelFormatChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPixelFormatChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
UnregisterFromPoseCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPoseCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPoseCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPoseCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
UnregisterFromPoseDetectionCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPoseDetectionCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPowerLineFrequencyChange(XnCallbackHandle hCallback)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPowerLineFrequencyChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPowerLineFrequencyChange)$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
UnregisterFromUnderlying	/usr/include/ni/XnCppWrapper.h	/^		static XnStatus UnregisterFromUnderlying(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
UnregisterFromUserPositionChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromUserPositionChange(XnCallbackHandle hCallback)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromUserPositionChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromUserPositionChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromUserPositionChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromUserPositionChange)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
UnregisterFromValueChange	/usr/include/ni/XnCppWrapper.h	/^		void UnregisterFromValueChange(XnCallbackHandle hCallback);$/;"	p	class:xn::GeneralIntCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromValueChange	/usr/include/ni/XnCppWrapper.h	/^	inline void GeneralIntCapability::UnregisterFromValueChange(XnCallbackHandle hCallback)$/;"	f	class:xn::GeneralIntCapability	signature:(XnCallbackHandle hCallback)
UnregisterFromValueChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromValueChange(const XnChar* strCap, XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnCallbackHandle hCallback)
UnregisterFromValueChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromValueChange)$/;"	m	struct:XnModuleGeneralIntInterface	access:public
UnregisterFromViewPointChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromViewPointChange(XnCallbackHandle hCallback)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromViewPointChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromViewPointChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromViewPointChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromViewPointChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromWaveOutputModeChanges(XnCallbackHandle hCallback)$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromWaveOutputModeChanges(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromWaveOutputModeChanges)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
UnregisterGestureCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterGestureCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterGestureCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterGestureCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterGestureCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterGestureCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
UnregisterHandCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterHandCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterHandCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterHandCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterHandCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterHandCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
UnregisterUserCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterUserCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::UserGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterUserCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterUserCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnCallbackHandle hCallback)
UnregisterUserCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterUserCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
UpdateData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus UpdateData() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
UpdateData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* UpdateData)$/;"	m	struct:XnModuleGeneratorInterface	access:public
UpdateInternalObject	/usr/include/ni/XnCppWrapper.h	/^			inline void UpdateInternalObject(XnNodeInfoListIterator it)$/;"	f	class:xn::NodeInfoList::Iterator	access:private	signature:(XnNodeInfoListIterator it)
User	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* User)(struct XnModuleUserGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
UserCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct UserCookie$/;"	s	class:xn::UserGenerator	access:private
UserCookie	/usr/include/ni/XnCppWrapper.h	/^		} UserCookie;$/;"	t	class:xn::UserGenerator	typeref:struct:xn::UserGenerator::UserCookie	access:private
UserGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline UserGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::UserGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
UserGenerator	/usr/include/ni/XnCppWrapper.h	/^	class UserGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
UserHandler	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* UserHandler)(UserGenerator& generator, XnUserID user, void* pCookie);$/;"	t	class:xn::UserGenerator	access:public
UserPositionCapability	/usr/include/ni/XnCppWrapper.h	/^		inline UserPositionCapability(XnNodeHandle hNode = NULL) : Capability(hNode) {}$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnNodeHandle hNode = NULL)
UserPositionCapability	/usr/include/ni/XnCppWrapper.h	/^	class UserPositionCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
Value	/usr/include/ni/XnHash.h	/^		XnValue& Value() const { return (XnValue&)ConstIterator::Value(); }$/;"	f	class:XnHash::Iterator	access:public	signature:() const
Value	/usr/include/ni/XnHash.h	/^		const XnValue& Value() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
Version	/usr/include/ni/XnCppWrapper.h	/^		Version(XnUInt8 nMajor, XnUInt8 nMinor, XnUInt16 nMaintenance, XnUInt32 nBuild)$/;"	f	class:xn::Version	access:public	signature:(XnUInt8 nMajor, XnUInt8 nMinor, XnUInt16 nMaintenance, XnUInt32 nBuild)
Version	/usr/include/ni/XnCppWrapper.h	/^		Version(const XnVersion& version) : m_version(version) {}$/;"	f	class:xn::Version	access:public	signature:(const XnVersion& version)
Version	/usr/include/ni/XnCppWrapper.h	/^	class Version$/;"	c	namespace:xn
Version	/usr/include/ni/XnTypes.h	/^	XnVersion Version;$/;"	m	struct:XnProductionNodeDescription	access:public
Wait	/usr/include/ni/XnOSCpp.h	/^	XnStatus Wait(XnUInt32 nMilliseconds)$/;"	f	class:XnOSEvent	access:public	signature:(XnUInt32 nMilliseconds)
WaitAndUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAndUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
WaitAndUpdateData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAndUpdateData()$/;"	f	class:xn::Generator	access:public	signature:()
WaitAnyUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAnyUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
WaitNoneUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitNoneUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
WaitOneUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitOneUpdateAll(ProductionNode& node)$/;"	f	class:xn::Context	access:public	signature:(ProductionNode& node)
Wave	/usr/include/ni/XnTypes.h	/^	XnWaveOutputMode Wave;$/;"	m	struct:XnAudioMetaData	access:public
WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel* WritableData() { return (XnDepthPixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnIRPixel* WritableData() { return (XnIRPixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::IRMetaData	access:public	signature:()
WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnLabel* WritableData() { return (XnLabel*)MapMetaData::WritableData(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8* WritableData() { return MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8* WritableData()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
WritableDepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::DepthMap& WritableDepthMap() $/;"	f	class:xn::DepthMetaData	access:public	signature:()
WritableGrayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnGrayscale16Pixel* WritableGrayscale16Data() { return (XnGrayscale16Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableGrayscale16Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::Grayscale16Map& WritableGrayscale16Map() { MakeDataWritable(); return m_writableGray16Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableGrayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnGrayscale8Pixel* WritableGrayscale8Data() { return (XnGrayscale8Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableGrayscale8Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::Grayscale8Map& WritableGrayscale8Map() { MakeDataWritable(); return m_writableGray8Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableIRMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::IRMap& WritableIRMap() { MakeDataWritable(); return m_writableIRMap; }$/;"	f	class:xn::IRMetaData	access:public	signature:()
WritableImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::ImageMap& WritableImageMap() { MakeDataWritable(); return m_writableImageMap; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableLabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::LabelMap& WritableLabelMap() { MakeDataWritable(); return m_writableLabelMap; }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
WritableRGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnRGB24Pixel* WritableRGB24Data() { return (XnRGB24Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableRGB24Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::RGB24Map& WritableRGB24Map() { MakeDataWritable(); return m_writableRgb24Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
WritableYUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnYUV422DoublePixel* WritableYUV422Data() { return (XnYUV422DoublePixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
Write	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Write)(void* pCookie, const XnChar* strNodeName, $/;"	m	struct:XnRecorderOutputStreamInterface	access:public
X	/usr/include/ni/XnTypes.h	/^	XnFloat X;$/;"	m	struct:XnVector3D	access:public
X	/usr/include/ni/XnTypes.h	/^	XnUInt32 X;$/;"	m	struct:XnUInt32XYPair	access:public
XN_1080P_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_1080P_X_RES	/;"	d
XN_1080P_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_1080P_Y_RES	/;"	d
XN_240P_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_240P_X_RES	/;"	d
XN_240P_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_240P_Y_RES	/;"	d
XN_480P_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_480P_X_RES	/;"	d
XN_480P_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_480P_Y_RES	/;"	d
XN_576P_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_576P_X_RES	/;"	d
XN_576P_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_576P_Y_RES	/;"	d
XN_720P_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_720P_X_RES	/;"	d
XN_720P_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_720P_Y_RES	/;"	d
XN_ALIGNED_FREE_AND_NULL	/usr/include/ni/XnOS.h	/^#define XN_ALIGNED_FREE_AND_NULL(/;"	d
XN_ALLOCATION_CALLOC	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_CALLOC,$/;"	e	enum:__anon7
XN_ALLOCATION_CALLOC_ALIGNED	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_CALLOC_ALIGNED,$/;"	e	enum:__anon7
XN_ALLOCATION_MALLOC	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_MALLOC,$/;"	e	enum:__anon7
XN_ALLOCATION_MALLOC_ALIGNED	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_MALLOC_ALIGNED,$/;"	e	enum:__anon7
XN_ALLOCATION_NEW	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_NEW,$/;"	e	enum:__anon7
XN_ALLOCATION_NEW_ARRAY	/usr/include/ni/XnOS.h	/^	XN_ALLOCATION_NEW_ARRAY$/;"	e	enum:__anon7
XN_API_DEPRECATED	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_API_DEPRECATED(/;"	d
XN_API_EXPORT	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_API_EXPORT /;"	d
XN_API_EXPORT_INIT	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_API_EXPORT_INIT(/;"	d
XN_API_IMPORT	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_API_IMPORT /;"	d
XN_ASSERT	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_ASSERT(/;"	d
XN_AUTO_CONTROL	/usr/include/ni/XnTypes.h	/^#define XN_AUTO_CONTROL	/;"	d
XN_BRIEF_VERSION_STRING	/usr/include/ni/XnVersion.h	/^#define XN_BRIEF_VERSION_STRING /;"	d
XN_BUILD_VERSION	/usr/include/ni/XnVersion.h	/^#define XN_BUILD_VERSION /;"	d
XN_CALLBACK_TYPE	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_CALLBACK_TYPE /;"	d
XN_CAPABILITY_ALTERNATIVE_VIEW_POINT	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ALTERNATIVE_VIEW_POINT	/;"	d
XN_CAPABILITY_ANTI_FILCKER	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ANTI_FILCKER	/;"	d
XN_CAPABILITY_ANTI_FLICKER	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ANTI_FLICKER	/;"	d
XN_CAPABILITY_BACKLIGHT_COMPENSATION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_BACKLIGHT_COMPENSATION	/;"	d
XN_CAPABILITY_BRIGHTNESS	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_BRIGHTNESS	/;"	d
XN_CAPABILITY_COLOR_TEMPERATURE	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_COLOR_TEMPERATURE	/;"	d
XN_CAPABILITY_CONTRAST	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_CONTRAST	/;"	d
XN_CAPABILITY_CROPPING	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_CROPPING	/;"	d
XN_CAPABILITY_DEVICE_IDENTIFICATION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_DEVICE_IDENTIFICATION	/;"	d
XN_CAPABILITY_ERROR_STATE	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ERROR_STATE	/;"	d
XN_CAPABILITY_EXPOSURE	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_EXPOSURE	/;"	d
XN_CAPABILITY_EXTENDED_SERIALIZATION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_EXTENDED_SERIALIZATION	/;"	d
XN_CAPABILITY_FOCUS	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_FOCUS	/;"	d
XN_CAPABILITY_FRAME_SYNC	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_FRAME_SYNC	/;"	d
XN_CAPABILITY_GAIN	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_GAIN	/;"	d
XN_CAPABILITY_GAMMA	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_GAMMA	/;"	d
XN_CAPABILITY_HUE	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_HUE	/;"	d
XN_CAPABILITY_IRIS	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_IRIS	/;"	d
XN_CAPABILITY_LOCK_AWARE	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_LOCK_AWARE	/;"	d
XN_CAPABILITY_LOW_LIGHT_COMPENSATION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_LOW_LIGHT_COMPENSATION	/;"	d
XN_CAPABILITY_MIRROR	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_MIRROR	/;"	d
XN_CAPABILITY_PAN	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_PAN	/;"	d
XN_CAPABILITY_POSE_DETECTION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_POSE_DETECTION	/;"	d
XN_CAPABILITY_ROLL	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ROLL	/;"	d
XN_CAPABILITY_SATURATION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_SATURATION	/;"	d
XN_CAPABILITY_SHARPNESS	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_SHARPNESS	/;"	d
XN_CAPABILITY_SKELETON	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_SKELETON	/;"	d
XN_CAPABILITY_TILT	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_TILT	/;"	d
XN_CAPABILITY_USER_POSITION	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_USER_POSITION	/;"	d
XN_CAPABILITY_ZOOM	/usr/include/ni/XnTypes.h	/^#define XN_CAPABILITY_ZOOM	/;"	d
XN_CGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_CGA_X_RES	/;"	d
XN_CGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_CGA_Y_RES	/;"	d
XN_CHECK_INPUT_OVERFLOW	/usr/include/ni/XnMacros.h	/^#define XN_CHECK_INPUT_OVERFLOW(/;"	d
XN_CHECK_OUTPUT_OVERFLOW	/usr/include/ni/XnMacros.h	/^#define XN_CHECK_OUTPUT_OVERFLOW(/;"	d
XN_CIF_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_CIF_X_RES	/;"	d
XN_CIF_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_CIF_Y_RES	/;"	d
XN_CODEC_16Z	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_16Z	/;"	d
XN_CODEC_16Z_EMB_TABLES	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_16Z_EMB_TABLES	/;"	d
XN_CODEC_8Z	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_8Z	/;"	d
XN_CODEC_ID	/usr/include/ni/XnTypes.h	/^#define XN_CODEC_ID(/;"	d
XN_CODEC_JPEG	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_JPEG	/;"	d
XN_CODEC_NULL	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_NULL	/;"	d
XN_CODEC_UNCOMPRESSED	/usr/include/ni/XnCodecIDs.h	/^#define XN_CODEC_UNCOMPRESSED	/;"	d
XN_CPP_API	/usr/include/ni/XnPlatform.h	/^	#define XN_CPP_API /;"	d
XN_CPP_API_EXPORT	/usr/include/ni/XnPlatform.h	/^	#define XN_CPP_API_EXPORT /;"	d
XN_CPP_API_IMPORT	/usr/include/ni/XnPlatform.h	/^	#define XN_CPP_API_IMPORT /;"	d
XN_CRITICAL_SECTION_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	XN_MUTEX_HANDLE XN_CRITICAL_SECTION_HANDLE;$/;"	t
XN_C_API	/usr/include/ni/XnPlatform.h	/^	#define XN_C_API /;"	d
XN_C_API_EXPORT	/usr/include/ni/XnPlatform.h	/^	#define XN_C_API_EXPORT /;"	d
XN_C_API_IMPORT	/usr/include/ni/XnPlatform.h	/^	#define XN_C_API_IMPORT /;"	d
XN_C_DECL	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_C_DECL$/;"	d
XN_DECLARE_DEFAULT_HASH	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_HASH(/;"	d
XN_DECLARE_DEFAULT_HASH_DECL	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_HASH_DECL(/;"	d
XN_DECLARE_DEFAULT_KEY_MANAGER	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_KEY_MANAGER(/;"	d
XN_DECLARE_DEFAULT_KEY_MANAGER_DECL	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_KEY_MANAGER_DECL(/;"	d
XN_DECLARE_DEFAULT_MANAGER_HASH	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_MANAGER_HASH(/;"	d
XN_DECLARE_DEFAULT_MANAGER_HASH_DECL	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_DEFAULT_MANAGER_HASH_DECL(/;"	d
XN_DECLARE_DEFAULT_VALUE_TRANSLATOR	/usr/include/ni/XnDataTypes.h	/^#define XN_DECLARE_DEFAULT_VALUE_TRANSLATOR(/;"	d
XN_DECLARE_DEFAULT_VALUE_TRANSLATOR_DECL	/usr/include/ni/XnDataTypes.h	/^#define XN_DECLARE_DEFAULT_VALUE_TRANSLATOR_DECL(/;"	d
XN_DECLARE_EVENT_0ARG	/usr/include/ni/XnEvent.h	/^	#define XN_DECLARE_EVENT_0ARG(/;"	d
XN_DECLARE_EVENT_0ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_0ARG_RETVAL(/;"	d
XN_DECLARE_EVENT_1ARG	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_1ARG(/;"	d
XN_DECLARE_EVENT_1ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_1ARG_RETVAL(/;"	d
XN_DECLARE_EVENT_2ARG	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_2ARG(/;"	d
XN_DECLARE_EVENT_2ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_2ARG_RETVAL(/;"	d
XN_DECLARE_EVENT_3ARG	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_3ARG(/;"	d
XN_DECLARE_EVENT_3ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_3ARG_RETVAL(/;"	d
XN_DECLARE_EVENT_4ARG	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_4ARG(/;"	d
XN_DECLARE_EVENT_4ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_4ARG_RETVAL(/;"	d
XN_DECLARE_EVENT_5ARG	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_5ARG(/;"	d
XN_DECLARE_EVENT_5ARG_RETVAL	/usr/include/ni/XnEvent.h	/^#define XN_DECLARE_EVENT_5ARG_RETVAL(/;"	d
XN_DECLARE_HASH	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_HASH(/;"	d
XN_DECLARE_HASH_DECL	/usr/include/ni/XnHash.h	/^#define XN_DECLARE_HASH_DECL(/;"	d
XN_DECLARE_LIST	/usr/include/ni/XnList.h	/^#define XN_DECLARE_LIST(/;"	d
XN_DECLARE_LIST	/usr/include/ni/XnModuleCppInterface.h	/^	XN_DECLARE_LIST(XnModuleGetExportedInterfacePtr, ExportedNodesList);$/;"	p	namespace:xn	signature:(XnModuleGetExportedInterfacePtr, ExportedNodesList)
XN_DECLARE_LIST_DECL	/usr/include/ni/XnList.h	/^#define XN_DECLARE_LIST_DECL(/;"	d
XN_DECLARE_LIST_WITH_TRANSLATOR	/usr/include/ni/XnList.h	/^#define XN_DECLARE_LIST_WITH_TRANSLATOR(/;"	d
XN_DECLARE_LIST_WITH_TRANSLATOR_DECL	/usr/include/ni/XnList.h	/^#define XN_DECLARE_LIST_WITH_TRANSLATOR_DECL(/;"	d
XN_DECLARE_QUEUE	/usr/include/ni/XnQueue.h	/^#define XN_DECLARE_QUEUE(/;"	d
XN_DECLARE_QUEUE_DECL	/usr/include/ni/XnQueue.h	/^#define XN_DECLARE_QUEUE_DECL(/;"	d
XN_DECLARE_QUEUE_WITH_TRANSLATOR	/usr/include/ni/XnQueue.h	/^#define XN_DECLARE_QUEUE_WITH_TRANSLATOR(/;"	d
XN_DECLARE_QUEUE_WITH_TRANSLATOR_DECL	/usr/include/ni/XnQueue.h	/^#define XN_DECLARE_QUEUE_WITH_TRANSLATOR_DECL(/;"	d
XN_DECLARE_STACK	/usr/include/ni/XnStack.h	/^#define XN_DECLARE_STACK(/;"	d
XN_DECLARE_STACK_DECL	/usr/include/ni/XnStack.h	/^#define XN_DECLARE_STACK_DECL(/;"	d
XN_DECLARE_STACK_WITH_TRANSLATOR	/usr/include/ni/XnStack.h	/^#define XN_DECLARE_STACK_WITH_TRANSLATOR(/;"	d
XN_DECLARE_STACK_WITH_TRANSLATOR_DECL	/usr/include/ni/XnStack.h	/^#define XN_DECLARE_STACK_WITH_TRANSLATOR_DECL(/;"	d
XN_DECLARE_STRINGS_HASH	/usr/include/ni/XnStringsHash.h	/^#define XN_DECLARE_STRINGS_HASH(/;"	d
XN_DECLARE_STRINGS_HASH_DECL	/usr/include/ni/XnStringsHash.h	/^#define XN_DECLARE_STRINGS_HASH_DECL(/;"	d
XN_DECLARE_STRINGS_HASH_WITH_TRANSLATOR	/usr/include/ni/XnStringsHash.h	/^#define XN_DECLARE_STRINGS_HASH_WITH_TRANSLATOR(/;"	d
XN_DECLARE_STRINGS_HASH_WITH_TRANSLATOR_DECL	/usr/include/ni/XnStringsHash.h	/^#define XN_DECLARE_STRINGS_HASH_WITH_TRANSLATOR_DECL(/;"	d
XN_DECLARE_THREAD_SAFE_QUEUE	/usr/include/ni/XnThreadSafeQueue.h	/^#define XN_DECLARE_THREAD_SAFE_QUEUE(/;"	d
XN_DECLARE_THREAD_SAFE_QUEUE_DECL	/usr/include/ni/XnThreadSafeQueue.h	/^#define XN_DECLARE_THREAD_SAFE_QUEUE_DECL(/;"	d
XN_DECLARE_THREAD_SAFE_QUEUE_WITH_TRANSLATOR	/usr/include/ni/XnThreadSafeQueue.h	/^#define XN_DECLARE_THREAD_SAFE_QUEUE_WITH_TRANSLATOR(/;"	d
XN_DECLARE_THREAD_SAFE_QUEUE_WITH_TRANSLATOR_DECL	/usr/include/ni/XnThreadSafeQueue.h	/^#define XN_DECLARE_THREAD_SAFE_QUEUE_WITH_TRANSLATOR_DECL(/;"	d
XN_DEFAULT_MEM_ALIGN	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_DEFAULT_MEM_ALIGN /;"	d
XN_DEFAULT_TRANSLATOR_NAME	/usr/include/ni/XnDataTypes.h	/^#define XN_DEFAULT_TRANSLATOR_NAME(/;"	d
XN_DELETE	/usr/include/ni/XnOS.h	/^#define XN_DELETE(/;"	d
XN_DELETE_ARR	/usr/include/ni/XnOS.h	/^#define XN_DELETE_ARR(/;"	d
XN_DEPTH_NO_SAMPLE_VALUE	/usr/include/ni/XnTypes.h	/^#define XN_DEPTH_NO_SAMPLE_VALUE	/;"	d
XN_DUMP_CLOSED	/usr/include/ni/XnLog.h	/^const XnDump XN_DUMP_CLOSED = { XN_INVALID_FILE_HANDLE };$/;"	v
XN_DV_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_DV_X_RES	/;"	d
XN_DV_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_DV_Y_RES	/;"	d
XN_ERROR_GROUP_NI	/usr/include/ni/XnStatus.h	/^	XN_ERROR_GROUP_NI = 1,$/;"	e	enum:XnErrorGroup
XN_ERROR_GROUP_OS	/usr/include/ni/XnStatus.h	/^	XN_ERROR_GROUP_OS = 2,$/;"	e	enum:XnErrorGroup
XN_ERROR_GROUP_PRIMESENSE	/usr/include/ni/XnStatus.h	/^	XN_ERROR_GROUP_PRIMESENSE = 3,$/;"	e	enum:XnErrorGroup
XN_EVENT_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^} _XnEvent, *XN_EVENT_HANDLE;$/;"	t	typeref:struct:__anon1
XN_EXPORT_AUDIO	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_AUDIO(/;"	d
XN_EXPORT_CODEC	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_CODEC(/;"	d
XN_EXPORT_DEPTH	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_DEPTH(/;"	d
XN_EXPORT_DEVICE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_DEVICE(/;"	d
XN_EXPORT_GESTURE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_GESTURE(/;"	d
XN_EXPORT_HANDS	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_HANDS(/;"	d
XN_EXPORT_IMAGE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_IMAGE(/;"	d
XN_EXPORT_IR	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_IR(/;"	d
XN_EXPORT_MODULE	/usr/include/ni/XnModuleCppRegistratration.h	/^	#define XN_EXPORT_MODULE(/;"	d
XN_EXPORT_NODE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_NODE(/;"	d
XN_EXPORT_PLAYER	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_PLAYER(/;"	d
XN_EXPORT_RECORDER	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_RECORDER(/;"	d
XN_EXPORT_SCENE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_SCENE(/;"	d
XN_EXPORT_USER	/usr/include/ni/XnModuleCppRegistratration.h	/^#define XN_EXPORT_USER(/;"	d
XN_FILE_ALL_WILDCARD	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_FILE_ALL_WILDCARD /;"	d
XN_FILE_DIR_SEP	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_FILE_DIR_SEP /;"	d
XN_FILE_EXT_SEP	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_FILE_EXT_SEP /;"	d
XN_FILE_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef XnInt XN_FILE_HANDLE;$/;"	t
XN_FILE_LOCAL_DIR	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_FILE_LOCAL_DIR /;"	d
XN_FILE_MAX_PATH	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_FILE_MAX_PATH /;"	d
XN_FORMAT_NAME_ONI	/usr/include/ni/XnTypes.h	/^#define XN_FORMAT_NAME_ONI	/;"	d
XN_FREE_AND_NULL	/usr/include/ni/XnOS.h	/^#define XN_FREE_AND_NULL(/;"	d
XN_GOCLEANUP_RET	/usr/include/ni/XnMacros.h	/^#define XN_GOCLEANUP_RET(/;"	d
XN_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	void* XN_HANDLE;$/;"	t
XN_HASH_LAST_BIN	/usr/include/ni/XnHash.h	/^#define XN_HASH_LAST_BIN /;"	d
XN_HASH_NUM_BINS	/usr/include/ni/XnHash.h	/^#define XN_HASH_NUM_BINS /;"	d
XN_INI_FILE_EXT	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_INI_FILE_EXT /;"	d
XN_INI_MAX_LEN	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_INI_MAX_LEN /;"	d
XN_INVALID_FILE_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_INVALID_FILE_HANDLE /;"	d
XN_IS_BOOL_OK_GOCLEANUP_RET	/usr/include/ni/XnMacros.h	/^#define XN_IS_BOOL_OK_GOCLEANUP_RET(/;"	d
XN_IS_BOOL_OK_RET	/usr/include/ni/XnMacros.h	/^#define XN_IS_BOOL_OK_RET(/;"	d
XN_IS_STATUS_OK	/usr/include/ni/XnMacros.h	/^#define XN_IS_STATUS_OK(/;"	d
XN_IS_STATUS_OK_ASSERT	/usr/include/ni/XnMacros.h	/^#define XN_IS_STATUS_OK_ASSERT(/;"	d
XN_IS_STATUS_OK_ERROR	/usr/include/ni/XnLog.h	/^	#define XN_IS_STATUS_OK_ERROR(/;"	d
XN_IS_STATUS_OK_GOCLEANUP	/usr/include/ni/XnMacros.h	/^#define XN_IS_STATUS_OK_GOCLEANUP(/;"	d
XN_IS_STATUS_OK_GOCLEANUP_RET	/usr/include/ni/XnMacros.h	/^#define XN_IS_STATUS_OK_GOCLEANUP_RET(/;"	d
XN_IS_STATUS_OK_LOG	/usr/include/ni/XnLog.h	/^	#define XN_IS_STATUS_OK_LOG(/;"	d
XN_IS_STATUS_OK_LOG_ERROR	/usr/include/ni/XnLog.h	/^#define XN_IS_STATUS_OK_LOG_ERROR(/;"	d
XN_IS_STATUS_OK_RET	/usr/include/ni/XnMacros.h	/^#define XN_IS_STATUS_OK_RET(/;"	d
XN_IS_STATUS_OK_WARNING	/usr/include/ni/XnLog.h	/^	#define XN_IS_STATUS_OK_WARNING(/;"	d
XN_LIB_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	void* XN_LIB_HANDLE;$/;"	t
XN_LOG_DIR_NAME	/usr/include/ni/XnLog.h	/^#define XN_LOG_DIR_NAME	/;"	d
XN_LOG_ERROR	/usr/include/ni/XnLog.h	/^	XN_LOG_ERROR$/;"	e	enum:XnLogSeverity
XN_LOG_ERROR_RETURN	/usr/include/ni/XnLog.h	/^	#define XN_LOG_ERROR_RETURN(/;"	d
XN_LOG_INFO	/usr/include/ni/XnLog.h	/^	XN_LOG_INFO,$/;"	e	enum:XnLogSeverity
XN_LOG_MASKS_STRING_LEN	/usr/include/ni/XnLog.h	/^#define XN_LOG_MASKS_STRING_LEN	/;"	d
XN_LOG_MASK_ALL	/usr/include/ni/XnLog.h	/^#define XN_LOG_MASK_ALL	/;"	d
XN_LOG_RETURN	/usr/include/ni/XnLog.h	/^	#define XN_LOG_RETURN(/;"	d
XN_LOG_VERBOSE	/usr/include/ni/XnLog.h	/^	XN_LOG_VERBOSE,$/;"	e	enum:XnLogSeverity
XN_LOG_WARNING	/usr/include/ni/XnLog.h	/^	XN_LOG_WARNING,$/;"	e	enum:XnLogSeverity
XN_LOG_WARNING_RETURN	/usr/include/ni/XnLog.h	/^	#define XN_LOG_WARNING_RETURN(/;"	d
XN_LOG_WRITE_ALL	/usr/include/ni/XnLog.h	/^	XN_LOG_WRITE_ALL,$/;"	e	enum:__anon3
XN_LOG_WRITE_MASKS	/usr/include/ni/XnLog.h	/^	XN_LOG_WRITE_MASKS$/;"	e	enum:__anon3
XN_LOG_WRITE_NONE	/usr/include/ni/XnLog.h	/^	XN_LOG_WRITE_NONE,$/;"	e	enum:__anon3
XN_MAINTENANCE_VERSION	/usr/include/ni/XnVersion.h	/^#define XN_MAINTENANCE_VERSION /;"	d
XN_MAJOR_VERSION	/usr/include/ni/XnVersion.h	/^#define XN_MAJOR_VERSION /;"	d
XN_MASK_LOG	/usr/include/ni/XnLog.h	/^#define XN_MASK_LOG	/;"	d
XN_MASK_OPEN_NI	/usr/include/ni/XnOpenNI.h	/^#define XN_MASK_OPEN_NI /;"	d
XN_MASK_OS	/usr/include/ni/XnOS.h	/^#define XN_MASK_OS /;"	d
XN_MASK_RETVAL_CHECKS	/usr/include/ni/XnLog.h	/^#define XN_MASK_RETVAL_CHECKS /;"	d
XN_MASK_SCHEDULER	/usr/include/ni/XnScheduler.h	/^#define XN_MASK_SCHEDULER /;"	d
XN_MAX	/usr/include/ni/XnPlatform.h	/^#define XN_MAX(/;"	d
XN_MAX_CREATION_INFO_LENGTH	/usr/include/ni/XnTypes.h	/^#define XN_MAX_CREATION_INFO_LENGTH	/;"	d
XN_MAX_INT16	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_INT16 /;"	d
XN_MAX_INT32	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_INT32 /;"	d
XN_MAX_INT64	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_INT64 /;"	d
XN_MAX_INT8	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_INT8 /;"	d
XN_MAX_LICENSE_LENGTH	/usr/include/ni/XnTypes.h	/^#define XN_MAX_LICENSE_LENGTH	/;"	d
XN_MAX_NAME_LENGTH	/usr/include/ni/XnTypes.h	/^#define XN_MAX_NAME_LENGTH	/;"	d
XN_MAX_OS_NAME_LENGTH	/usr/include/ni/XnOS.h	/^#define XN_MAX_OS_NAME_LENGTH /;"	d
XN_MAX_UINT16	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_UINT16 /;"	d
XN_MAX_UINT32	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_UINT32 /;"	d
XN_MAX_UINT64	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_UINT64 /;"	d
XN_MAX_UINT8	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MAX_UINT8 /;"	d
XN_MIN	/usr/include/ni/XnPlatform.h	/^#define XN_MIN(/;"	d
XN_MINOR_VERSION	/usr/include/ni/XnVersion.h	/^#define XN_MINOR_VERSION /;"	d
XN_MIN_INT16	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MIN_INT16 /;"	d
XN_MIN_INT32	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MIN_INT32 /;"	d
XN_MIN_INT64	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MIN_INT64 /;"	d
XN_MIN_INT8	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_MIN_INT8 /;"	d
XN_MOCK_NODE_NAME	/usr/include/ni/XnInternalDefs.h	/^#define XN_MOCK_NODE_NAME /;"	d
XN_MODULE_C_FUNCTIONS_H_	/usr/include/ni/XnModuleCFunctions.h	/^#define XN_MODULE_C_FUNCTIONS_H_$/;"	d
XN_MODULE_FUNC_TYPE	/usr/include/ni/XnModuleCppRegistratration.h	/^	#define XN_MODULE_FUNC_TYPE /;"	d
XN_MODULE_GET_EXPORTED_NODES_COUNT	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_MODULE_FUNC_TYPE XnUInt32 XN_C_DECL XN_MODULE_GET_EXPORTED_NODES_COUNT()$/;"	f	signature:()
XN_MODULE_GET_EXPORTED_NODES_COUNT	/usr/include/ni/XnModuleInterface.h	/^#define XN_MODULE_GET_EXPORTED_NODES_COUNT	/;"	d
XN_MODULE_GET_EXPORTED_NODES_ENTRY_POINTS	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_MODULE_FUNC_TYPE XnStatus XN_C_DECL XN_MODULE_GET_EXPORTED_NODES_ENTRY_POINTS(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)$/;"	f	signature:(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)
XN_MODULE_GET_EXPORTED_NODES_ENTRY_POINTS	/usr/include/ni/XnModuleInterface.h	/^#define XN_MODULE_GET_EXPORTED_NODES_ENTRY_POINTS	/;"	d
XN_MODULE_GET_OPEN_NI_VERSION	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_MODULE_FUNC_TYPE void XN_C_DECL XN_MODULE_GET_OPEN_NI_VERSION(XnVersion* pVersion)$/;"	f	signature:(XnVersion* pVersion)
XN_MODULE_GET_OPEN_NI_VERSION	/usr/include/ni/XnModuleInterface.h	/^#define XN_MODULE_GET_OPEN_NI_VERSION	/;"	d
XN_MODULE_LOAD	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_MODULE_FUNC_TYPE XnStatus XN_C_DECL XN_MODULE_LOAD()$/;"	f	signature:()
XN_MODULE_LOAD	/usr/include/ni/XnModuleInterface.h	/^#define XN_MODULE_LOAD	/;"	d
XN_MODULE_UNLOAD	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_MODULE_FUNC_TYPE void XN_C_DECL XN_MODULE_UNLOAD()$/;"	f	signature:()
XN_MODULE_UNLOAD	/usr/include/ni/XnModuleInterface.h	/^#define XN_MODULE_UNLOAD	/;"	d
XN_MUTEX_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	XnMutex* XN_MUTEX_HANDLE;$/;"	t
XN_NETWORK_HOST_PORT_SEP	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_NETWORK_HOST_PORT_SEP /;"	d
XN_NEW	/usr/include/ni/XnOS.h	/^			#define XN_NEW(/;"	d
XN_NEW	/usr/include/ni/XnOS.h	/^		#undef XN_NEW$/;"	d
XN_NEW	/usr/include/ni/XnOS.h	/^	#define XN_NEW(/;"	d
XN_NEW_ARR	/usr/include/ni/XnOS.h	/^		#define XN_NEW_ARR(/;"	d
XN_NEW_ARR	/usr/include/ni/XnOS.h	/^		#undef XN_NEW_ARR$/;"	d
XN_NEW_ARR	/usr/include/ni/XnOS.h	/^#define XN_NEW_ARR(/;"	d
XN_NEW_LINE_SEP	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_NEW_LINE_SEP /;"	d
XN_NODE_TYPE_AUDIO	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_AUDIO = 4,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_CODEC	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_CODEC = 12,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_DEPTH	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_DEPTH = 2,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_DEVICE	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_DEVICE = 1,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_FIRST_EXTENSION	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_FIRST_EXTENSION,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_GENERATOR	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_GENERATOR = 14,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_GESTURE	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_GESTURE = 9,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_HANDS	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_HANDS = 11,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_IMAGE	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_IMAGE = 3,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_INVALID	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_INVALID = -1,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_IR	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_IR = 5,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_MAP_GENERATOR	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_MAP_GENERATOR = 15,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_PLAYER	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_PLAYER = 8,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_PRODUCTION_NODE	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_PRODUCTION_NODE = 13,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_RECORDER	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_RECORDER = 7,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_SCENE	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_SCENE = 10,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_TYPE_USER	/usr/include/ni/XnTypes.h	/^	XN_NODE_TYPE_USER = 6,$/;"	e	enum:XnPredefinedProductionNodeType
XN_NODE_WAIT_FOR_DATA_TIMEOUT	/usr/include/ni/XnTypes.h	/^#define XN_NODE_WAIT_FOR_DATA_TIMEOUT	/;"	d
XN_OS_FILE_APPEND	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_APPEND	/;"	d
XN_OS_FILE_AUTO_FLUSH	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_AUTO_FLUSH	/;"	d
XN_OS_FILE_CREATE_NEW_ONLY	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_CREATE_NEW_ONLY	/;"	d
XN_OS_FILE_READ	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_READ	/;"	d
XN_OS_FILE_TRUNCATE	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_TRUNCATE	/;"	d
XN_OS_FILE_WRITE	/usr/include/ni/XnOS.h	/^#define XN_OS_FILE_WRITE	/;"	d
XN_OS_NETWORK_LOCAL_HOST	/usr/include/ni/XnOS.h	/^#define XN_OS_NETWORK_LOCAL_HOST	/;"	d
XN_OS_SEEK_CUR	/usr/include/ni/XnOS.h	/^	XN_OS_SEEK_CUR,$/;"	e	enum:__anon5
XN_OS_SEEK_END	/usr/include/ni/XnOS.h	/^	XN_OS_SEEK_END$/;"	e	enum:__anon5
XN_OS_SEEK_SET	/usr/include/ni/XnOS.h	/^	XN_OS_SEEK_SET = 0,$/;"	e	enum:__anon5
XN_OS_TCP_SOCKET	/usr/include/ni/XnOS.h	/^	XN_OS_TCP_SOCKET$/;"	e	enum:__anon6
XN_OS_UDP_SOCKET	/usr/include/ni/XnOS.h	/^	XN_OS_UDP_SOCKET = 0,$/;"	e	enum:__anon6
XN_PACK_GENERAL_BUFFER	/usr/include/ni/XnGeneralBuffer.h	/^#define XN_PACK_GENERAL_BUFFER(/;"	d
XN_PIXEL_FORMAT_GRAYSCALE_16_BIT	/usr/include/ni/XnTypes.h	/^	XN_PIXEL_FORMAT_GRAYSCALE_16_BIT = 4,$/;"	e	enum:XnPixelFormat
XN_PIXEL_FORMAT_GRAYSCALE_8_BIT	/usr/include/ni/XnTypes.h	/^	XN_PIXEL_FORMAT_GRAYSCALE_8_BIT = 3,$/;"	e	enum:XnPixelFormat
XN_PIXEL_FORMAT_MJPEG	/usr/include/ni/XnTypes.h	/^	XN_PIXEL_FORMAT_MJPEG = 5,$/;"	e	enum:XnPixelFormat
XN_PIXEL_FORMAT_RGB24	/usr/include/ni/XnTypes.h	/^	XN_PIXEL_FORMAT_RGB24 = 1,$/;"	e	enum:XnPixelFormat
XN_PIXEL_FORMAT_YUV422	/usr/include/ni/XnTypes.h	/^	XN_PIXEL_FORMAT_YUV422 = 2,$/;"	e	enum:XnPixelFormat
XN_PLATFORM	/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h	/^#define XN_PLATFORM /;"	d
XN_PLATFORM	/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h	/^#undef XN_PLATFORM$/;"	d
XN_PLATFORM	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_PLATFORM /;"	d
XN_PLATFORM	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM /;"	d
XN_PLATFORM	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#undef XN_PLATFORM$/;"	d
XN_PLATFORM_ARC	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_ARC /;"	d
XN_PLATFORM_ENDIAN_TYPE	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_PLATFORM_ENDIAN_TYPE /;"	d
XN_PLATFORM_FILES_ONLY	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_FILES_ONLY /;"	d
XN_PLATFORM_HAS_BUILTIN_SEMUN	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM_HAS_BUILTIN_SEMUN$/;"	d
XN_PLATFORM_HAS_NO_CLOCK_GETTIME	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM_HAS_NO_CLOCK_GETTIME$/;"	d
XN_PLATFORM_HAS_NO_SCHED_PARAM	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM_HAS_NO_SCHED_PARAM$/;"	d
XN_PLATFORM_HAS_NO_TIMED_OPS	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM_HAS_NO_TIMED_OPS$/;"	d
XN_PLATFORM_IS_BIG_ENDIAN	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_IS_BIG_ENDIAN /;"	d
XN_PLATFORM_IS_LITTLE_ENDIAN	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_IS_LITTLE_ENDIAN /;"	d
XN_PLATFORM_LINUX_ARM	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_LINUX_ARM /;"	d
XN_PLATFORM_LINUX_X86	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_LINUX_X86 /;"	d
XN_PLATFORM_MACOSX	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_MACOSX /;"	d
XN_PLATFORM_PS3	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_PS3 /;"	d
XN_PLATFORM_STRING	/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h	/^#define XN_PLATFORM_STRING /;"	d
XN_PLATFORM_STRING	/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h	/^#undef XN_PLATFORM_STRING$/;"	d
XN_PLATFORM_STRING	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_PLATFORM_STRING /;"	d
XN_PLATFORM_STRING	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_PLATFORM_STRING /;"	d
XN_PLATFORM_STRING	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#undef XN_PLATFORM_STRING$/;"	d
XN_PLATFORM_SUPPORTS_DYNAMIC_LIBS	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_PLATFORM_SUPPORTS_DYNAMIC_LIBS /;"	d
XN_PLATFORM_USE_ARC_VAARGS_STYLE	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_USE_ARC_VAARGS_STYLE /;"	d
XN_PLATFORM_USE_GCC_VAARGS_STYLE	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_USE_GCC_VAARGS_STYLE /;"	d
XN_PLATFORM_USE_NO_VAARGS	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_USE_NO_VAARGS /;"	d
XN_PLATFORM_USE_WIN32_VAARGS_STYLE	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_USE_WIN32_VAARGS_STYLE /;"	d
XN_PLATFORM_VAARGS_TYPE	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_PLATFORM_VAARGS_TYPE /;"	d
XN_PLATFORM_WII	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_WII /;"	d
XN_PLATFORM_WIN32	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_WIN32 /;"	d
XN_PLATFORM_XBOX360	/usr/include/ni/XnPlatform.h	/^#define XN_PLATFORM_XBOX360 /;"	d
XN_PLAYBACK_SPEED_FASTEST	/usr/include/ni/XnTypes.h	/^#define XN_PLAYBACK_SPEED_FASTEST	/;"	d
XN_PLAYER_SEEK_CUR	/usr/include/ni/XnTypes.h	/^	XN_PLAYER_SEEK_CUR = 1,$/;"	e	enum:XnPlayerSeekOrigin
XN_PLAYER_SEEK_END	/usr/include/ni/XnTypes.h	/^	XN_PLAYER_SEEK_END = 2,$/;"	e	enum:XnPlayerSeekOrigin
XN_PLAYER_SEEK_SET	/usr/include/ni/XnTypes.h	/^	XN_PLAYER_SEEK_SET = 0,$/;"	e	enum:XnPlayerSeekOrigin
XN_POWER_LINE_FREQUENCY_50_HZ	/usr/include/ni/XnTypes.h	/^	XN_POWER_LINE_FREQUENCY_50_HZ = 50,$/;"	e	enum:XnPowerLineFrequency
XN_POWER_LINE_FREQUENCY_60_HZ	/usr/include/ni/XnTypes.h	/^	XN_POWER_LINE_FREQUENCY_60_HZ = 60,$/;"	e	enum:XnPowerLineFrequency
XN_POWER_LINE_FREQUENCY_OFF	/usr/include/ni/XnTypes.h	/^	XN_POWER_LINE_FREQUENCY_OFF = 0,$/;"	e	enum:XnPowerLineFrequency
XN_PREPARE_VAR16_IN_BUFFER	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_PREPARE_VAR16_IN_BUFFER(/;"	d
XN_PREPARE_VAR32_IN_BUFFER	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_PREPARE_VAR32_IN_BUFFER(/;"	d
XN_PREPARE_VAR64_IN_BUFFER	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_PREPARE_VAR64_IN_BUFFER(/;"	d
XN_PREPARE_VAR_FLOAT_IN_BUFFER	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_PREPARE_VAR_FLOAT_IN_BUFFER(/;"	d
XN_PRIORITY_CRITICAL	/usr/include/ni/XnOS.h	/^	XN_PRIORITY_CRITICAL$/;"	e	enum:XnThreadPriority
XN_PRIORITY_HIGH	/usr/include/ni/XnOS.h	/^	XN_PRIORITY_HIGH,$/;"	e	enum:XnThreadPriority
XN_PRIORITY_LOW	/usr/include/ni/XnOS.h	/^	XN_PRIORITY_LOW,$/;"	e	enum:XnThreadPriority
XN_PRIORITY_NORMAL	/usr/include/ni/XnOS.h	/^	XN_PRIORITY_NORMAL,$/;"	e	enum:XnThreadPriority
XN_PROCESS_ID	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef pid_t XN_PROCESS_ID;$/;"	t
XN_PROFILING_END_FUNCTION	/usr/include/ni/XnProfiling.h	/^#define XN_PROFILING_END_FUNCTION	/;"	d
XN_PROFILING_END_SECTION	/usr/include/ni/XnProfiling.h	/^#define XN_PROFILING_END_SECTION	/;"	d
XN_PROFILING_START_FUNCTION	/usr/include/ni/XnProfiling.h	/^#define XN_PROFILING_START_FUNCTION	/;"	d
XN_PROFILING_START_MT_SECTION	/usr/include/ni/XnProfiling.h	/^#define XN_PROFILING_START_MT_SECTION(/;"	d
XN_PROFILING_START_SECTION	/usr/include/ni/XnProfiling.h	/^#define XN_PROFILING_START_SECTION(/;"	d
XN_PROP_BYTES_PER_PIXEL	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_BYTES_PER_PIXEL /;"	d
XN_PROP_CROPPING	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_CROPPING /;"	d
XN_PROP_DEVICE_MAX_DEPTH	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_DEVICE_MAX_DEPTH /;"	d
XN_PROP_FIELD_OF_VIEW	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_FIELD_OF_VIEW /;"	d
XN_PROP_FRAME_ID	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_FRAME_ID /;"	d
XN_PROP_GESTURE_PROGRESS	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_GESTURE_PROGRESS /;"	d
XN_PROP_GESTURE_RECOGNIZED	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_GESTURE_RECOGNIZED /;"	d
XN_PROP_IS_GENERATING	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_IS_GENERATING /;"	d
XN_PROP_MAP_OUTPUT_MODE	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_MAP_OUTPUT_MODE /;"	d
XN_PROP_MIRROR	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_MIRROR /;"	d
XN_PROP_NEWDATA	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_NEWDATA /;"	d
XN_PROP_PIXEL_FORMAT	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_PIXEL_FORMAT /;"	d
XN_PROP_STATE_READY	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_STATE_READY /;"	d
XN_PROP_SUPPORTED_MAP_OUTPUT_MODES	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_SUPPORTED_MAP_OUTPUT_MODES /;"	d
XN_PROP_SUPPORTED_MAP_OUTPUT_MODES_COUNT	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_SUPPORTED_MAP_OUTPUT_MODES_COUNT /;"	d
XN_PROP_SUPPORTED_PIXEL_FORMATS	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_SUPPORTED_PIXEL_FORMATS /;"	d
XN_PROP_SUPPORTED_USER_POSITIONS_COUNT	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_SUPPORTED_USER_POSITIONS_COUNT /;"	d
XN_PROP_TIMESTAMP	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_TIMESTAMP /;"	d
XN_PROP_USER_POSITIONS	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_USER_POSITIONS /;"	d
XN_PROP_WAVE_OUTPUT_MODE	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_WAVE_OUTPUT_MODE /;"	d
XN_PROP_WAVE_SUPPORTED_OUTPUT_MODES	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_WAVE_SUPPORTED_OUTPUT_MODES /;"	d
XN_PROP_WAVE_SUPPORTED_OUTPUT_MODES_COUNT	/usr/include/ni/XnPropNames.h	/^#define XN_PROP_WAVE_SUPPORTED_OUTPUT_MODES_COUNT /;"	d
XN_QCIF_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_QCIF_X_RES	/;"	d
XN_QCIF_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_QCIF_Y_RES	/;"	d
XN_QQVGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_QQVGA_X_RES	/;"	d
XN_QQVGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_QQVGA_Y_RES	/;"	d
XN_QVGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_QVGA_X_RES	/;"	d
XN_QVGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_QVGA_Y_RES	/;"	d
XN_RECORD_MEDIUM_FILE	/usr/include/ni/XnTypes.h	/^	XN_RECORD_MEDIUM_FILE = 0,$/;"	e	enum:XnRecordMedium
XN_RES_1080P	/usr/include/ni/XnTypes.h	/^	XN_RES_1080P = 10,$/;"	e	enum:XnResolution
XN_RES_240P	/usr/include/ni/XnTypes.h	/^	XN_RES_240P = 12,$/;"	e	enum:XnResolution
XN_RES_480P	/usr/include/ni/XnTypes.h	/^	XN_RES_480P = 15,$/;"	e	enum:XnResolution
XN_RES_576P	/usr/include/ni/XnTypes.h	/^	XN_RES_576P = 16,$/;"	e	enum:XnResolution
XN_RES_720P	/usr/include/ni/XnTypes.h	/^	XN_RES_720P = 7,$/;"	e	enum:XnResolution
XN_RES_CGA	/usr/include/ni/XnTypes.h	/^	XN_RES_CGA = 2,$/;"	e	enum:XnResolution
XN_RES_CIF	/usr/include/ni/XnTypes.h	/^	XN_RES_CIF = 13,$/;"	e	enum:XnResolution
XN_RES_CUSTOM	/usr/include/ni/XnTypes.h	/^	XN_RES_CUSTOM = 0,$/;"	e	enum:XnResolution
XN_RES_DV	/usr/include/ni/XnTypes.h	/^	XN_RES_DV = 17,$/;"	e	enum:XnResolution
XN_RES_QCIF	/usr/include/ni/XnTypes.h	/^	XN_RES_QCIF = 11,$/;"	e	enum:XnResolution
XN_RES_QQVGA	/usr/include/ni/XnTypes.h	/^	XN_RES_QQVGA = 1,$/;"	e	enum:XnResolution
XN_RES_QVGA	/usr/include/ni/XnTypes.h	/^	XN_RES_QVGA = 3,$/;"	e	enum:XnResolution
XN_RES_SVGA	/usr/include/ni/XnTypes.h	/^	XN_RES_SVGA = 5,$/;"	e	enum:XnResolution
XN_RES_SXGA	/usr/include/ni/XnTypes.h	/^	XN_RES_SXGA = 8,$/;"	e	enum:XnResolution
XN_RES_UXGA	/usr/include/ni/XnTypes.h	/^	XN_RES_UXGA = 9,$/;"	e	enum:XnResolution
XN_RES_VGA	/usr/include/ni/XnTypes.h	/^	XN_RES_VGA = 4,$/;"	e	enum:XnResolution
XN_RES_WVGA	/usr/include/ni/XnTypes.h	/^	XN_RES_WVGA = 14,$/;"	e	enum:XnResolution
XN_RES_XGA	/usr/include/ni/XnTypes.h	/^	XN_RES_XGA = 6,$/;"	e	enum:XnResolution
XN_RET_IF_NULL	/usr/include/ni/XnMacros.h	/^#define XN_RET_IF_NULL(/;"	d
XN_SAMPLE_RATE_11K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_11K = 11025,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_12K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_12K = 12000,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_16K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_16K = 16000,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_22K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_22K = 22050,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_24K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_24K = 24000,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_32K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_32K = 32000,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_44K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_44K = 44100,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_48K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_48K = 48000,$/;"	e	enum:XnSampleRate
XN_SAMPLE_RATE_8K	/usr/include/ni/XnTypes.h	/^	XN_SAMPLE_RATE_8K = 8000,$/;"	e	enum:XnSampleRate
XN_SEMAPHORE_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef struct _XnSemaphore *XN_SEMAPHORE_HANDLE;$/;"	t	typeref:struct:_XnSemaphore
XN_SETBITMASK	/usr/include/ni/XnMacros.h	/^#define XN_SETBITMASK(/;"	d
XN_SHARED_LIBRARY_POSTFIX	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_SHARED_LIBRARY_POSTFIX /;"	d
XN_SHARED_LIBRARY_PREFIX	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define XN_SHARED_LIBRARY_PREFIX /;"	d
XN_SHARED_MEMORY_HANDLE	/usr/include/ni/XnOS.h	/^typedef struct XnOSSharedMemory XnOSSharedMemory, *XN_SHARED_MEMORY_HANDLE;$/;"	t	typeref:struct:
XN_SKEL_HEAD	/usr/include/ni/XnTypes.h	/^	XN_SKEL_HEAD			= 1,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_ANKLE	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_ANKLE		=19,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_COLLAR	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_COLLAR		= 5,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_ELBOW	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_ELBOW		= 7,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_FINGERTIP	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_FINGERTIP	=10,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_FOOT	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_FOOT		=20,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_HAND	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_HAND		= 9,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_HIP	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_HIP		=17,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_KNEE	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_KNEE		=18,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_SHOULDER	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_SHOULDER	= 6,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_LEFT_WRIST	/usr/include/ni/XnTypes.h	/^	XN_SKEL_LEFT_WRIST		= 8,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_NECK	/usr/include/ni/XnTypes.h	/^	XN_SKEL_NECK			= 2,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_PROFILE_ALL	/usr/include/ni/XnTypes.h	/^	XN_SKEL_PROFILE_ALL			= 2,$/;"	e	enum:XnSkeletonProfile
XN_SKEL_PROFILE_HEAD_HANDS	/usr/include/ni/XnTypes.h	/^	XN_SKEL_PROFILE_HEAD_HANDS	= 5,$/;"	e	enum:XnSkeletonProfile
XN_SKEL_PROFILE_LOWER	/usr/include/ni/XnTypes.h	/^	XN_SKEL_PROFILE_LOWER		= 4,$/;"	e	enum:XnSkeletonProfile
XN_SKEL_PROFILE_NONE	/usr/include/ni/XnTypes.h	/^	XN_SKEL_PROFILE_NONE		= 1,$/;"	e	enum:XnSkeletonProfile
XN_SKEL_PROFILE_UPPER	/usr/include/ni/XnTypes.h	/^	XN_SKEL_PROFILE_UPPER		= 3,$/;"	e	enum:XnSkeletonProfile
XN_SKEL_RIGHT_ANKLE	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_ANKLE		=23,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_COLLAR	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_COLLAR	=11,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_ELBOW	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_ELBOW		=13,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_FINGERTIP	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_FINGERTIP	=16,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_FOOT	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_FOOT		=24	$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_HAND	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_HAND		=15,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_HIP	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_HIP		=21,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_KNEE	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_KNEE		=22,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_SHOULDER	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_SHOULDER	=12,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_RIGHT_WRIST	/usr/include/ni/XnTypes.h	/^	XN_SKEL_RIGHT_WRIST		=14,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_TORSO	/usr/include/ni/XnTypes.h	/^	XN_SKEL_TORSO			= 3,$/;"	e	enum:XnSkeletonJoint
XN_SKEL_WAIST	/usr/include/ni/XnTypes.h	/^	XN_SKEL_WAIST			= 4,$/;"	e	enum:XnSkeletonJoint
XN_SOCKET_HANDLE	/usr/include/ni/XnOS.h	/^typedef struct xnOSSocket* XN_SOCKET_HANDLE;$/;"	t	typeref:struct:xnOSSocket
XN_STATUS_CODE	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_CODE(/;"	d
XN_STATUS_GROUP	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_GROUP(/;"	d
XN_STATUS_MAKE	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MAKE(/;"	d
XN_STATUS_MESSAGE	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MESSAGE(/;"	d
XN_STATUS_MESSAGE	/usr/include/ni/XnStatusRegister.h	/^#define XN_STATUS_MESSAGE(/;"	d
XN_STATUS_MESSAGE	/usr/include/ni/XnStatusRegister.h	/^#undef XN_STATUS_MESSAGE$/;"	d
XN_STATUS_MESSAGE_MAP_END	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MESSAGE_MAP_END(/;"	d
XN_STATUS_MESSAGE_MAP_END_FROM	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MESSAGE_MAP_END_FROM(/;"	d
XN_STATUS_MESSAGE_MAP_END_FROM	/usr/include/ni/XnStatusRegister.h	/^#define XN_STATUS_MESSAGE_MAP_END_FROM(/;"	d
XN_STATUS_MESSAGE_MAP_END_FROM	/usr/include/ni/XnStatusRegister.h	/^#undef XN_STATUS_MESSAGE_MAP_END_FROM$/;"	d
XN_STATUS_MESSAGE_MAP_START	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MESSAGE_MAP_START(/;"	d
XN_STATUS_MESSAGE_MAP_START_FROM	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_MESSAGE_MAP_START_FROM(/;"	d
XN_STATUS_MESSAGE_MAP_START_FROM	/usr/include/ni/XnStatusRegister.h	/^#define XN_STATUS_MESSAGE_MAP_START_FROM(/;"	d
XN_STATUS_MESSAGE_MAP_START_FROM	/usr/include/ni/XnStatusRegister.h	/^#undef XN_STATUS_MESSAGE_MAP_START_FROM$/;"	d
XN_STATUS_OK	/usr/include/ni/XnStatus.h	/^#define XN_STATUS_OK /;"	d
XN_STATUS_REGISTER	/usr/include/ni/XnStatusRegister.h	/^#define XN_STATUS_REGISTER$/;"	d
XN_STDCALL	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_STDCALL /;"	d
XN_STRINGIFY	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_STRINGIFY(/;"	d
XN_STRINGIFY_HELPER	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_STRINGIFY_HELPER(/;"	d
XN_SVGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_SVGA_X_RES	/;"	d
XN_SVGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_SVGA_Y_RES	/;"	d
XN_SXGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_SXGA_X_RES	/;"	d
XN_SXGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_SXGA_Y_RES	/;"	d
XN_THREAD_HANDLE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	pthread_t* XN_THREAD_HANDLE;$/;"	t
XN_THREAD_ID	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	pthread_t XN_THREAD_ID;$/;"	t
XN_THREAD_PARAM	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef	void* XN_THREAD_PARAM;$/;"	t
XN_THREAD_PROC	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define	XN_THREAD_PROC /;"	d
XN_THREAD_PROC_PROTO	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef void* (*XN_THREAD_PROC_PROTO)(void* arg);$/;"	t
XN_THREAD_PROC_RETURN	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define	XN_THREAD_PROC_RETURN(/;"	d
XN_THREAD_STATIC	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_THREAD_STATIC /;"	d
XN_THREAD_STATIC	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define XN_THREAD_STATIC /;"	d
XN_THREAD_STATIC	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#undef XN_THREAD_STATIC$/;"	d
XN_TIMESTAMP	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define XN_TIMESTAMP /;"	d
XN_USB_CONTROL_TYPE_CLASS	/usr/include/ni/XnUSB.h	/^	XN_USB_CONTROL_TYPE_CLASS,$/;"	e	enum:__anon11
XN_USB_CONTROL_TYPE_STANDARD	/usr/include/ni/XnUSB.h	/^	XN_USB_CONTROL_TYPE_STANDARD = 0,$/;"	e	enum:__anon11
XN_USB_CONTROL_TYPE_VENDOR	/usr/include/ni/XnUSB.h	/^	XN_USB_CONTROL_TYPE_VENDOR,$/;"	e	enum:__anon11
XN_USB_DEVICE_FULL_SPEED	/usr/include/ni/XnUSB.h	/^	XN_USB_DEVICE_FULL_SPEED,$/;"	e	enum:__anon8
XN_USB_DEVICE_HIGH_SPEED	/usr/include/ni/XnUSB.h	/^	XN_USB_DEVICE_HIGH_SPEED,$/;"	e	enum:__anon8
XN_USB_DEVICE_LOW_SPEED	/usr/include/ni/XnUSB.h	/^	XN_USB_DEVICE_LOW_SPEED = 0,$/;"	e	enum:__anon8
XN_USB_DEV_HANDLE	/usr/include/ni/XnUSB.h	/^typedef XnUSBDeviceHandle*  XN_USB_DEV_HANDLE;$/;"	t
XN_USB_DIRECTION_IN	/usr/include/ni/XnUSB.h	/^	XN_USB_DIRECTION_IN = 0,$/;"	e	enum:__anon10
XN_USB_DIRECTION_OUT	/usr/include/ni/XnUSB.h	/^	XN_USB_DIRECTION_OUT,$/;"	e	enum:__anon10
XN_USB_EP_BULK	/usr/include/ni/XnUSB.h	/^	XN_USB_EP_BULK = 0,$/;"	e	enum:__anon9
XN_USB_EP_HANDLE	/usr/include/ni/XnUSB.h	/^typedef XnUSBEndPointHandle* XN_USB_EP_HANDLE;$/;"	t
XN_USB_EP_INTERRUPT	/usr/include/ni/XnUSB.h	/^	XN_USB_EP_INTERRUPT,$/;"	e	enum:__anon9
XN_USB_EP_ISOCHRONOUS	/usr/include/ni/XnUSB.h	/^	XN_USB_EP_ISOCHRONOUS,$/;"	e	enum:__anon9
XN_USB_EVENT_DEVICE_CONNECT	/usr/include/ni/XnUSB.h	/^	XN_USB_EVENT_DEVICE_CONNECT = 0,$/;"	e	enum:__anon12
XN_USB_EVENT_DEVICE_DISCONNECT	/usr/include/ni/XnUSB.h	/^	XN_USB_EVENT_DEVICE_DISCONNECT,$/;"	e	enum:__anon12
XN_UXGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_UXGA_X_RES	/;"	d
XN_UXGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_UXGA_Y_RES	/;"	d
XN_VALIDATE_ALIGNED_ALLOC	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_ALIGNED_ALLOC(/;"	d
XN_VALIDATE_ALIGNED_CALLOC	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_ALIGNED_CALLOC(/;"	d
XN_VALIDATE_ALLOC	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_ALLOC(/;"	d
XN_VALIDATE_ALLOC_PTR	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_ALLOC_PTR(/;"	d
XN_VALIDATE_CALLOC	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_CALLOC(/;"	d
XN_VALIDATE_FILE_EXISTS	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_FILE_EXISTS(/;"	d
XN_VALIDATE_FILE_EXISTS_RET	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_FILE_EXISTS_RET(/;"	d
XN_VALIDATE_GENERAL_BUFFER_TYPE	/usr/include/ni/XnGeneralBuffer.h	/^#define XN_VALIDATE_GENERAL_BUFFER_TYPE(/;"	d
XN_VALIDATE_INPUT_PTR	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_INPUT_PTR(/;"	d
XN_VALIDATE_LOCK_MUTEX	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_LOCK_MUTEX(/;"	d
XN_VALIDATE_NEW	/usr/include/ni/XnOS.h	/^	#define XN_VALIDATE_NEW(/;"	d
XN_VALIDATE_NEW_AND_INIT	/usr/include/ni/XnOS.h	/^	#define XN_VALIDATE_NEW_AND_INIT(/;"	d
XN_VALIDATE_OUTPUT_PTR	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_OUTPUT_PTR(/;"	d
XN_VALIDATE_PTR	/usr/include/ni/XnMacros.h	/^#define XN_VALIDATE_PTR(/;"	d
XN_VALIDATE_READ_INI_DOUBLE	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_READ_INI_DOUBLE(/;"	d
XN_VALIDATE_READ_INI_FLOAT	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_READ_INI_FLOAT(/;"	d
XN_VALIDATE_READ_INI_INT	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_READ_INI_INT(/;"	d
XN_VALIDATE_READ_INI_STR	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_READ_INI_STR(/;"	d
XN_VALIDATE_STRN_COPY	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_STRN_COPY(/;"	d
XN_VALIDATE_STR_APPEND	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_STR_APPEND(/;"	d
XN_VALIDATE_STR_COPY	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_STR_COPY(/;"	d
XN_VALIDATE_STR_PREFIX	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_STR_PREFIX(/;"	d
XN_VALIDATE_UNLOCK_MUTEX	/usr/include/ni/XnOS.h	/^#define XN_VALIDATE_UNLOCK_MUTEX(/;"	d
XN_VENDOR_OPEN_NI	/usr/include/ni/XnTypes.h	/^#define XN_VENDOR_OPEN_NI	/;"	d
XN_VERSION	/usr/include/ni/XnVersion.h	/^#define XN_VERSION /;"	d
XN_VERSION_STRING	/usr/include/ni/XnVersion.h	/^#define XN_VERSION_STRING /;"	d
XN_VGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_VGA_X_RES	/;"	d
XN_VGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_VGA_Y_RES	/;"	d
XN_WAIT_INFINITE	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define	XN_WAIT_INFINITE /;"	d
XN_WVGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_WVGA_X_RES	/;"	d
XN_WVGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_WVGA_Y_RES	/;"	d
XN_XGA_X_RES	/usr/include/ni/XnTypes.h	/^#define XN_XGA_X_RES	/;"	d
XN_XGA_Y_RES	/usr/include/ni/XnTypes.h	/^#define XN_XGA_Y_RES	/;"	d
XOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 XOffset() const { return m_map.Offset.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
XOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& XOffset() { return m_map.Offset.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
XRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 XRes() const { return m_map.Res.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
XRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& XRes() { return m_map.Res.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
XnAlgorithms	/usr/include/ni/XnAlgorithms.h	/^class XnAlgorithms$/;"	c
XnAlgorithms::BubbleSort	/usr/include/ni/XnAlgorithms.h	/^	static void BubbleSort(T elements[], XnUInt32 nCount)$/;"	f	class:XnAlgorithms	access:public	signature:(T elements[], XnUInt32 nCount)
XnAlgorithms::BubbleSort	/usr/include/ni/XnAlgorithms.h	/^	static void BubbleSort(T elements[], XnUInt32 nCount, Comparer comp)$/;"	f	class:XnAlgorithms	access:public	signature:(T elements[], XnUInt32 nCount, Comparer comp)
XnAllocationType	/usr/include/ni/XnOS.h	/^} XnAllocationType;$/;"	t	typeref:enum:__anon7
XnArray	/usr/include/ni/XnArray.h	/^	XnArray()$/;"	f	class:XnArray	access:public	signature:()
XnArray	/usr/include/ni/XnArray.h	/^	XnArray(const XnArray& other) : m_pData(NULL), m_nSize(0), m_nAllocatedSize(0)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
XnArray	/usr/include/ni/XnArray.h	/^class XnArray$/;"	c
XnArray::AddLast	/usr/include/ni/XnArray.h	/^	XnStatus AddLast(const T& val)$/;"	f	class:XnArray	access:public	signature:(const T& val)
XnArray::AddLast	/usr/include/ni/XnArray.h	/^	XnStatus AddLast(const T* aValues, XnUInt32 nCount)$/;"	f	class:XnArray	access:public	signature:(const T* aValues, XnUInt32 nCount)
XnArray::BASE_SIZE	/usr/include/ni/XnArray.h	/^	enum {BASE_SIZE = 8};$/;"	e	enum:XnArray::__anon2
XnArray::Clear	/usr/include/ni/XnArray.h	/^	void Clear()$/;"	f	class:XnArray	access:public	signature:()
XnArray::ConstIterator	/usr/include/ni/XnArray.h	/^	typedef const T* ConstIterator;$/;"	t	class:XnArray	access:public
XnArray::CopyFrom	/usr/include/ni/XnArray.h	/^	XnStatus CopyFrom(const XnArray& other)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
XnArray::GetAllocatedSize	/usr/include/ni/XnArray.h	/^	XnUInt32 GetAllocatedSize() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::GetData	/usr/include/ni/XnArray.h	/^	T* GetData()$/;"	f	class:XnArray	access:public	signature:()
XnArray::GetData	/usr/include/ni/XnArray.h	/^	const T* GetData() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::GetSize	/usr/include/ni/XnArray.h	/^	XnUInt32 GetSize() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::Init	/usr/include/ni/XnArray.h	/^	void Init()$/;"	f	class:XnArray	access:private	signature:()
XnArray::IsEmpty	/usr/include/ni/XnArray.h	/^	XnBool IsEmpty() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::Iterator	/usr/include/ni/XnArray.h	/^	typedef T* Iterator;$/;"	t	class:XnArray	access:public
XnArray::Reserve	/usr/include/ni/XnArray.h	/^	XnStatus Reserve(XnUInt32 nReservedSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nReservedSize)
XnArray::Set	/usr/include/ni/XnArray.h	/^	XnStatus Set(XnUInt32 nIndex, const T& val)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex, const T& val)
XnArray::Set	/usr/include/ni/XnArray.h	/^	XnStatus Set(XnUInt32 nIndex, const T& val, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex, const T& val, const T& fillVal)
XnArray::SetData	/usr/include/ni/XnArray.h	/^	XnStatus SetData(const T* pData, XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(const T* pData, XnUInt32 nSize)
XnArray::SetMinSize	/usr/include/ni/XnArray.h	/^	XnStatus SetMinSize(XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize)
XnArray::SetMinSize	/usr/include/ni/XnArray.h	/^	XnStatus SetMinSize(XnUInt32 nSize, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize, const T& fillVal)
XnArray::SetSize	/usr/include/ni/XnArray.h	/^	XnStatus SetSize(XnUInt32 nSize)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize)
XnArray::SetSize	/usr/include/ni/XnArray.h	/^	XnStatus SetSize(XnUInt32 nSize, const T& fillVal)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nSize, const T& fillVal)
XnArray::XnArray	/usr/include/ni/XnArray.h	/^	XnArray()$/;"	f	class:XnArray	access:public	signature:()
XnArray::XnArray	/usr/include/ni/XnArray.h	/^	XnArray(const XnArray& other) : m_pData(NULL), m_nSize(0), m_nAllocatedSize(0)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
XnArray::begin	/usr/include/ni/XnArray.h	/^	ConstIterator begin() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::begin	/usr/include/ni/XnArray.h	/^	Iterator begin()$/;"	f	class:XnArray	access:public	signature:()
XnArray::end	/usr/include/ni/XnArray.h	/^	ConstIterator end() const$/;"	f	class:XnArray	access:public	signature:() const
XnArray::end	/usr/include/ni/XnArray.h	/^	Iterator end()$/;"	f	class:XnArray	access:public	signature:()
XnArray::m_nAllocatedSize	/usr/include/ni/XnArray.h	/^	XnUInt32 m_nAllocatedSize;$/;"	m	class:XnArray	access:private
XnArray::m_nSize	/usr/include/ni/XnArray.h	/^	XnUInt32 m_nSize;$/;"	m	class:XnArray	access:private
XnArray::m_pData	/usr/include/ni/XnArray.h	/^	T* m_pData;$/;"	m	class:XnArray	access:private
XnArray::operator =	/usr/include/ni/XnArray.h	/^	XnArray& operator=(const XnArray& other)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
XnArray::operator []	/usr/include/ni/XnArray.h	/^	T& operator[](XnUInt32 nIndex)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex)
XnArray::operator []	/usr/include/ni/XnArray.h	/^	const T& operator[](XnUInt32 nIndex) const$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex) const
XnArray::~XnArray	/usr/include/ni/XnArray.h	/^	virtual ~XnArray()$/;"	f	class:XnArray	access:public	signature:()
XnAudioMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnAudioMetaData$/;"	s
XnAudioMetaData	/usr/include/ni/XnTypes.h	/^} XnAudioMetaData;$/;"	t	typeref:struct:XnAudioMetaData
XnAudioMetaData::Wave	/usr/include/ni/XnTypes.h	/^	XnWaveOutputMode Wave;$/;"	m	struct:XnAudioMetaData	access:public
XnAudioMetaData::pData	/usr/include/ni/XnTypes.h	/^	const XnUInt8* pData;$/;"	m	struct:XnAudioMetaData	access:public
XnAudioMetaData::pOutput	/usr/include/ni/XnTypes.h	/^	XnOutputMetaData* pOutput;$/;"	m	struct:XnAudioMetaData	access:public
XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker(XN_CRITICAL_SECTION_HANDLE hCS) : m_hCS(hCS)$/;"	f	class:XnAutoCSLocker	access:public	signature:(XN_CRITICAL_SECTION_HANDLE hCS)
XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker(const XnAutoCSLocker& other) : m_hCS(other.m_hCS)$/;"	f	class:XnAutoCSLocker	access:public	signature:(const XnAutoCSLocker& other)
XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^class XnAutoCSLocker$/;"	c
XnAutoCSLocker::Lock	/usr/include/ni/XnOSCpp.h	/^	inline void Lock()$/;"	f	class:XnAutoCSLocker	access:private	signature:()
XnAutoCSLocker::Unlock	/usr/include/ni/XnOSCpp.h	/^	inline void Unlock()$/;"	f	class:XnAutoCSLocker	access:private	signature:()
XnAutoCSLocker::XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker(XN_CRITICAL_SECTION_HANDLE hCS) : m_hCS(hCS)$/;"	f	class:XnAutoCSLocker	access:public	signature:(XN_CRITICAL_SECTION_HANDLE hCS)
XnAutoCSLocker::XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker(const XnAutoCSLocker& other) : m_hCS(other.m_hCS)$/;"	f	class:XnAutoCSLocker	access:public	signature:(const XnAutoCSLocker& other)
XnAutoCSLocker::m_hCS	/usr/include/ni/XnOSCpp.h	/^	XN_CRITICAL_SECTION_HANDLE m_hCS;$/;"	m	class:XnAutoCSLocker	access:private
XnAutoCSLocker::operator =	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker& operator=(const XnAutoCSLocker& other)$/;"	f	class:XnAutoCSLocker	access:public	signature:(const XnAutoCSLocker& other)
XnAutoCSLocker::~XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline ~XnAutoCSLocker()$/;"	f	class:XnAutoCSLocker	access:public	signature:()
XnAutoMutexLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoMutexLocker(XN_MUTEX_HANDLE hMutex, XnUInt32 nMilliseconds) : m_hMutex(hMutex)$/;"	f	class:XnAutoMutexLocker	access:public	signature:(XN_MUTEX_HANDLE hMutex, XnUInt32 nMilliseconds)
XnAutoMutexLocker	/usr/include/ni/XnOSCpp.h	/^class XnAutoMutexLocker$/;"	c
XnAutoMutexLocker::GetStatus	/usr/include/ni/XnOSCpp.h	/^	XnStatus GetStatus() const $/;"	f	class:XnAutoMutexLocker	access:public	signature:() const
XnAutoMutexLocker::XnAutoMutexLocker	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoMutexLocker(XN_MUTEX_HANDLE hMutex, XnUInt32 nMilliseconds) : m_hMutex(hMutex)$/;"	f	class:XnAutoMutexLocker	access:public	signature:(XN_MUTEX_HANDLE hMutex, XnUInt32 nMilliseconds)
XnAutoMutexLocker::m_hMutex	/usr/include/ni/XnOSCpp.h	/^	XN_MUTEX_HANDLE m_hMutex;$/;"	m	class:XnAutoMutexLocker	access:private
XnAutoMutexLocker::m_nStatus	/usr/include/ni/XnOSCpp.h	/^	XnStatus m_nStatus;$/;"	m	class:XnAutoMutexLocker	access:private
XnAutoMutexLocker::~XnAutoMutexLocker	/usr/include/ni/XnOSCpp.h	/^	inline ~XnAutoMutexLocker()$/;"	f	class:XnAutoMutexLocker	access:public	signature:()
XnBaseNode	/usr/include/ni/XnBaseNode.h	/^typedef struct XnBaseNode$/;"	s
XnBaseNode	/usr/include/ni/XnBaseNode.h	/^} XnBaseNode;$/;"	t	typeref:struct:XnBaseNode
XnBaseNode::m_Data	/usr/include/ni/XnBaseNode.h	/^	XnValue m_Data;$/;"	m	struct:XnBaseNode	access:public
XnBaseNode::m_pNext	/usr/include/ni/XnBaseNode.h	/^	XnBaseNode* m_pNext;$/;"	m	struct:XnBaseNode	access:public
XnBaseNode::m_pPrevious	/usr/include/ni/XnBaseNode.h	/^	XnBaseNode* m_pPrevious;$/;"	m	struct:XnBaseNode	access:public
XnBitSet	/usr/include/ni/XnBitSet.h	/^	XnBitSet() : m_nSize(0) {}$/;"	f	class:XnBitSet	access:public	signature:()
XnBitSet	/usr/include/ni/XnBitSet.h	/^class XnBitSet$/;"	c
XnBitSet::Clear	/usr/include/ni/XnBitSet.h	/^	void Clear()$/;"	f	class:XnBitSet	access:public	signature:()
XnBitSet::GetData	/usr/include/ni/XnBitSet.h	/^	XnUInt32* GetData()$/;"	f	class:XnBitSet	access:public	signature:()
XnBitSet::GetData	/usr/include/ni/XnBitSet.h	/^	const XnUInt32* GetData() const$/;"	f	class:XnBitSet	access:public	signature:() const
XnBitSet::GetSize	/usr/include/ni/XnBitSet.h	/^	XnUInt32 GetSize() const$/;"	f	class:XnBitSet	access:public	signature:() const
XnBitSet::IsEmpty	/usr/include/ni/XnBitSet.h	/^	XnBool IsEmpty() const$/;"	f	class:XnBitSet	access:public	signature:() const
XnBitSet::IsSet	/usr/include/ni/XnBitSet.h	/^	XnBool IsSet(XnUInt32 nIndex) const$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nIndex) const
XnBitSet::Reserve	/usr/include/ni/XnBitSet.h	/^	XnStatus Reserve(XnUInt32 nBits)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nBits)
XnBitSet::Set	/usr/include/ni/XnBitSet.h	/^	XnStatus Set(XnUInt32 nIndex, XnBool bValue)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nIndex, XnBool bValue)
XnBitSet::SetData	/usr/include/ni/XnBitSet.h	/^	XnStatus SetData(const XnUInt32* pData, XnUInt32 nSizeInDwords)$/;"	f	class:XnBitSet	access:public	signature:(const XnUInt32* pData, XnUInt32 nSizeInDwords)
XnBitSet::SetSize	/usr/include/ni/XnBitSet.h	/^	XnStatus SetSize(XnUInt32 nBits)$/;"	f	class:XnBitSet	access:public	signature:(XnUInt32 nBits)
XnBitSet::XnBitSet	/usr/include/ni/XnBitSet.h	/^	XnBitSet() : m_nSize(0) {}$/;"	f	class:XnBitSet	access:public	signature:()
XnBitSet::m_array	/usr/include/ni/XnBitSet.h	/^	XnArray<XnUInt32> m_array;$/;"	m	class:XnBitSet	access:private
XnBitSet::m_nSize	/usr/include/ni/XnBitSet.h	/^	XnUInt32 m_nSize;$/;"	m	class:XnBitSet	access:private
XnBool	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned int		XnBool;$/;"	t
XnBoundingBox3D	/usr/include/ni/XnTypes.h	/^typedef struct XnBoundingBox3D$/;"	s
XnBoundingBox3D	/usr/include/ni/XnTypes.h	/^} XnBoundingBox3D;$/;"	t	typeref:struct:XnBoundingBox3D
XnBoundingBox3D::LeftBottomNear	/usr/include/ni/XnTypes.h	/^	XnPoint3D LeftBottomNear;$/;"	m	struct:XnBoundingBox3D	access:public
XnBoundingBox3D::RightTopFar	/usr/include/ni/XnTypes.h	/^	XnPoint3D RightTopFar;$/;"	m	struct:XnBoundingBox3D	access:public
XnCalibrationEnd	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnCalibrationEnd)(XnNodeHandle hNode, XnUserID user, XnBool bSuccess, void* pCookie);$/;"	t
XnCalibrationStart	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnCalibrationStart)(XnNodeHandle hNode, XnUserID user, void* pCookie);$/;"	t
XnCallback	/usr/include/ni/XnCallback.h	/^	XnCallback() : pFuncPtr(NULL), pCookie(NULL) {}$/;"	f	struct:XnCallback	access:public	signature:()
XnCallback	/usr/include/ni/XnCallback.h	/^	XnCallback(XnFuncPtr pFuncPtr, void* pCookie) : pFuncPtr(pFuncPtr), pCookie(pCookie) {}$/;"	f	struct:XnCallback	access:public	signature:(XnFuncPtr pFuncPtr, void* pCookie)
XnCallback	/usr/include/ni/XnCallback.h	/^struct XnCallback$/;"	s
XnCallback::Set	/usr/include/ni/XnCallback.h	/^	void Set(XnFuncPtr pFuncPtr, void* pCookie) { this->pFuncPtr = pFuncPtr; this->pCookie = pCookie; }$/;"	f	struct:XnCallback	access:public	signature:(XnFuncPtr pFuncPtr, void* pCookie)
XnCallback::XnCallback	/usr/include/ni/XnCallback.h	/^	XnCallback() : pFuncPtr(NULL), pCookie(NULL) {}$/;"	f	struct:XnCallback	access:public	signature:()
XnCallback::XnCallback	/usr/include/ni/XnCallback.h	/^	XnCallback(XnFuncPtr pFuncPtr, void* pCookie) : pFuncPtr(pFuncPtr), pCookie(pCookie) {}$/;"	f	struct:XnCallback	access:public	signature:(XnFuncPtr pFuncPtr, void* pCookie)
XnCallback::pCookie	/usr/include/ni/XnCallback.h	/^	void* pCookie;$/;"	m	struct:XnCallback	access:public
XnCallback::pFuncPtr	/usr/include/ni/XnCallback.h	/^	XnFuncPtr pFuncPtr;$/;"	m	struct:XnCallback	access:public
XnCallbackHandle	/usr/include/ni/XnTypes.h	/^typedef void* XnCallbackHandle;$/;"	t
XnChar	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	char				XnChar;$/;"	t
XnCodecID	/usr/include/ni/XnTypes.h	/^typedef XnUInt32 XnCodecID;$/;"	t
XnCompareFunction	/usr/include/ni/XnHash.h	/^	typedef XnInt32 (*XnCompareFunction)(const XnKey& key1, const XnKey& key2);$/;"	t	class:XnHash	access:public
XnConditionFunc	/usr/include/ni/XnOS.h	/^typedef XnBool (XN_CALLBACK_TYPE* XnConditionFunc)(void* pConditionData);$/;"	t
XnConfidence	/usr/include/ni/XnTypes.h	/^typedef XnFloat  XnConfidence;$/;"	t
XnContext	/usr/include/ni/XnTypes.h	/^typedef struct XnContext XnContext;$/;"	t	typeref:struct:XnContext
XnCropping	/usr/include/ni/XnTypes.h	/^typedef struct XnCropping$/;"	s
XnCropping	/usr/include/ni/XnTypes.h	/^} XnCropping;$/;"	t	typeref:struct:XnCropping
XnCropping::bEnabled	/usr/include/ni/XnTypes.h	/^	XnBool bEnabled;$/;"	m	struct:XnCropping	access:public
XnCropping::nXOffset	/usr/include/ni/XnTypes.h	/^	XnUInt16 nXOffset;$/;"	m	struct:XnCropping	access:public
XnCropping::nXSize	/usr/include/ni/XnTypes.h	/^	XnUInt16 nXSize;$/;"	m	struct:XnCropping	access:public
XnCropping::nYOffset	/usr/include/ni/XnTypes.h	/^	XnUInt16 nYOffset;$/;"	m	struct:XnCropping	access:public
XnCropping::nYSize	/usr/include/ni/XnTypes.h	/^	XnUInt16 nYSize;$/;"	m	struct:XnCropping	access:public
XnDefaultCompareFunction	/usr/include/ni/XnHash.h	/^static XnInt32 XnDefaultCompareFunction(const XnKey& key1, const XnKey& key2)$/;"	f	signature:(const XnKey& key1, const XnKey& key2)
XnDefaultHashFunction	/usr/include/ni/XnHash.h	/^static XnHashValue XnDefaultHashFunction(const XnKey& key)$/;"	f	signature:(const XnKey& key)
XnDepthMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnDepthMetaData$/;"	s
XnDepthMetaData	/usr/include/ni/XnTypes.h	/^} XnDepthMetaData;$/;"	t	typeref:struct:XnDepthMetaData
XnDepthMetaData::nZRes	/usr/include/ni/XnTypes.h	/^	XnDepthPixel nZRes;$/;"	m	struct:XnDepthMetaData	access:public
XnDepthMetaData::pData	/usr/include/ni/XnTypes.h	/^	const XnDepthPixel* pData;$/;"	m	struct:XnDepthMetaData	access:public
XnDepthMetaData::pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnDepthMetaData	access:public
XnDepthPixel	/usr/include/ni/XnTypes.h	/^typedef XnUInt16 XnDepthPixel;$/;"	t
XnDouble	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	double				XnDouble;$/;"	t
XnDump	/usr/include/ni/XnLog.h	/^typedef struct XnDump $/;"	s
XnDump	/usr/include/ni/XnLog.h	/^} XnDump;$/;"	t	typeref:struct:XnDump
XnDump::hFile	/usr/include/ni/XnLog.h	/^	XN_FILE_HANDLE hFile;$/;"	m	struct:XnDump	access:public
XnEnumerationErrors	/usr/include/ni/XnTypes.h	/^typedef struct XnEnumerationErrors XnEnumerationErrors;$/;"	t	typeref:struct:XnEnumerationErrors
XnEnumerationErrorsIterator	/usr/include/ni/XnEnumerationErrors.h	/^typedef struct XnModuleError* XnEnumerationErrorsIterator;$/;"	t	typeref:struct:XnModuleError
XnErrorCodeData	/usr/include/ni/XnStatusRegister.h	/^typedef struct XnErrorCodeData$/;"	s
XnErrorCodeData	/usr/include/ni/XnStatusRegister.h	/^} XnErrorCodeData;$/;"	t	typeref:struct:XnErrorCodeData
XnErrorCodeData::csMessage	/usr/include/ni/XnStatusRegister.h	/^	const XnChar* csMessage;$/;"	m	struct:XnErrorCodeData	access:public
XnErrorCodeData::csName	/usr/include/ni/XnStatusRegister.h	/^	const XnChar* csName;$/;"	m	struct:XnErrorCodeData	access:public
XnErrorCodeData::nCode	/usr/include/ni/XnStatusRegister.h	/^	XnUInt32 nCode;$/;"	m	struct:XnErrorCodeData	access:public
XnErrorGroup	/usr/include/ni/XnStatus.h	/^typedef enum XnErrorGroup$/;"	g
XnErrorGroup	/usr/include/ni/XnStatus.h	/^} XnErrorGroup;$/;"	t	typeref:enum:XnErrorGroup
XnErrorStateChangedHandler	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnErrorStateChangedHandler)(XnStatus errorState, void* pCookie);$/;"	t
XnEvent	/usr/include/ni/XnEvent.h	/^	XnEvent() : m_hLock(0) $/;"	f	class:XnEvent	access:public	signature:()
XnEvent	/usr/include/ni/XnEvent.h	/^class XnEvent : public XnEventInterface$/;"	c	inherits:XnEventInterface
XnEvent::ApplyListChanges	/usr/include/ni/XnEvent.h	/^	XnStatus ApplyListChanges()$/;"	f	class:XnEvent	access:protected	signature:()
XnEvent::Clear	/usr/include/ni/XnEvent.h	/^	XnStatus Clear()$/;"	f	class:XnEvent	access:public	signature:()
XnEvent::Register	/usr/include/ni/XnEvent.h	/^	XnStatus Register(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle)$/;"	f	class:XnEvent	access:public	signature:(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle)
XnEvent::Unregister	/usr/include/ni/XnEvent.h	/^	XnStatus Unregister(XnCallbackHandle handle)$/;"	f	class:XnEvent	access:public	signature:(XnCallbackHandle handle)
XnEvent::XnEvent	/usr/include/ni/XnEvent.h	/^	XnEvent() : m_hLock(0) $/;"	f	class:XnEvent	access:public	signature:()
XnEvent::m_Handlers	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_Handlers;$/;"	m	class:XnEvent	access:protected
XnEvent::m_ToBeAdded	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_ToBeAdded;$/;"	m	class:XnEvent	access:protected
XnEvent::m_ToBeRemoved	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_ToBeRemoved;$/;"	m	class:XnEvent	access:protected
XnEvent::m_hLock	/usr/include/ni/XnEvent.h	/^	XN_CRITICAL_SECTION_HANDLE m_hLock;$/;"	m	class:XnEvent	access:protected
XnEvent::~XnEvent	/usr/include/ni/XnEvent.h	/^	~XnEvent()$/;"	f	class:XnEvent	access:public	signature:()
XnEventInterface	/usr/include/ni/XnEvent.h	/^	XnEventInterface() {}$/;"	f	class:XnEventInterface	access:public	signature:()
XnEventInterface	/usr/include/ni/XnEvent.h	/^class XnEventInterface$/;"	c
XnEventInterface::HandlerPtr	/usr/include/ni/XnEvent.h	/^	typedef XnStatus (XN_CALLBACK_TYPE* HandlerPtr)(void* pCookie);$/;"	t	class:XnEventInterface	access:public
XnEventInterface::Register	/usr/include/ni/XnEvent.h	/^	virtual XnStatus Register(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle = NULL) = 0;$/;"	p	class:XnEventInterface	access:public	signature:(HandlerPtr pFunc, void* pCookie, XnCallbackHandle* pHandle = NULL)
XnEventInterface::Unregister	/usr/include/ni/XnEvent.h	/^	virtual XnStatus Unregister(XnCallbackHandle handle) = 0;$/;"	p	class:XnEventInterface	access:public	signature:(XnCallbackHandle handle)
XnEventInterface::XnEventInterface	/usr/include/ni/XnEvent.h	/^	XnEventInterface() {}$/;"	f	class:XnEventInterface	access:public	signature:()
XnEventInterface::~XnEventInterface	/usr/include/ni/XnEvent.h	/^	virtual ~XnEventInterface() {}$/;"	f	class:XnEventInterface	access:public	signature:()
XnFPSData	/usr/include/ni/XnFPSCalculator.h	/^typedef struct XnFPSDataImpl* XnFPSData; $/;"	t	typeref:struct:XnFPSDataImpl
XnFarProc	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef void (*XnFarProc)(void *);$/;"	t
XnFieldOfView	/usr/include/ni/XnTypes.h	/^typedef struct XnFieldOfView$/;"	s
XnFieldOfView	/usr/include/ni/XnTypes.h	/^} XnFieldOfView;$/;"	t	typeref:struct:XnFieldOfView
XnFieldOfView::fHFOV	/usr/include/ni/XnTypes.h	/^	XnDouble fHFOV;$/;"	m	struct:XnFieldOfView	access:public
XnFieldOfView::fVFOV	/usr/include/ni/XnTypes.h	/^	XnDouble fVFOV;$/;"	m	struct:XnFieldOfView	access:public
XnFloat	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	float				XnFloat;$/;"	t
XnFreeHandler	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnFreeHandler)(const void* pData);$/;"	t
XnFuncPtr	/usr/include/ni/XnPlatform.h	/^typedef void (*XnFuncPtr)();$/;"	t
XnGeneralBuffer	/usr/include/ni/XnGeneralBuffer.h	/^typedef struct XnGeneralBuffer$/;"	s
XnGeneralBuffer	/usr/include/ni/XnGeneralBuffer.h	/^} XnGeneralBuffer;$/;"	t	typeref:struct:XnGeneralBuffer
XnGeneralBuffer::nDataSize	/usr/include/ni/XnGeneralBuffer.h	/^	XnUInt32 nDataSize;$/;"	m	struct:XnGeneralBuffer	access:public
XnGeneralBuffer::pData	/usr/include/ni/XnGeneralBuffer.h	/^	void* pData;$/;"	m	struct:XnGeneralBuffer	access:public
XnGeneralBufferAlloc	/usr/include/ni/XnGeneralBuffer.h	/^inline XnStatus XnGeneralBufferAlloc(XnGeneralBuffer* pDest, XnUInt32 nSize)$/;"	f	signature:(XnGeneralBuffer* pDest, XnUInt32 nSize)
XnGeneralBufferCopy	/usr/include/ni/XnGeneralBuffer.h	/^inline XnStatus XnGeneralBufferCopy(XnGeneralBuffer* pDest, const XnGeneralBuffer* pSrc)$/;"	f	signature:(XnGeneralBuffer* pDest, const XnGeneralBuffer* pSrc)
XnGeneralBufferFree	/usr/include/ni/XnGeneralBuffer.h	/^inline void XnGeneralBufferFree(XnGeneralBuffer* pDest)$/;"	f	signature:(XnGeneralBuffer* pDest)
XnGeneralBufferPack	/usr/include/ni/XnGeneralBuffer.h	/^inline XnGeneralBuffer XnGeneralBufferPack(void* pData, XnUInt32 nDataSize)$/;"	f	signature:(void* pData, XnUInt32 nDataSize)
XnGeneralBufferRealloc	/usr/include/ni/XnGeneralBuffer.h	/^inline XnStatus XnGeneralBufferRealloc(XnGeneralBuffer* pDest, XnUInt32 nSize)$/;"	f	signature:(XnGeneralBuffer* pDest, XnUInt32 nSize)
XnGestureProgress	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnGestureProgress)(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie);$/;"	t
XnGestureRecognized	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnGestureRecognized)(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie);$/;"	t
XnGrayscale16Pixel	/usr/include/ni/XnTypes.h	/^typedef XnUInt16 XnGrayscale16Pixel;$/;"	t
XnGrayscale8Pixel	/usr/include/ni/XnTypes.h	/^typedef XnUInt8 XnGrayscale8Pixel;$/;"	t
XnHandCreate	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnHandCreate)(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t
XnHandDestroy	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnHandDestroy)(XnNodeHandle hNode, XnUserID user, XnFloat fTime, void* pCookie);$/;"	t
XnHandUpdate	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnHandUpdate)(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t
XnHash	/usr/include/ni/XnHash.h	/^	XnHash()$/;"	f	class:XnHash	access:public	signature:()
XnHash	/usr/include/ni/XnHash.h	/^	XnHash(const XnHash& other)$/;"	f	class:XnHash	access:public	signature:(const XnHash& other)
XnHash	/usr/include/ni/XnHash.h	/^class XnHash$/;"	c
XnHash::Clear	/usr/include/ni/XnHash.h	/^	XnStatus Clear()$/;"	f	class:XnHash	access:public	signature:()
XnHash::ConstFind	/usr/include/ni/XnHash.h	/^	XnStatus ConstFind(const XnKey& key, ConstIterator& hiter) const$/;"	f	class:XnHash	access:private	signature:(const XnKey& key, ConstIterator& hiter) const
XnHash::ConstIterator	/usr/include/ni/XnHash.h	/^	class ConstIterator$/;"	c	class:XnHash	access:public
XnHash::ConstIterator::ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const ConstIterator& other) :$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other)
XnHash::ConstIterator::ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const XnHash* pHash) : $/;"	f	class:XnHash::ConstIterator	access:protected	signature:(const XnHash* pHash)
XnHash::ConstIterator::ConstIterator	/usr/include/ni/XnHash.h	/^		ConstIterator(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator) :$/;"	f	class:XnHash::ConstIterator	access:protected	signature:(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator)
XnHash::ConstIterator::GetNode	/usr/include/ni/XnHash.h	/^		XnNode* GetNode()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
XnHash::ConstIterator::GetNode	/usr/include/ni/XnHash.h	/^		const XnNode* GetNode() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
XnHash::ConstIterator::Key	/usr/include/ni/XnHash.h	/^		const XnKey& Key() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
XnHash::ConstIterator::Value	/usr/include/ni/XnHash.h	/^		const XnValue& Value() const$/;"	f	class:XnHash::ConstIterator	access:public	signature:() const
XnHash::ConstIterator::m_Iterator	/usr/include/ni/XnHash.h	/^		XnList::Iterator m_Iterator;$/;"	m	class:XnHash::ConstIterator	access:protected
XnHash::ConstIterator::m_nCurrentBin	/usr/include/ni/XnHash.h	/^		XnUInt16 m_nCurrentBin;$/;"	m	class:XnHash::ConstIterator	access:protected
XnHash::ConstIterator::m_pHash	/usr/include/ni/XnHash.h	/^		const XnHash* m_pHash;$/;"	m	class:XnHash::ConstIterator	access:protected
XnHash::ConstIterator::operator !=	/usr/include/ni/XnHash.h	/^		XnBool operator!=(const ConstIterator& other) const$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other) const
XnHash::ConstIterator::operator ++	/usr/include/ni/XnHash.h	/^		ConstIterator operator++(int)$/;"	f	class:XnHash::ConstIterator	access:public	signature:(int)
XnHash::ConstIterator::operator ++	/usr/include/ni/XnHash.h	/^		ConstIterator& operator++()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
XnHash::ConstIterator::operator --	/usr/include/ni/XnHash.h	/^		ConstIterator operator--(int)$/;"	f	class:XnHash::ConstIterator	access:public	signature:(int)
XnHash::ConstIterator::operator --	/usr/include/ni/XnHash.h	/^		ConstIterator& operator--()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
XnHash::ConstIterator::operator ==	/usr/include/ni/XnHash.h	/^		XnBool operator==(const ConstIterator& other) const$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other) const
XnHash::Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, ConstIterator& hiter) const$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, ConstIterator& hiter) const
XnHash::Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, Iterator& hiter)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, Iterator& hiter)
XnHash::Find	/usr/include/ni/XnHash.h	/^	XnStatus Find(const XnKey& key, XnHashValue hashValue, ConstIterator& hiter) const$/;"	f	class:XnHash	access:protected	signature:(const XnKey& key, XnHashValue hashValue, ConstIterator& hiter) const
XnHash::Get	/usr/include/ni/XnHash.h	/^	XnStatus Get(const XnKey& key, XnValue& value) const$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, XnValue& value) const
XnHash::GetInitStatus	/usr/include/ni/XnHash.h	/^	XnStatus GetInitStatus() const$/;"	f	class:XnHash	access:public	signature:() const
XnHash::Init	/usr/include/ni/XnHash.h	/^	XnStatus Init()$/;"	f	class:XnHash	access:protected	signature:()
XnHash::IsEmpty	/usr/include/ni/XnHash.h	/^	XnBool IsEmpty() const$/;"	f	class:XnHash	access:public	signature:() const
XnHash::Iterator	/usr/include/ni/XnHash.h	/^	class Iterator : public ConstIterator$/;"	c	class:XnHash	inherits:ConstIterator	access:public
XnHash::Iterator::Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const ConstIterator& other) : ConstIterator(other) {}$/;"	f	class:XnHash::Iterator	access:protected	signature:(const ConstIterator& other)
XnHash::Iterator::Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const XnHash* pHash) : ConstIterator(pHash) {}$/;"	f	class:XnHash::Iterator	access:protected	signature:(const XnHash* pHash)
XnHash::Iterator::Iterator	/usr/include/ni/XnHash.h	/^		Iterator(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator) :$/;"	f	class:XnHash::Iterator	access:protected	signature:(const XnHash* pHash, XnUInt16 nBin, XnList::Iterator listIterator)
XnHash::Iterator::Iterator	/usr/include/ni/XnHash.h	/^		inline Iterator(const Iterator& other) : ConstIterator(other) {}$/;"	f	class:XnHash::Iterator	access:public	signature:(const Iterator& other)
XnHash::Iterator::Key	/usr/include/ni/XnHash.h	/^		XnKey& Key() const { return (XnKey&)ConstIterator::Key(); }$/;"	f	class:XnHash::Iterator	access:public	signature:() const
XnHash::Iterator::Value	/usr/include/ni/XnHash.h	/^		XnValue& Value() const { return (XnValue&)ConstIterator::Value(); }$/;"	f	class:XnHash::Iterator	access:public	signature:() const
XnHash::Iterator::operator ++	/usr/include/ni/XnHash.h	/^		inline Iterator operator++(int) $/;"	f	class:XnHash::Iterator	access:public	signature:(int)
XnHash::Iterator::operator ++	/usr/include/ni/XnHash.h	/^		inline Iterator& operator++() $/;"	f	class:XnHash::Iterator	access:public	signature:()
XnHash::Iterator::operator --	/usr/include/ni/XnHash.h	/^		inline Iterator operator--(int)$/;"	f	class:XnHash::Iterator	access:public	signature:(int)
XnHash::Iterator::operator --	/usr/include/ni/XnHash.h	/^		inline Iterator& operator--() $/;"	f	class:XnHash::Iterator	access:public	signature:()
XnHash::Remove	/usr/include/ni/XnHash.h	/^	XnStatus Remove(ConstIterator iter, XnKey& key, XnValue& value)$/;"	f	class:XnHash	access:public	signature:(ConstIterator iter, XnKey& key, XnValue& value)
XnHash::Remove	/usr/include/ni/XnHash.h	/^	XnStatus Remove(const XnKey& key, XnValue& value)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, XnValue& value)
XnHash::Remove	/usr/include/ni/XnHash.h	/^	virtual XnStatus Remove(ConstIterator iter)$/;"	f	class:XnHash	access:public	signature:(ConstIterator iter)
XnHash::Set	/usr/include/ni/XnHash.h	/^	XnStatus Set(const XnKey& key, const XnValue& value)$/;"	f	class:XnHash	access:public	signature:(const XnKey& key, const XnValue& value)
XnHash::SetCompareFunction	/usr/include/ni/XnHash.h	/^	XnStatus SetCompareFunction(XnCompareFunction compareFunction)$/;"	f	class:XnHash	access:public	signature:(XnCompareFunction compareFunction)
XnHash::SetHashFunction	/usr/include/ni/XnHash.h	/^	XnStatus SetHashFunction(XnHashFunction hashFunction)$/;"	f	class:XnHash	access:public	signature:(XnHashFunction hashFunction)
XnHash::Size	/usr/include/ni/XnHash.h	/^	XnUInt32 Size() const$/;"	f	class:XnHash	access:public	signature:() const
XnHash::XnCompareFunction	/usr/include/ni/XnHash.h	/^	typedef XnInt32 (*XnCompareFunction)(const XnKey& key1, const XnKey& key2);$/;"	t	class:XnHash	access:public
XnHash::XnHash	/usr/include/ni/XnHash.h	/^	XnHash()$/;"	f	class:XnHash	access:public	signature:()
XnHash::XnHash	/usr/include/ni/XnHash.h	/^	XnHash(const XnHash& other)$/;"	f	class:XnHash	access:public	signature:(const XnHash& other)
XnHash::XnHashFunction	/usr/include/ni/XnHash.h	/^	typedef XnHashValue (*XnHashFunction)(const XnKey& key);$/;"	t	class:XnHash	access:public
XnHash::begin	/usr/include/ni/XnHash.h	/^	ConstIterator begin() const$/;"	f	class:XnHash	access:public	signature:() const
XnHash::begin	/usr/include/ni/XnHash.h	/^	Iterator begin()$/;"	f	class:XnHash	access:public	signature:()
XnHash::end	/usr/include/ni/XnHash.h	/^	ConstIterator end() const$/;"	f	class:XnHash	access:public	signature:() const
XnHash::end	/usr/include/ni/XnHash.h	/^	Iterator end()$/;"	f	class:XnHash	access:public	signature:()
XnHash::m_Bins	/usr/include/ni/XnHash.h	/^	XnList** m_Bins;$/;"	m	class:XnHash	access:protected
XnHash::m_CompareFunction	/usr/include/ni/XnHash.h	/^	XnCompareFunction m_CompareFunction;$/;"	m	class:XnHash	access:protected
XnHash::m_HashFunction	/usr/include/ni/XnHash.h	/^	XnHashFunction m_HashFunction;$/;"	m	class:XnHash	access:protected
XnHash::m_nInitStatus	/usr/include/ni/XnHash.h	/^	XnStatus m_nInitStatus;$/;"	m	class:XnHash	access:protected
XnHash::m_nMinBin	/usr/include/ni/XnHash.h	/^	XnUInt16 m_nMinBin;$/;"	m	class:XnHash	access:protected
XnHash::~XnHash	/usr/include/ni/XnHash.h	/^	virtual ~XnHash()$/;"	f	class:XnHash	access:public	signature:()
XnHashFunction	/usr/include/ni/XnHash.h	/^	typedef XnHashValue (*XnHashFunction)(const XnKey& key);$/;"	t	class:XnHash	access:public
XnHashValue	/usr/include/ni/XnHash.h	/^typedef XnUInt8 XnHashValue;$/;"	t
XnIRMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnIRMetaData$/;"	s
XnIRMetaData	/usr/include/ni/XnTypes.h	/^} XnIRMetaData;$/;"	t	typeref:struct:XnIRMetaData
XnIRMetaData::pData	/usr/include/ni/XnTypes.h	/^	const XnIRPixel* pData;$/;"	m	struct:XnIRMetaData	access:public
XnIRMetaData::pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnIRMetaData	access:public
XnIRPixel	/usr/include/ni/XnTypes.h	/^typedef XnGrayscale16Pixel XnIRPixel;$/;"	t
XnImageMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnImageMetaData$/;"	s
XnImageMetaData	/usr/include/ni/XnTypes.h	/^} XnImageMetaData;$/;"	t	typeref:struct:XnImageMetaData
XnImageMetaData::pData	/usr/include/ni/XnTypes.h	/^	const XnUInt8* pData;$/;"	m	struct:XnImageMetaData	access:public
XnImageMetaData::pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnImageMetaData	access:public
XnInt	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	int					XnInt;$/;"	t
XnInt16	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	short				XnInt16;$/;"	t
XnInt32	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	int					XnInt32;$/;"	t
XnInt64	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	long long			XnInt64;$/;"	t
XnInt8	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	signed char			XnInt8;$/;"	t
XnKey	/usr/include/ni/XnHash.h	/^typedef XnValue XnKey;$/;"	t
XnLabel	/usr/include/ni/XnTypes.h	/^typedef XnUInt16 XnLabel;$/;"	t
XnLicense	/usr/include/ni/XnTypes.h	/^typedef struct XnLicense$/;"	s
XnLicense	/usr/include/ni/XnTypes.h	/^} XnLicense;$/;"	t	typeref:struct:XnLicense
XnLicense::strKey	/usr/include/ni/XnTypes.h	/^	XnChar strKey[XN_MAX_LICENSE_LENGTH];$/;"	m	struct:XnLicense	access:public
XnLicense::strVendor	/usr/include/ni/XnTypes.h	/^	XnChar strVendor[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnLicense	access:public
XnList	/usr/include/ni/XnList.h	/^	XnList()$/;"	f	class:XnList	access:public	signature:()
XnList	/usr/include/ni/XnList.h	/^	XnList(INiNodeAllocator* pNodeAllocator)$/;"	f	class:XnList	access:protected	signature:(INiNodeAllocator* pNodeAllocator)
XnList	/usr/include/ni/XnList.h	/^class XnList$/;"	c
XnList::Add	/usr/include/ni/XnList.h	/^	XnStatus Add(XnNode* pWhere, const XnValue& val)$/;"	f	class:XnList	access:protected	signature:(XnNode* pWhere, const XnValue& val)
XnList::AddAfter	/usr/include/ni/XnList.h	/^	XnStatus AddAfter(ConstIterator where, const XnValue& val)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, const XnValue& val)
XnList::AddBefore	/usr/include/ni/XnList.h	/^	XnStatus AddBefore(ConstIterator where, const XnValue& val)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, const XnValue& val)
XnList::AddFirst	/usr/include/ni/XnList.h	/^	XnStatus AddFirst(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
XnList::AddLast	/usr/include/ni/XnList.h	/^	XnStatus AddLast(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
XnList::Clear	/usr/include/ni/XnList.h	/^	XnStatus Clear()$/;"	f	class:XnList	access:public	signature:()
XnList::ConstIterator	/usr/include/ni/XnList.h	/^	class ConstIterator$/;"	c	class:XnList	access:public
XnList::ConstIterator::ConstIterator	/usr/include/ni/XnList.h	/^		ConstIterator(XnNode* pNode) : m_pCurrent(pNode) {}$/;"	f	class:XnList::ConstIterator	access:protected	signature:(XnNode* pNode)
XnList::ConstIterator::ConstIterator	/usr/include/ni/XnList.h	/^		ConstIterator(const ConstIterator& other) : m_pCurrent(other.m_pCurrent) {}$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other)
XnList::ConstIterator::GetNode	/usr/include/ni/XnList.h	/^		XnNode* GetNode()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
XnList::ConstIterator::GetNode	/usr/include/ni/XnList.h	/^		const XnNode* GetNode() const$/;"	f	class:XnList::ConstIterator	access:public	signature:() const
XnList::ConstIterator::m_pCurrent	/usr/include/ni/XnList.h	/^		XnNode* m_pCurrent;$/;"	m	class:XnList::ConstIterator	access:protected
XnList::ConstIterator::operator !=	/usr/include/ni/XnList.h	/^		XnBool operator!=(const ConstIterator& other) const$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other) const
XnList::ConstIterator::operator *	/usr/include/ni/XnList.h	/^		const XnValue& operator*() const$/;"	f	class:XnList::ConstIterator	access:public	signature:() const
XnList::ConstIterator::operator ++	/usr/include/ni/XnList.h	/^		ConstIterator operator++(int)$/;"	f	class:XnList::ConstIterator	access:public	signature:(int)
XnList::ConstIterator::operator ++	/usr/include/ni/XnList.h	/^		ConstIterator& operator++()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
XnList::ConstIterator::operator --	/usr/include/ni/XnList.h	/^		ConstIterator operator--(int)$/;"	f	class:XnList::ConstIterator	access:public	signature:(int)
XnList::ConstIterator::operator --	/usr/include/ni/XnList.h	/^		ConstIterator& operator--()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
XnList::ConstIterator::operator ==	/usr/include/ni/XnList.h	/^		XnBool operator==(const ConstIterator& other) const$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other) const
XnList::Find	/usr/include/ni/XnList.h	/^	ConstIterator Find(const XnValue& value) const$/;"	f	class:XnList	access:public	signature:(const XnValue& value) const
XnList::Find	/usr/include/ni/XnList.h	/^	Iterator Find(const XnValue& value)$/;"	f	class:XnList	access:public	signature:(const XnValue& value)
XnList::Init	/usr/include/ni/XnList.h	/^	void Init(INiNodeAllocator* pNodeAllocator)$/;"	f	class:XnList	access:protected	signature:(INiNodeAllocator* pNodeAllocator)
XnList::IsEmpty	/usr/include/ni/XnList.h	/^	XnBool IsEmpty() const$/;"	f	class:XnList	access:public	signature:() const
XnList::Iterator	/usr/include/ni/XnList.h	/^	class Iterator : public ConstIterator$/;"	c	class:XnList	inherits:ConstIterator	access:public
XnList::Iterator::Iterator	/usr/include/ni/XnList.h	/^		inline Iterator(XnNode* pNode) : ConstIterator(pNode) {}$/;"	f	class:XnList::Iterator	access:protected	signature:(XnNode* pNode)
XnList::Iterator::Iterator	/usr/include/ni/XnList.h	/^		inline Iterator(const Iterator& other) : ConstIterator(other) {}$/;"	f	class:XnList::Iterator	access:public	signature:(const Iterator& other)
XnList::Iterator::operator *	/usr/include/ni/XnList.h	/^		inline XnValue& operator*() const { return ((XnValue&)**(ConstIterator*)this); }$/;"	f	class:XnList::Iterator	access:public	signature:() const
XnList::Iterator::operator ++	/usr/include/ni/XnList.h	/^		inline Iterator operator++(int) $/;"	f	class:XnList::Iterator	access:public	signature:(int)
XnList::Iterator::operator ++	/usr/include/ni/XnList.h	/^		inline Iterator& operator++() $/;"	f	class:XnList::Iterator	access:public	signature:()
XnList::Iterator::operator --	/usr/include/ni/XnList.h	/^		inline Iterator operator--(int)$/;"	f	class:XnList::Iterator	access:public	signature:(int)
XnList::Iterator::operator --	/usr/include/ni/XnList.h	/^		inline Iterator& operator--() $/;"	f	class:XnList::Iterator	access:public	signature:()
XnList::Remove	/usr/include/ni/XnList.h	/^	XnStatus Remove(ConstIterator where, XnValue& value)$/;"	f	class:XnList	access:public	signature:(ConstIterator where, XnValue& value)
XnList::Remove	/usr/include/ni/XnList.h	/^	virtual XnStatus Remove(ConstIterator where)$/;"	f	class:XnList	access:public	signature:(ConstIterator where)
XnList::Size	/usr/include/ni/XnList.h	/^	XnUInt32 Size() const$/;"	f	class:XnList	access:public	signature:() const
XnList::XnList	/usr/include/ni/XnList.h	/^	XnList()$/;"	f	class:XnList	access:public	signature:()
XnList::XnList	/usr/include/ni/XnList.h	/^	XnList(INiNodeAllocator* pNodeAllocator)$/;"	f	class:XnList	access:protected	signature:(INiNodeAllocator* pNodeAllocator)
XnList::begin	/usr/include/ni/XnList.h	/^	ConstIterator begin() const$/;"	f	class:XnList	access:public	signature:() const
XnList::begin	/usr/include/ni/XnList.h	/^	Iterator begin()$/;"	f	class:XnList	access:public	signature:()
XnList::end	/usr/include/ni/XnList.h	/^	ConstIterator end() const$/;"	f	class:XnList	access:public	signature:() const
XnList::end	/usr/include/ni/XnList.h	/^	Iterator end()$/;"	f	class:XnList	access:public	signature:()
XnList::m_bOwnsAllocator	/usr/include/ni/XnList.h	/^	XnBool m_bOwnsAllocator;$/;"	m	class:XnList	access:protected
XnList::m_pBase	/usr/include/ni/XnList.h	/^	XnNode* m_pBase;$/;"	m	class:XnList	access:protected
XnList::m_pNodeAllocator	/usr/include/ni/XnList.h	/^	INiNodeAllocator* m_pNodeAllocator;$/;"	m	class:XnList	access:protected
XnList::rbegin	/usr/include/ni/XnList.h	/^	ConstIterator rbegin() const$/;"	f	class:XnList	access:public	signature:() const
XnList::rbegin	/usr/include/ni/XnList.h	/^	Iterator rbegin()$/;"	f	class:XnList	access:public	signature:()
XnList::rend	/usr/include/ni/XnList.h	/^	ConstIterator rend() const$/;"	f	class:XnList	access:public	signature:() const
XnList::rend	/usr/include/ni/XnList.h	/^	Iterator rend()$/;"	f	class:XnList	access:public	signature:()
XnList::~XnList	/usr/include/ni/XnList.h	/^	virtual ~XnList()$/;"	f	class:XnList	access:public	signature:()
XnLockHandle	/usr/include/ni/XnTypes.h	/^typedef XnUInt32 XnLockHandle;$/;"	t
XnLogFilteringType	/usr/include/ni/XnLog.h	/^} XnLogFilteringType;$/;"	t	typeref:enum:__anon3
XnLogSeverity	/usr/include/ni/XnLog.h	/^typedef enum XnLogSeverity$/;"	g
XnLogSeverity	/usr/include/ni/XnLog.h	/^} XnLogSeverity;$/;"	t	typeref:enum:XnLogSeverity
XnMapMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnMapMetaData$/;"	s
XnMapMetaData	/usr/include/ni/XnTypes.h	/^} XnMapMetaData;$/;"	t	typeref:struct:XnMapMetaData
XnMapMetaData::FullRes	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair FullRes;$/;"	m	struct:XnMapMetaData	access:public
XnMapMetaData::Offset	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair Offset;$/;"	m	struct:XnMapMetaData	access:public
XnMapMetaData::PixelFormat	/usr/include/ni/XnTypes.h	/^	XnPixelFormat PixelFormat;$/;"	m	struct:XnMapMetaData	access:public
XnMapMetaData::Res	/usr/include/ni/XnTypes.h	/^	XnUInt32XYPair Res;$/;"	m	struct:XnMapMetaData	access:public
XnMapMetaData::nFPS	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFPS;$/;"	m	struct:XnMapMetaData	access:public
XnMapMetaData::pOutput	/usr/include/ni/XnTypes.h	/^	XnOutputMetaData* pOutput;$/;"	m	struct:XnMapMetaData	access:public
XnMapOutputMode	/usr/include/ni/XnTypes.h	/^typedef struct XnMapOutputMode$/;"	s
XnMapOutputMode	/usr/include/ni/XnTypes.h	/^} XnMapOutputMode;$/;"	t	typeref:struct:XnMapOutputMode
XnMapOutputMode::nFPS	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFPS;$/;"	m	struct:XnMapOutputMode	access:public
XnMapOutputMode::nXRes	/usr/include/ni/XnTypes.h	/^	XnUInt32 nXRes;$/;"	m	struct:XnMapOutputMode	access:public
XnMapOutputMode::nYRes	/usr/include/ni/XnTypes.h	/^	XnUInt32 nYRes;$/;"	m	struct:XnMapOutputMode	access:public
XnMatrix3X3	/usr/include/ni/XnTypes.h	/^typedef struct XnMatrix3X3$/;"	s
XnMatrix3X3	/usr/include/ni/XnTypes.h	/^} XnMatrix3X3;$/;"	t	typeref:struct:XnMatrix3X3
XnMatrix3X3::elements	/usr/include/ni/XnTypes.h	/^	XnFloat elements[9];$/;"	m	struct:XnMatrix3X3	access:public
XnModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleAlternativeViewPointInterface$/;"	s
XnModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleAlternativeViewPointInterface;$/;"	t	typeref:struct:XnModuleAlternativeViewPointInterface
XnModuleAlternativeViewPointInterface::IsViewPointAs	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsViewPointAs)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAlternativeViewPointInterface::IsViewPointSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsViewPointSupported)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAlternativeViewPointInterface::RegisterToViewPointChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToViewPointChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAlternativeViewPointInterface::ResetViewPoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ResetViewPoint)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAlternativeViewPointInterface::SetViewPoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetViewPoint)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAlternativeViewPointInterface::UnregisterFromViewPointChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromViewPointChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleAlternativeViewPointInterface	access:public
XnModuleAntiFlickerInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleAntiFlickerInterface$/;"	s
XnModuleAntiFlickerInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleAntiFlickerInterface;$/;"	t	typeref:struct:XnModuleAntiFlickerInterface
XnModuleAntiFlickerInterface::GetPowerLineFrequency	/usr/include/ni/XnModuleInterface.h	/^	XnPowerLineFrequency (XN_CALLBACK_TYPE* GetPowerLineFrequency)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
XnModuleAntiFlickerInterface::RegisterToPowerLineFrequencyChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPowerLineFrequencyChange)$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
XnModuleAntiFlickerInterface::SetPowerLineFrequency	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetPowerLineFrequency)(XnModuleNodeHandle hGenerator, XnPowerLineFrequency nFrequency);$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
XnModuleAntiFlickerInterface::UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPowerLineFrequencyChange)$/;"	m	struct:XnModuleAntiFlickerInterface	access:public
XnModuleAudioGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleAudioGeneratorInterface$/;"	s
XnModuleAudioGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleAudioGeneratorInterface;$/;"	t	typeref:struct:XnModuleAudioGeneratorInterface
XnModuleAudioGeneratorInterface::GetAudioBuffer	/usr/include/ni/XnModuleInterface.h	/^	XnUChar* (XN_CALLBACK_TYPE* GetAudioBuffer)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::GetSupportedWaveOutputModes	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSupportedWaveOutputModes)(XnModuleNodeHandle hGenerator, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::GetSupportedWaveOutputModesCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedWaveOutputModesCount)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::GetWaveOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetWaveOutputMode)(XnModuleNodeHandle hGenerator, XnWaveOutputMode* OutputMode);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::RegisterToWaveOutputModeChanges	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToWaveOutputModeChanges)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::SetWaveOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetWaveOutputMode)(XnModuleNodeHandle hGenerator, const XnWaveOutputMode* OutputMode);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromWaveOutputModeChanges)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleAudioGeneratorInterface::pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
XnModuleCalibrationEnd	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleCalibrationEnd)(XnUserID user, XnBool bSuccess, void* pCookie);$/;"	t
XnModuleCalibrationStart	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleCalibrationStart)(XnUserID user, void* pCookie);$/;"	t
XnModuleCodecInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleCodecInterface$/;"	s
XnModuleCodecInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleCodecInterface;$/;"	t	typeref:struct:XnModuleCodecInterface
XnModuleCodecInterface::CompressData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* CompressData)(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten);$/;"	m	struct:XnModuleCodecInterface	access:public
XnModuleCodecInterface::DecompressData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* DecompressData)(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten);$/;"	m	struct:XnModuleCodecInterface	access:public
XnModuleCodecInterface::GetCodecID	/usr/include/ni/XnModuleInterface.h	/^	XnCodecID (XN_CALLBACK_TYPE* GetCodecID)(XnModuleNodeHandle hCodec);$/;"	m	struct:XnModuleCodecInterface	access:public
XnModuleCodecInterface::Init	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Init)(XnModuleNodeHandle hCodec, XnNodeHandle hNode);$/;"	m	struct:XnModuleCodecInterface	access:public
XnModuleCodecInterface::pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleCodecInterface	access:public
XnModuleCroppingInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleCroppingInterface$/;"	s
XnModuleCroppingInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleCroppingInterface;$/;"	t	typeref:struct:XnModuleCroppingInterface
XnModuleCroppingInterface::GetCropping	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCropping)(XnModuleNodeHandle hGenerator, XnCropping* pCropping);$/;"	m	struct:XnModuleCroppingInterface	access:public
XnModuleCroppingInterface::RegisterToCroppingChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToCroppingChange)$/;"	m	struct:XnModuleCroppingInterface	access:public
XnModuleCroppingInterface::SetCropping	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetCropping)(XnModuleNodeHandle hGenerator, const XnCropping* pCropping);$/;"	m	struct:XnModuleCroppingInterface	access:public
XnModuleCroppingInterface::UnregisterFromCroppingChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromCroppingChange)$/;"	m	struct:XnModuleCroppingInterface	access:public
XnModuleDepthGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleDepthGeneratorInterface$/;"	s
XnModuleDepthGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleDepthGeneratorInterface;$/;"	t	typeref:struct:XnModuleDepthGeneratorInterface
XnModuleDepthGeneratorInterface::GetDepthMap	/usr/include/ni/XnModuleInterface.h	/^	XnDepthPixel* (XN_CALLBACK_TYPE* GetDepthMap)$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::GetDeviceMaxDepth	/usr/include/ni/XnModuleInterface.h	/^	XnDepthPixel (XN_CALLBACK_TYPE* GetDeviceMaxDepth)$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::GetFieldOfView	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* GetFieldOfView)(XnModuleNodeHandle hGenerator, XnFieldOfView* pFOV);$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::RegisterToFieldOfViewChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToFieldOfViewChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::UnregisterFromFieldOfViewChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromFieldOfViewChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDepthGeneratorInterface::pUserPositionInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleUserPositionCapabilityInterface* pUserPositionInterface;$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
XnModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleDeviceIdentificationInterface$/;"	s
XnModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleDeviceIdentificationInterface;$/;"	t	typeref:struct:XnModuleDeviceIdentificationInterface
XnModuleDeviceIdentificationInterface::GetDeviceName	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetDeviceName)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
XnModuleDeviceIdentificationInterface::GetSerialNumber	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSerialNumber)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
XnModuleDeviceIdentificationInterface::GetVendorSpecificData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetVendorSpecificData)(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	m	struct:XnModuleDeviceIdentificationInterface	access:public
XnModuleDeviceInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleDeviceInterface$/;"	s
XnModuleDeviceInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleDeviceInterface;$/;"	t	typeref:struct:XnModuleDeviceInterface
XnModuleDeviceInterface::pDeviceIdentificationInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleDeviceIdentificationInterface* pDeviceIdentificationInterface;$/;"	m	struct:XnModuleDeviceInterface	access:public
XnModuleDeviceInterface::pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleDeviceInterface	access:public
XnModuleErrorStateInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleErrorStateInterface$/;"	s
XnModuleErrorStateInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleErrorStateInterface;$/;"	t	typeref:struct:XnModuleErrorStateInterface
XnModuleErrorStateInterface::GetErrorState	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetErrorState)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleErrorStateInterface	access:public
XnModuleErrorStateInterface::RegisterToErrorStateChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToErrorStateChange)$/;"	m	struct:XnModuleErrorStateInterface	access:public
XnModuleErrorStateInterface::UnregisterFromErrorStateChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromErrorStateChange)$/;"	m	struct:XnModuleErrorStateInterface	access:public
XnModuleExportedProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleExportedProductionNodeInterface$/;"	s
XnModuleExportedProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleExportedProductionNodeInterface;$/;"	t	typeref:struct:XnModuleExportedProductionNodeInterface
XnModuleExportedProductionNodeInterface	/usr/include/ni/XnTypes.h	/^typedef struct XnModuleExportedProductionNodeInterface XnModuleExportedProductionNodeInterface; \/\/ Forward Declaration$/;"	t	typeref:struct:XnModuleExportedProductionNodeInterface
XnModuleExportedProductionNodeInterface::Create	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Create)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
XnModuleExportedProductionNodeInterface::Destroy	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* Destroy)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
XnModuleExportedProductionNodeInterface::EnumerateProductionTrees	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateProductionTrees)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
XnModuleExportedProductionNodeInterface::GetDescription	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* GetDescription)$/;"	m	struct:XnModuleExportedProductionNodeInterface	access:public
XnModuleExportedProductionNodeInterface::GetInterface	/usr/include/ni/XnModuleInterface.h	/^	} GetInterface;$/;"	m	struct:XnModuleExportedProductionNodeInterface	typeref:union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Audio	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Audio)(struct XnModuleAudioGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Codec	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Codec)(struct XnModuleCodecInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Depth	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Depth)(struct XnModuleDepthGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Device	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Device)(struct XnModuleDeviceInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::General	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* General)(void* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Generator	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Generator)(struct XnModuleGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Gesture	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Gesture)(struct XnModuleGestureGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Hands	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Hands)(struct XnModuleHandsGeneratorInterface* pInterace);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::IR	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* IR)(struct XnModuleIRGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Image	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Image)(struct XnModuleImageGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::MapGenerator	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* MapGenerator)(struct XnModuleMapGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Player	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Player)(struct XnModulePlayerInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::ProductionNode	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* ProductionNode)(struct XnModuleProductionNodeInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Recorder	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Recorder)(struct XnModuleRecorderInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::Scene	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* Scene)(struct XnModuleSceneAnalyzerInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExportedProductionNodeInterface::__anon4::User	/usr/include/ni/XnModuleInterface.h	/^		void (XN_CALLBACK_TYPE* User)(struct XnModuleUserGeneratorInterface* pInterface);$/;"	m	union:XnModuleExportedProductionNodeInterface::__anon4	access:public
XnModuleExtendedSerializationInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleExtendedSerializationInterface$/;"	s
XnModuleExtendedSerializationInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleExtendedSerializationInterface;$/;"	t	typeref:struct:XnModuleExtendedSerializationInterface
XnModuleExtendedSerializationInterface::InitNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* InitNotifications)(XnModuleNodeHandle hInstance, XnNodeNotifications* pNotifications, void* pCookie);$/;"	m	struct:XnModuleExtendedSerializationInterface	access:public
XnModuleExtendedSerializationInterface::StopNotifications	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* StopNotifications)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleExtendedSerializationInterface	access:public
XnModuleFrameSyncInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleFrameSyncInterface$/;"	s
XnModuleFrameSyncInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleFrameSyncInterface;$/;"	t	typeref:struct:XnModuleFrameSyncInterface
XnModuleFrameSyncInterface::CanFrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* CanFrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleFrameSyncInterface::FrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* FrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleFrameSyncInterface::IsFrameSyncedWith	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsFrameSyncedWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleFrameSyncInterface::RegisterToFrameSyncChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToFrameSyncChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleFrameSyncInterface::StopFrameSyncWith	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopFrameSyncWith)(XnModuleNodeHandle hGenerator, XnNodeHandle hOther);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleFrameSyncInterface::UnregisterFromFrameSyncChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromFrameSyncChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleFrameSyncInterface	access:public
XnModuleGeneralIntInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleGeneralIntInterface$/;"	s
XnModuleGeneralIntInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleGeneralIntInterface;$/;"	t	typeref:struct:XnModuleGeneralIntInterface
XnModuleGeneralIntInterface::Get	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Get)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32* pnValue);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
XnModuleGeneralIntInterface::GetRange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetRange)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
XnModuleGeneralIntInterface::RegisterToValueChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToValueChange)$/;"	m	struct:XnModuleGeneralIntInterface	access:public
XnModuleGeneralIntInterface::Set	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Set)(XnModuleNodeHandle hGenerator, const XnChar* strCap, XnInt32 nValue);$/;"	m	struct:XnModuleGeneralIntInterface	access:public
XnModuleGeneralIntInterface::UnregisterFromValueChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromValueChange)$/;"	m	struct:XnModuleGeneralIntInterface	access:public
XnModuleGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleGeneratorInterface$/;"	s
XnModuleGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleGeneratorInterface;$/;"	t	typeref:struct:XnModuleGeneratorInterface
XnModuleGeneratorInterface::GetData	/usr/include/ni/XnModuleInterface.h	/^	const void* (XN_CALLBACK_TYPE* GetData)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::GetDataSize	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetDataSize)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::GetFrameID	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetFrameID)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::GetTimestamp	/usr/include/ni/XnModuleInterface.h	/^	XnUInt64 (XN_CALLBACK_TYPE* GetTimestamp)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::IsGenerating	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::IsNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::RegisterToGenerationRunningChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToGenerationRunningChange)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::RegisterToNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::StartGenerating	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::StopGenerating	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* StopGenerating)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::UnregisterFromGenerationRunningChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromGenerationRunningChange)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::UnregisterFromNewDataAvailable	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromNewDataAvailable)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::UpdateData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* UpdateData)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::pAlternativeViewPointInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleAlternativeViewPointInterface* pAlternativeViewPointInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::pFrameSyncInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleFrameSyncInterface* pFrameSyncInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::pMirrorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMirrorInterface* pMirrorInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::pObsolete1	/usr/include/ni/XnModuleInterface.h	/^	void* pObsolete1; \/\/ used to be pSeekingInterface (removed in 1.0.0.28)$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGeneratorInterface::pProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNodeInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
XnModuleGestureGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleGestureGeneratorInterface$/;"	s
XnModuleGestureGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleGestureGeneratorInterface;$/;"	t	typeref:struct:XnModuleGestureGeneratorInterface
XnModuleGestureGeneratorInterface::AddGesture	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* AddGesture)(XnModuleNodeHandle hGenerator, const XnChar* strGesture, XnBoundingBox3D* pArea);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::EnumerateAllGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateAllGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::EnumerateGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::GetActiveGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetActiveGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::GetAllActiveGestures	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAllActiveGestures)(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::IsGestureAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGestureAvailable)(XnModuleNodeHandle hInstance, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::IsGestureProgressSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsGestureProgressSupported)(XnModuleNodeHandle hGenerator, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::RegisterGestureCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterGestureCallbacks)(XnModuleNodeHandle hGenerator, XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::RegisterToGestureChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToGestureChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::RemoveGesture	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RemoveGesture)(XnModuleNodeHandle hGenerator, const XnChar* strGesture);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::UnregisterFromGestureChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromGestureChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::UnregisterGestureCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterGestureCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureGeneratorInterface::pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
XnModuleGestureProgress	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleGestureProgress)(const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie);$/;"	t
XnModuleGestureRecognized	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleGestureRecognized)(const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie);$/;"	t
XnModuleGetExportedInterfacePtr	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleGetExportedInterfacePtr)(XnModuleExportedProductionNodeInterface* pInterface);$/;"	t
XnModuleGetExportedNodesCountPtr	/usr/include/ni/XnModuleInterface.h	/^typedef XnUInt32 (XN_C_DECL* XnModuleGetExportedNodesCountPtr)();$/;"	t
XnModuleGetExportedNodesEntryPointsPtr	/usr/include/ni/XnModuleInterface.h	/^typedef XnStatus (XN_C_DECL* XnModuleGetExportedNodesEntryPointsPtr)(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount);$/;"	t
XnModuleGetOpenNIVersionPtr	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_C_DECL* XnModuleGetOpenNIVersionPtr)(XnVersion* pVersion);$/;"	t
XnModuleHandCreate	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleHandCreate)(XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t
XnModuleHandDestroy	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleHandDestroy)(XnUserID user, XnFloat fTime, void* pCookie);$/;"	t
XnModuleHandUpdate	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleHandUpdate)(XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t
XnModuleHandsGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleHandsGeneratorInterface$/;"	s
XnModuleHandsGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleHandsGeneratorInterface;$/;"	t	typeref:struct:XnModuleHandsGeneratorInterface
XnModuleHandsGeneratorInterface::RegisterHandCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterHandCallbacks)(XnModuleNodeHandle hGenerator, XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::SetSmoothing	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSmoothing)(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::StartTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartTracking)(XnModuleNodeHandle hGenerator, const XnPoint3D* pPosition);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::StopTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::StopTrackingAll	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTrackingAll)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::UnregisterHandCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterHandCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleHandsGeneratorInterface::pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
XnModuleIRGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleIRGeneratorInterface$/;"	s
XnModuleIRGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleIRGeneratorInterface;$/;"	t	typeref:struct:XnModuleIRGeneratorInterface
XnModuleIRGeneratorInterface::GetIRMap	/usr/include/ni/XnModuleInterface.h	/^	XnIRPixel* (XN_CALLBACK_TYPE* GetIRMap)($/;"	m	struct:XnModuleIRGeneratorInterface	access:public
XnModuleIRGeneratorInterface::pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleIRGeneratorInterface	access:public
XnModuleImageGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleImageGeneratorInterface$/;"	s
XnModuleImageGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleImageGeneratorInterface;$/;"	t	typeref:struct:XnModuleImageGeneratorInterface
XnModuleImageGeneratorInterface::GetImageMap	/usr/include/ni/XnModuleInterface.h	/^	XnUInt8* (XN_CALLBACK_TYPE* GetImageMap)($/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::GetPixelFormat	/usr/include/ni/XnModuleInterface.h	/^	XnPixelFormat (XN_CALLBACK_TYPE* GetPixelFormat)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::IsPixelFormatSupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsPixelFormatSupported)(XnModuleNodeHandle hGenerator, XnPixelFormat Format);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::RegisterToPixelFormatChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPixelFormatChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler,$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::SetPixelFormat	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetPixelFormat)(XnModuleNodeHandle hGenerator, XnPixelFormat Format);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::UnregisterFromPixelFormatChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPixelFormatChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleImageGeneratorInterface::pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
XnModuleLoadPtr	/usr/include/ni/XnModuleInterface.h	/^typedef XnStatus (XN_C_DECL* XnModuleLoadPtr)();$/;"	t
XnModuleLockAwareInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleLockAwareInterface$/;"	s
XnModuleLockAwareInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleLockAwareInterface;$/;"	t	typeref:struct:XnModuleLockAwareInterface
XnModuleLockAwareInterface::GetLockState	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* GetLockState)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleLockAwareInterface	access:public
XnModuleLockAwareInterface::RegisterToLockChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToLockChange)$/;"	m	struct:XnModuleLockAwareInterface	access:public
XnModuleLockAwareInterface::SetLockState	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetLockState)(XnModuleNodeHandle hInstance, XnBool bLocked);$/;"	m	struct:XnModuleLockAwareInterface	access:public
XnModuleLockAwareInterface::UnregisterFromLockChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromLockChange)$/;"	m	struct:XnModuleLockAwareInterface	access:public
XnModuleMapGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleMapGeneratorInterface$/;"	s
XnModuleMapGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleMapGeneratorInterface;$/;"	t	typeref:struct:XnModuleMapGeneratorInterface
XnModuleMapGeneratorInterface::GetBytesPerPixel	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetBytesPerPixel)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::GetMapOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetMapOutputMode)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::GetSupportedMapOutputModes	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSupportedMapOutputModes)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::GetSupportedMapOutputModesCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedMapOutputModesCount)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::RegisterToMapOutputModeChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToMapOutputModeChange)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::SetMapOutputMode	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetMapOutputMode)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::UnregisterFromMapOutputModeChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromMapOutputModeChange)$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::pAntiFlickerInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleAntiFlickerInterface* pAntiFlickerInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::pCroppingInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleCroppingInterface* pCroppingInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMapGeneratorInterface::pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
XnModuleMirrorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleMirrorInterface$/;"	s
XnModuleMirrorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleMirrorInterface;$/;"	t	typeref:struct:XnModuleMirrorInterface
XnModuleMirrorInterface::IsMirrored	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsMirrored)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModuleMirrorInterface	access:public
XnModuleMirrorInterface::RegisterToMirrorChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToMirrorChange)$/;"	m	struct:XnModuleMirrorInterface	access:public
XnModuleMirrorInterface::SetMirror	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetMirror)(XnModuleNodeHandle hInstance, XnBool bMirror);$/;"	m	struct:XnModuleMirrorInterface	access:public
XnModuleMirrorInterface::UnregisterFromMirrorChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromMirrorChange)$/;"	m	struct:XnModuleMirrorInterface	access:public
XnModuleNodeHandle	/usr/include/ni/XnTypes.h	/^typedef void* XnModuleNodeHandle;$/;"	t
XnModulePlayerInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModulePlayerInterface$/;"	s
XnModulePlayerInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModulePlayerInterface;$/;"	t	typeref:struct:XnModulePlayerInterface
XnModulePlayerInterface::GetNumFrames	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetNumFrames)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::GetSupportedFormat	/usr/include/ni/XnModuleInterface.h	/^	const XnChar* (XN_CALLBACK_TYPE* GetSupportedFormat)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::IsEOF	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsEOF)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::ReadNext	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ReadNext)(XnModuleNodeHandle hInstance);$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::RegisterToEndOfFileReached	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToEndOfFileReached)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SeekToFrame	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SeekToFrame)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SeekToTimeStamp	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SeekToTimeStamp)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SetInputStream	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetInputStream)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SetNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetNodeNotifications)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SetRawNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRawNodeNotifications)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::SetRepeat	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRepeat)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::TellFrame	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* TellFrame)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::TellTimestamp	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* TellTimestamp)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::UnregisterFromEndOfFileReached	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromEndOfFileReached)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::pObsolete1	/usr/include/ni/XnModuleInterface.h	/^	void* pObsolete1; \/\/ used to be pSeekingInterface (removed in 1.0.0.28)$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePlayerInterface::pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModulePlayerInterface	access:public
XnModulePoseDetectionCallback	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModulePoseDetectionCallback)(const XnChar* strPose, XnUserID user, void* pCookie);$/;"	t
XnModulePoseDetectionCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModulePoseDetectionCapabilityInterface$/;"	s
XnModulePoseDetectionCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModulePoseDetectionCapabilityInterface;$/;"	t	typeref:struct:XnModulePoseDetectionCapabilityInterface
XnModulePoseDetectionCapabilityInterface::GetAllAvailablePoses	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAllAvailablePoses)(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::GetAvailablePoses	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetAvailablePoses)(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32* pnPoses);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::GetNumberOfPoses	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetNumberOfPoses)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::RegisterToPoseCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToPoseCallbacks)(XnModuleNodeHandle hGenerator, XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::StartPoseDetection	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartPoseDetection)(XnModuleNodeHandle hGenerator, const XnChar* strPose, XnUserID user);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::StopPoseDetection	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopPoseDetection)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModulePoseDetectionCapabilityInterface::UnregisterFromPoseCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromPoseCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModulePoseDetectionCapabilityInterface	access:public
XnModuleProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleProductionNodeInterface$/;"	s
XnModuleProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleProductionNodeInterface;$/;"	t	typeref:struct:XnModuleProductionNodeInterface
XnModuleProductionNodeInterface::GetGeneralProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetGeneralProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::GetIntProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetIntProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::GetRealProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetRealProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::GetStringProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetStringProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::IsCapabilitySupported	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCapabilitySupported)($/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::SetGeneralProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetGeneralProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::SetIntProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetIntProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::SetRealProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetRealProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble dValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::SetStringProperty	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetStringProperty)(XnModuleNodeHandle hInstance, const XnChar* strName, const XnChar* strValue);$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::pErrorStateInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleErrorStateInterface* pErrorStateInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::pExtendedSerializationInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleExtendedSerializationInterface* pExtendedSerializationInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::pGeneralIntInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneralIntInterface* pGeneralIntInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleProductionNodeInterface::pLockAwareInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleLockAwareInterface* pLockAwareInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
XnModuleRecorderInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleRecorderInterface$/;"	s
XnModuleRecorderInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleRecorderInterface;$/;"	t	typeref:struct:XnModuleRecorderInterface
XnModuleRecorderInterface::SetOutputStream	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetOutputStream)$/;"	m	struct:XnModuleRecorderInterface	access:public
XnModuleRecorderInterface::pNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnNodeNotifications* pNodeNotifications;$/;"	m	struct:XnModuleRecorderInterface	access:public
XnModuleRecorderInterface::pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleRecorderInterface	access:public
XnModuleSceneAnalyzerInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleSceneAnalyzerInterface$/;"	s
XnModuleSceneAnalyzerInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleSceneAnalyzerInterface;$/;"	t	typeref:struct:XnModuleSceneAnalyzerInterface
XnModuleSceneAnalyzerInterface::GetFloor	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetFloor)(XnModuleNodeHandle hGenerator, XnPlane3D* pPlane);$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
XnModuleSceneAnalyzerInterface::GetLabelMap	/usr/include/ni/XnModuleInterface.h	/^	const XnLabel* (XN_CALLBACK_TYPE* GetLabelMap)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
XnModuleSceneAnalyzerInterface::pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
XnModuleSkeletonCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleSkeletonCapabilityInterface$/;"	s
XnModuleSkeletonCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleSkeletonCapabilityInterface;$/;"	t	typeref:struct:XnModuleSkeletonCapabilityInterface
XnModuleSkeletonCapabilityInterface::AbortCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* AbortCalibration)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::ClearCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* ClearCalibrationData)(XnModuleNodeHandle hGenerator, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::EnumerateActiveJoints	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* EnumerateActiveJoints)(XnModuleNodeHandle hGenerator, XnSkeletonJoint* pJoints, XnUInt16* pnJoints);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::GetCalibrationPose	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCalibrationPose)(XnModuleNodeHandle hGenerator, XnChar* strPose);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::GetSkeletonJoint	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJoint)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::GetSkeletonJointOrientation	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJointOrientation)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::GetSkeletonJointPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetSkeletonJointPosition)(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsCalibrated	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrated)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsCalibrating	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrating)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsCalibrationData)(XnModuleNodeHandle hGenerator, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsJointActive	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsJointActive)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsJointAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsJointAvailable)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsProfileAvailable	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsProfileAvailable)(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::IsTracking	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* IsTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::LoadCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* LoadCalibrationData)(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::LoadCalibrationDataFromFile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* LoadCalibrationDataFromFile)(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::NeedPoseForCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnBool (XN_CALLBACK_TYPE* NeedPoseForCalibration)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::RegisterCalibrationCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterCalibrationCallbacks)(XnModuleNodeHandle hGenerator, XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::RegisterToJointConfigurationChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToJointConfigurationChange)(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::RequestCalibration	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RequestCalibration)(XnModuleNodeHandle hGenerator, XnUserID user, XnBool bForce);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::Reset	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* Reset)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::SaveCalibrationData	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SaveCalibrationData)(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::SaveCalibrationDataToFile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SaveCalibrationDataToFile)(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::SetJointActive	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetJointActive)(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint, XnBool bState);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::SetSkeletonProfile	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSkeletonProfile)(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::SetSmoothing	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetSmoothing)(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::StartTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StartTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::StopTracking	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* StopTracking)(XnModuleNodeHandle hGenerator, XnUserID user);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::UnregisterCalibrationCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterCalibrationCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleSkeletonCapabilityInterface::UnregisterFromJointConfigurationChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromJointConfigurationChange)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleSkeletonCapabilityInterface	access:public
XnModuleStateChangedHandler	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleStateChangedHandler)(void* pCookie);$/;"	t
XnModuleUnloadPtr	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_C_DECL* XnModuleUnloadPtr)();$/;"	t
XnModuleUserGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleUserGeneratorInterface$/;"	s
XnModuleUserGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleUserGeneratorInterface;$/;"	t	typeref:struct:XnModuleUserGeneratorInterface
XnModuleUserGeneratorInterface::GetCoM	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetCoM)(XnModuleNodeHandle hGenerator, XnUserID user, XnPoint3D* pCoM);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::GetNumberOfUsers	/usr/include/ni/XnModuleInterface.h	/^	XnUInt16 (XN_CALLBACK_TYPE* GetNumberOfUsers)(XnModuleNodeHandle hGenerator);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::GetUserPixels	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUserPixels)(XnModuleNodeHandle hGenerator, XnUserID user, XnSceneMetaData* pScene);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::GetUsers	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUsers)(XnModuleNodeHandle hGenerator, XnUserID* pUsers, XnUInt16* pnUsers);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::RegisterUserCallbacks	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterUserCallbacks)(XnModuleNodeHandle hGenerator, XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::UnregisterUserCallbacks	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterUserCallbacks)(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback);$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::pPoseDetectionInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModulePoseDetectionCapabilityInterface* pPoseDetectionInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserGeneratorInterface::pSkeletonInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleSkeletonCapabilityInterface* pSkeletonInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
XnModuleUserHandler	/usr/include/ni/XnModuleInterface.h	/^typedef void (XN_CALLBACK_TYPE* XnModuleUserHandler)(XnUserID user, void* pCookie);$/;"	t
XnModuleUserPositionCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnModuleUserPositionCapabilityInterface$/;"	s
XnModuleUserPositionCapabilityInterface	/usr/include/ni/XnModuleInterface.h	/^} XnModuleUserPositionCapabilityInterface;$/;"	t	typeref:struct:XnModuleUserPositionCapabilityInterface
XnModuleUserPositionCapabilityInterface::GetSupportedUserPositionsCount	/usr/include/ni/XnModuleInterface.h	/^	XnUInt32 (XN_CALLBACK_TYPE* GetSupportedUserPositionsCount)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
XnModuleUserPositionCapabilityInterface::GetUserPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* GetUserPosition)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
XnModuleUserPositionCapabilityInterface::RegisterToUserPositionChange	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* RegisterToUserPositionChange)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
XnModuleUserPositionCapabilityInterface::SetUserPosition	/usr/include/ni/XnModuleInterface.h	/^	XnStatus (XN_CALLBACK_TYPE* SetUserPosition)($/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
XnModuleUserPositionCapabilityInterface::UnregisterFromUserPositionChange	/usr/include/ni/XnModuleInterface.h	/^	void (XN_CALLBACK_TYPE* UnregisterFromUserPositionChange)$/;"	m	struct:XnModuleUserPositionCapabilityInterface	access:public
XnNode	/usr/include/ni/XnNode.h	/^	XnNode() { m_pNext = NULL; m_pPrevious = NULL; m_Data = NULL; }$/;"	f	class:XnNode	access:public	signature:()
XnNode	/usr/include/ni/XnNode.h	/^class XnNode : protected XnBaseNode$/;"	c	inherits:XnBaseNode
XnNode::Allocate	/usr/include/ni/XnNode.h	/^	static XnNode *Allocate() { return (XnNode*)xnAllocateBaseNode(); }$/;"	f	class:XnNode	access:public	signature:()
XnNode::Data	/usr/include/ni/XnNode.h	/^	XnValue& Data() {return m_Data;}$/;"	f	class:XnNode	access:public	signature:()
XnNode::Data	/usr/include/ni/XnNode.h	/^	const XnValue& Data() const {return m_Data;}$/;"	f	class:XnNode	access:public	signature:() const
XnNode::Deallocate	/usr/include/ni/XnNode.h	/^	static void Deallocate(XnNode *pNode) { xnDeallocateBaseNode((XnBaseNode*)pNode); }$/;"	f	class:XnNode	access:public	signature:(XnNode *pNode)
XnNode::Next	/usr/include/ni/XnNode.h	/^	XnNode*& Next() {return (XnNode*&)m_pNext;}$/;"	f	class:XnNode	access:public	signature:()
XnNode::Next	/usr/include/ni/XnNode.h	/^	const XnNode* const Next() const {return (const XnNode*)m_pNext;}$/;"	f	class:XnNode	access:public	signature:() const
XnNode::Previous	/usr/include/ni/XnNode.h	/^	XnNode*& Previous() {return (XnNode*&)m_pPrevious;}$/;"	f	class:XnNode	access:public	signature:()
XnNode::Previous	/usr/include/ni/XnNode.h	/^	const XnNode* const Previous() const {return (const XnNode*)m_pPrevious;}$/;"	f	class:XnNode	access:public	signature:() const
XnNode::XnNode	/usr/include/ni/XnNode.h	/^	XnNode() { m_pNext = NULL; m_pPrevious = NULL; m_Data = NULL; }$/;"	f	class:XnNode	access:public	signature:()
XnNodeAllocator	/usr/include/ni/XnNodeAllocator.h	/^class XnNodeAllocator : public INiNodeAllocator$/;"	c	inherits:INiNodeAllocator
XnNodeAllocator::Allocate	/usr/include/ni/XnNodeAllocator.h	/^	virtual XnNode *Allocate() { return XnNode::Allocate();	}$/;"	f	class:XnNodeAllocator	access:public	signature:()
XnNodeAllocator::Deallocate	/usr/include/ni/XnNodeAllocator.h	/^	virtual void Deallocate(XnNode *pNode) { XnNode::Deallocate(pNode); }$/;"	f	class:XnNodeAllocator	access:public	signature:(XnNode *pNode)
XnNodeHandle	/usr/include/ni/XnTypes.h	/^typedef struct XnInternalNodeData* XnNodeHandle;$/;"	t	typeref:struct:XnInternalNodeData
XnNodeInfo	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeInfo XnNodeInfo;$/;"	t	typeref:struct:XnNodeInfo
XnNodeInfoList	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeInfoList XnNodeInfoList;$/;"	t	typeref:struct:XnNodeInfoList
XnNodeInfoListIterator	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeInfoListIterator$/;"	s
XnNodeInfoListIterator	/usr/include/ni/XnTypes.h	/^} XnNodeInfoListIterator;$/;"	t	typeref:struct:XnNodeInfoListIterator
XnNodeInfoListIterator::pCurrent	/usr/include/ni/XnTypes.h	/^	XnNodeInfoListNode* pCurrent;$/;"	m	struct:XnNodeInfoListIterator	access:public
XnNodeInfoListNode	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeInfoListNode XnNodeInfoListNode;$/;"	t	typeref:struct:XnNodeInfoListNode
XnNodeNotifications	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeNotifications$/;"	s
XnNodeNotifications	/usr/include/ni/XnTypes.h	/^} XnNodeNotifications;$/;"	t	typeref:struct:XnNodeNotifications
XnNodeNotifications::OnNodeAdded	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeAdded)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeGeneralPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeGeneralPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeIntPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeIntPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeNewData	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeNewData)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeRealPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeRealPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeRemoved	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeRemoved)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeStateReady	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeStateReady)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeNotifications::OnNodeStringPropChanged	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* OnNodeStringPropChanged)$/;"	m	struct:XnNodeNotifications	access:public
XnNodeQuery	/usr/include/ni/XnTypes.h	/^typedef struct XnNodeQuery XnNodeQuery;$/;"	t	typeref:struct:XnNodeQuery
XnOSEvent	/usr/include/ni/XnOSCpp.h	/^	XnOSEvent() : m_hEvent(NULL) {}$/;"	f	class:XnOSEvent	access:public	signature:()
XnOSEvent	/usr/include/ni/XnOSCpp.h	/^class XnOSEvent$/;"	c
XnOSEvent::Close	/usr/include/ni/XnOSCpp.h	/^	XnStatus Close()$/;"	f	class:XnOSEvent	access:public	signature:()
XnOSEvent::Create	/usr/include/ni/XnOSCpp.h	/^	XnStatus Create(XnBool bManualReset)$/;"	f	class:XnOSEvent	access:public	signature:(XnBool bManualReset)
XnOSEvent::Create	/usr/include/ni/XnOSCpp.h	/^	XnStatus Create(const XnChar* strName, XnBool bManualReset)$/;"	f	class:XnOSEvent	access:public	signature:(const XnChar* strName, XnBool bManualReset)
XnOSEvent::Open	/usr/include/ni/XnOSCpp.h	/^	XnStatus Open(const XnChar* strName)$/;"	f	class:XnOSEvent	access:public	signature:(const XnChar* strName)
XnOSEvent::Reset	/usr/include/ni/XnOSCpp.h	/^	XnStatus Reset()$/;"	f	class:XnOSEvent	access:public	signature:()
XnOSEvent::Set	/usr/include/ni/XnOSCpp.h	/^	XnStatus Set()$/;"	f	class:XnOSEvent	access:public	signature:()
XnOSEvent::Wait	/usr/include/ni/XnOSCpp.h	/^	XnStatus Wait(XnUInt32 nMilliseconds)$/;"	f	class:XnOSEvent	access:public	signature:(XnUInt32 nMilliseconds)
XnOSEvent::XnOSEvent	/usr/include/ni/XnOSCpp.h	/^	XnOSEvent() : m_hEvent(NULL) {}$/;"	f	class:XnOSEvent	access:public	signature:()
XnOSEvent::m_hEvent	/usr/include/ni/XnOSCpp.h	/^	XN_EVENT_HANDLE m_hEvent;$/;"	m	class:XnOSEvent	access:private
XnOSEvent::operator XN_EVENT_HANDLE	/usr/include/ni/XnOSCpp.h	/^	operator XN_EVENT_HANDLE() const $/;"	f	class:XnOSEvent	access:public	signature:() const
XnOSEvent::~XnOSEvent	/usr/include/ni/XnOSCpp.h	/^	~XnOSEvent() $/;"	f	class:XnOSEvent	access:public	signature:()
XnOSSeekType	/usr/include/ni/XnOS.h	/^} XnOSSeekType;$/;"	t	typeref:enum:__anon5
XnOSSharedMemory	/usr/include/ni/XnOS.h	/^typedef struct XnOSSharedMemory XnOSSharedMemory, *XN_SHARED_MEMORY_HANDLE;$/;"	t	typeref:struct:XnOSSharedMemory
XnOSSocketType	/usr/include/ni/XnOS.h	/^} XnOSSocketType;$/;"	t	typeref:enum:__anon6
XnOSTimer	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^typedef struct XnOSTimer $/;"	s
XnOSTimer	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^} XnOSTimer;$/;"	t	typeref:struct:XnOSTimer
XnOSTimer::bHighRes	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bHighRes;$/;"	m	struct:XnOSTimer	access:public
XnOSTimer::tStartTime	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	struct timespec tStartTime;$/;"	m	struct:XnOSTimer	typeref:struct:XnOSTimer::timespec	access:public
XnOpenNIModuleInterface	/usr/include/ni/XnModuleInterface.h	/^typedef struct XnOpenNIModuleInterface$/;"	s
XnOpenNIModuleInterface	/usr/include/ni/XnModuleInterface.h	/^} XnOpenNIModuleInterface;$/;"	t	typeref:struct:XnOpenNIModuleInterface
XnOpenNIModuleInterface::pGetCountFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetExportedNodesCountPtr pGetCountFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
XnOpenNIModuleInterface::pGetEntryPointsFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetExportedNodesEntryPointsPtr pGetEntryPointsFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
XnOpenNIModuleInterface::pGetVersionFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetOpenNIVersionPtr pGetVersionFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
XnOpenNIModuleInterface::pLoadFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleLoadPtr pLoadFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
XnOpenNIModuleInterface::pUnloadFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleUnloadPtr pUnloadFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
XnOutputMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnOutputMetaData$/;"	s
XnOutputMetaData	/usr/include/ni/XnTypes.h	/^} XnOutputMetaData;$/;"	t	typeref:struct:XnOutputMetaData
XnOutputMetaData::bIsNew	/usr/include/ni/XnTypes.h	/^	XnBool bIsNew;$/;"	m	struct:XnOutputMetaData	access:public
XnOutputMetaData::nDataSize	/usr/include/ni/XnTypes.h	/^	XnUInt32 nDataSize;$/;"	m	struct:XnOutputMetaData	access:public
XnOutputMetaData::nFrameID	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFrameID;$/;"	m	struct:XnOutputMetaData	access:public
XnOutputMetaData::nTimestamp	/usr/include/ni/XnTypes.h	/^	XnUInt64 nTimestamp;$/;"	m	struct:XnOutputMetaData	access:public
XnPixelFormat	/usr/include/ni/XnTypes.h	/^typedef enum XnPixelFormat$/;"	g
XnPixelFormat	/usr/include/ni/XnTypes.h	/^} XnPixelFormat;$/;"	t	typeref:enum:XnPixelFormat
XnPlane3D	/usr/include/ni/XnTypes.h	/^typedef struct XnPlane3D$/;"	s
XnPlane3D	/usr/include/ni/XnTypes.h	/^} XnPlane3D;$/;"	t	typeref:struct:XnPlane3D
XnPlane3D::ptPoint	/usr/include/ni/XnTypes.h	/^	XnPoint3D ptPoint;$/;"	m	struct:XnPlane3D	access:public
XnPlane3D::vNormal	/usr/include/ni/XnTypes.h	/^	XnVector3D vNormal;$/;"	m	struct:XnPlane3D	access:public
XnPlayerInputStreamInterface	/usr/include/ni/XnTypes.h	/^typedef struct XnPlayerInputStreamInterface$/;"	s
XnPlayerInputStreamInterface	/usr/include/ni/XnTypes.h	/^} XnPlayerInputStreamInterface;$/;"	t	typeref:struct:XnPlayerInputStreamInterface
XnPlayerInputStreamInterface::Close	/usr/include/ni/XnTypes.h	/^	void (XN_CALLBACK_TYPE* Close)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
XnPlayerInputStreamInterface::Open	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Open)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
XnPlayerInputStreamInterface::Read	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Read)(void* pCookie, void* pBuffer, XnUInt32 nSize, XnUInt32* pnBytesRead);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
XnPlayerInputStreamInterface::Seek	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Seek)(void* pCookie, XnOSSeekType seekType, const XnInt32 nOffset);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
XnPlayerInputStreamInterface::Tell	/usr/include/ni/XnTypes.h	/^	XnUInt32 (XN_CALLBACK_TYPE* Tell)(void* pCookie);$/;"	m	struct:XnPlayerInputStreamInterface	access:public
XnPlayerSeekOrigin	/usr/include/ni/XnTypes.h	/^typedef enum XnPlayerSeekOrigin$/;"	g
XnPlayerSeekOrigin	/usr/include/ni/XnTypes.h	/^} XnPlayerSeekOrigin;$/;"	t	typeref:enum:XnPlayerSeekOrigin
XnPoint3D	/usr/include/ni/XnTypes.h	/^typedef XnVector3D XnPoint3D;$/;"	t
XnPoseDetectionCallback	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnPoseDetectionCallback)(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie);$/;"	t
XnPowerLineFrequency	/usr/include/ni/XnTypes.h	/^typedef enum XnPowerLineFrequency$/;"	g
XnPowerLineFrequency	/usr/include/ni/XnTypes.h	/^} XnPowerLineFrequency;$/;"	t	typeref:enum:XnPowerLineFrequency
XnPredefinedProductionNodeType	/usr/include/ni/XnTypes.h	/^typedef enum XnPredefinedProductionNodeType$/;"	g
XnPredefinedProductionNodeType	/usr/include/ni/XnTypes.h	/^} XnPredefinedProductionNodeType;$/;"	t	typeref:enum:XnPredefinedProductionNodeType
XnProductionNodeDescription	/usr/include/ni/XnTypes.h	/^typedef struct XnProductionNodeDescription$/;"	s
XnProductionNodeDescription	/usr/include/ni/XnTypes.h	/^} XnProductionNodeDescription;$/;"	t	typeref:struct:XnProductionNodeDescription
XnProductionNodeDescription::Type	/usr/include/ni/XnTypes.h	/^	XnProductionNodeType Type;$/;"	m	struct:XnProductionNodeDescription	access:public
XnProductionNodeDescription::Version	/usr/include/ni/XnTypes.h	/^	XnVersion Version;$/;"	m	struct:XnProductionNodeDescription	access:public
XnProductionNodeDescription::strName	/usr/include/ni/XnTypes.h	/^	XnChar strName[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnProductionNodeDescription	access:public
XnProductionNodeDescription::strVendor	/usr/include/ni/XnTypes.h	/^	XnChar strVendor[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnProductionNodeDescription	access:public
XnProductionNodeType	/usr/include/ni/XnTypes.h	/^typedef XnInt32 XnProductionNodeType;$/;"	t
XnProfilingHandle	/usr/include/ni/XnProfiling.h	/^typedef XnInt32 XnProfilingHandle;$/;"	t
XnQueue	/usr/include/ni/XnQueue.h	/^	XnQueue() {}$/;"	f	class:XnQueue	access:public	signature:()
XnQueue	/usr/include/ni/XnQueue.h	/^class XnQueue$/;"	c
XnQueue::Init	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Init()$/;"	f	class:XnQueue	access:public	signature:()
XnQueue::IsEmpty	/usr/include/ni/XnQueue.h	/^	XnBool IsEmpty() const$/;"	f	class:XnQueue	access:public	signature:() const
XnQueue::Pop	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Pop(XnValue& value)$/;"	f	class:XnQueue	access:public	signature:(XnValue& value)
XnQueue::Push	/usr/include/ni/XnQueue.h	/^	virtual XnStatus Push(XnValue const& value)$/;"	f	class:XnQueue	access:public	signature:(XnValue const& value)
XnQueue::Size	/usr/include/ni/XnQueue.h	/^	virtual XnUInt32 Size() const$/;"	f	class:XnQueue	access:public	signature:() const
XnQueue::Top	/usr/include/ni/XnQueue.h	/^	XnValue const& Top() const$/;"	f	class:XnQueue	access:public	signature:() const
XnQueue::Top	/usr/include/ni/XnQueue.h	/^	XnValue& Top()$/;"	f	class:XnQueue	access:public	signature:()
XnQueue::XnQueue	/usr/include/ni/XnQueue.h	/^	XnQueue() {}$/;"	f	class:XnQueue	access:public	signature:()
XnQueue::m_List	/usr/include/ni/XnQueue.h	/^	XnList m_List;$/;"	m	class:XnQueue	access:private
XnQueue::~XnQueue	/usr/include/ni/XnQueue.h	/^	virtual ~XnQueue() {}$/;"	f	class:XnQueue	access:public	signature:()
XnRGB24Pixel	/usr/include/ni/XnTypes.h	/^typedef struct XnRGB24Pixel$/;"	s
XnRGB24Pixel	/usr/include/ni/XnTypes.h	/^} XnRGB24Pixel;$/;"	t	typeref:struct:XnRGB24Pixel
XnRGB24Pixel::nBlue	/usr/include/ni/XnTypes.h	/^	XnUInt8 nBlue;$/;"	m	struct:XnRGB24Pixel	access:public
XnRGB24Pixel::nGreen	/usr/include/ni/XnTypes.h	/^	XnUInt8 nGreen;$/;"	m	struct:XnRGB24Pixel	access:public
XnRGB24Pixel::nRed	/usr/include/ni/XnTypes.h	/^	XnUInt8 nRed;$/;"	m	struct:XnRGB24Pixel	access:public
XnRecordMedium	/usr/include/ni/XnTypes.h	/^typedef enum XnRecordMedium$/;"	g
XnRecordMedium	/usr/include/ni/XnTypes.h	/^} XnRecordMedium;$/;"	t	typeref:enum:XnRecordMedium
XnRecorderOutputStreamInterface	/usr/include/ni/XnTypes.h	/^typedef struct XnRecorderOutputStreamInterface$/;"	s
XnRecorderOutputStreamInterface	/usr/include/ni/XnTypes.h	/^} XnRecorderOutputStreamInterface;$/;"	t	typeref:struct:XnRecorderOutputStreamInterface
XnRecorderOutputStreamInterface::Close	/usr/include/ni/XnTypes.h	/^	void (XN_CALLBACK_TYPE* Close)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
XnRecorderOutputStreamInterface::Open	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Open)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
XnRecorderOutputStreamInterface::Seek	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Seek)(void* pCookie, XnOSSeekType seekType, const XnUInt32 nOffset);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
XnRecorderOutputStreamInterface::Tell	/usr/include/ni/XnTypes.h	/^	XnUInt32 (XN_CALLBACK_TYPE* Tell)(void* pCookie);$/;"	m	struct:XnRecorderOutputStreamInterface	access:public
XnRecorderOutputStreamInterface::Write	/usr/include/ni/XnTypes.h	/^	XnStatus (XN_CALLBACK_TYPE* Write)(void* pCookie, const XnChar* strNodeName, $/;"	m	struct:XnRecorderOutputStreamInterface	access:public
XnResolution	/usr/include/ni/XnTypes.h	/^typedef enum XnResolution$/;"	g
XnResolution	/usr/include/ni/XnTypes.h	/^} XnResolution;$/;"	t	typeref:enum:XnResolution
XnSampleRate	/usr/include/ni/XnTypes.h	/^typedef enum XnSampleRate$/;"	g
XnSampleRate	/usr/include/ni/XnTypes.h	/^} XnSampleRate;$/;"	t	typeref:enum:XnSampleRate
XnSceneMetaData	/usr/include/ni/XnTypes.h	/^typedef struct XnSceneMetaData$/;"	s
XnSceneMetaData	/usr/include/ni/XnTypes.h	/^} XnSceneMetaData;$/;"	t	typeref:struct:XnSceneMetaData
XnSceneMetaData::pData	/usr/include/ni/XnTypes.h	/^	const XnLabel* pData;$/;"	m	struct:XnSceneMetaData	access:public
XnSceneMetaData::pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnSceneMetaData	access:public
XnScheduledTask	/usr/include/ni/XnScheduler.h	/^typedef struct XnScheduledTask XnScheduledTask;$/;"	t	typeref:struct:XnScheduledTask
XnScheduler	/usr/include/ni/XnScheduler.h	/^typedef struct XnScheduler XnScheduler;$/;"	t	typeref:struct:XnScheduler
XnSizeT	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef size_t				XnSizeT;$/;"	t
XnSkeletonJoint	/usr/include/ni/XnTypes.h	/^typedef enum XnSkeletonJoint$/;"	g
XnSkeletonJoint	/usr/include/ni/XnTypes.h	/^} XnSkeletonJoint;$/;"	t	typeref:enum:XnSkeletonJoint
XnSkeletonJointOrientation	/usr/include/ni/XnTypes.h	/^typedef struct XnSkeletonJointOrientation$/;"	s
XnSkeletonJointOrientation	/usr/include/ni/XnTypes.h	/^} XnSkeletonJointOrientation;$/;"	t	typeref:struct:XnSkeletonJointOrientation
XnSkeletonJointOrientation::fConfidence	/usr/include/ni/XnTypes.h	/^	XnConfidence	fConfidence;$/;"	m	struct:XnSkeletonJointOrientation	access:public
XnSkeletonJointOrientation::orientation	/usr/include/ni/XnTypes.h	/^	XnMatrix3X3		orientation;$/;"	m	struct:XnSkeletonJointOrientation	access:public
XnSkeletonJointPosition	/usr/include/ni/XnTypes.h	/^typedef struct XnSkeletonJointPosition$/;"	s
XnSkeletonJointPosition	/usr/include/ni/XnTypes.h	/^} XnSkeletonJointPosition;$/;"	t	typeref:struct:XnSkeletonJointPosition
XnSkeletonJointPosition::fConfidence	/usr/include/ni/XnTypes.h	/^	XnConfidence	fConfidence;$/;"	m	struct:XnSkeletonJointPosition	access:public
XnSkeletonJointPosition::position	/usr/include/ni/XnTypes.h	/^	XnVector3D		position;$/;"	m	struct:XnSkeletonJointPosition	access:public
XnSkeletonJointTransformation	/usr/include/ni/XnTypes.h	/^typedef struct XnSkeletonJointTransformation$/;"	s
XnSkeletonJointTransformation	/usr/include/ni/XnTypes.h	/^} XnSkeletonJointTransformation;$/;"	t	typeref:struct:XnSkeletonJointTransformation
XnSkeletonJointTransformation::orientation	/usr/include/ni/XnTypes.h	/^	XnSkeletonJointOrientation	orientation;$/;"	m	struct:XnSkeletonJointTransformation	access:public
XnSkeletonJointTransformation::position	/usr/include/ni/XnTypes.h	/^	XnSkeletonJointPosition		position;$/;"	m	struct:XnSkeletonJointTransformation	access:public
XnSkeletonProfile	/usr/include/ni/XnTypes.h	/^typedef enum XnSkeletonProfile$/;"	g
XnSkeletonProfile	/usr/include/ni/XnTypes.h	/^} XnSkeletonProfile;$/;"	t	typeref:enum:XnSkeletonProfile
XnStack	/usr/include/ni/XnStack.h	/^	XnStack() {}$/;"	f	class:XnStack	access:public	signature:()
XnStack	/usr/include/ni/XnStack.h	/^class XnStack$/;"	c
XnStack::IsEmpty	/usr/include/ni/XnStack.h	/^	XnBool IsEmpty() const$/;"	f	class:XnStack	access:public	signature:() const
XnStack::Pop	/usr/include/ni/XnStack.h	/^	XnStatus Pop(XnValue& value)$/;"	f	class:XnStack	access:public	signature:(XnValue& value)
XnStack::Push	/usr/include/ni/XnStack.h	/^	XnStatus Push(XnValue const& value)$/;"	f	class:XnStack	access:public	signature:(XnValue const& value)
XnStack::Size	/usr/include/ni/XnStack.h	/^	XnUInt32 Size() const$/;"	f	class:XnStack	access:public	signature:() const
XnStack::Top	/usr/include/ni/XnStack.h	/^	XnValue const& Top() const$/;"	f	class:XnStack	access:public	signature:() const
XnStack::Top	/usr/include/ni/XnStack.h	/^	XnValue& Top()$/;"	f	class:XnStack	access:public	signature:()
XnStack::XnStack	/usr/include/ni/XnStack.h	/^	XnStack() {}$/;"	f	class:XnStack	access:public	signature:()
XnStack::m_List	/usr/include/ni/XnStack.h	/^	XnList m_List;$/;"	m	class:XnStack	access:private
XnStack::~XnStack	/usr/include/ni/XnStack.h	/^	~XnStack() {}$/;"	f	class:XnStack	access:public	signature:()
XnStateChangedHandler	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnStateChangedHandler)(XnNodeHandle hNode, void* pCookie);$/;"	t
XnStatus	/usr/include/ni/XnStatus.h	/^typedef XnUInt32 XnStatus;$/;"	t
XnStringsKeyManager	/usr/include/ni/XnStringsHash.h	/^class XnStringsKeyManager$/;"	c
XnStringsKeyManager::Compare	/usr/include/ni/XnStringsHash.h	/^	static XnInt32 Compare(const XnChar* const& key1, const XnChar* const& key2)$/;"	f	class:XnStringsKeyManager	access:public	signature:(const XnChar* const& key1, const XnChar* const& key2)
XnStringsKeyManager::Hash	/usr/include/ni/XnStringsHash.h	/^	static XnHashValue Hash(const XnChar* const& key)$/;"	f	class:XnStringsKeyManager	access:public	signature:(const XnChar* const& key)
XnStringsKeyTranslator	/usr/include/ni/XnStringsHash.h	/^class XnStringsKeyTranslator$/;"	c
XnStringsKeyTranslator::CreateValueCopy	/usr/include/ni/XnStringsHash.h	/^	static XnValue CreateValueCopy(const XnChar* const& orig)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnChar* const& orig)
XnStringsKeyTranslator::FreeValue	/usr/include/ni/XnStringsHash.h	/^	static void FreeValue(XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(XnValue& Value)
XnStringsKeyTranslator::GetAsValue	/usr/include/ni/XnStringsHash.h	/^	static XnValue GetAsValue(const XnChar* const& orig)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnChar* const& orig)
XnStringsKeyTranslator::GetFromValue	/usr/include/ni/XnStringsHash.h	/^	static const XnChar* const& GetFromValue(const XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(const XnValue& Value)
XnStringsKeyTranslator::GetFromValue	/usr/include/ni/XnStringsHash.h	/^	static const XnChar*& GetFromValue(XnValue& Value)$/;"	f	class:XnStringsKeyTranslator	access:public	signature:(XnValue& Value)
XnSupportedPixelFormats	/usr/include/ni/XnTypes.h	/^typedef struct XnSupportedPixelFormats$/;"	s
XnSupportedPixelFormats	/usr/include/ni/XnTypes.h	/^} XnSupportedPixelFormats;$/;"	t	typeref:struct:XnSupportedPixelFormats
XnSupportedPixelFormats::m_bGrayscale16Bit	/usr/include/ni/XnTypes.h	/^	XnBool m_bGrayscale16Bit : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_bGrayscale8Bit	/usr/include/ni/XnTypes.h	/^	XnBool m_bGrayscale8Bit : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_bMJPEG	/usr/include/ni/XnTypes.h	/^	XnBool m_bMJPEG : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_bRGB24	/usr/include/ni/XnTypes.h	/^	XnBool m_bRGB24 : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_bYUV422	/usr/include/ni/XnTypes.h	/^	XnBool m_bYUV422 : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_nPadding	/usr/include/ni/XnTypes.h	/^	XnUInt m_nPadding : 3;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnSupportedPixelFormats::m_nReserved	/usr/include/ni/XnTypes.h	/^	XnUInt m_nReserved : 24;$/;"	m	struct:XnSupportedPixelFormats	access:public
XnTaskCallbackFuncPtr	/usr/include/ni/XnScheduler.h	/^typedef void (XN_CALLBACK_TYPE* XnTaskCallbackFuncPtr)(void* pCallbackArg);$/;"	t
XnThreadPriority	/usr/include/ni/XnOS.h	/^typedef enum XnThreadPriority$/;"	g
XnThreadPriority	/usr/include/ni/XnOS.h	/^} XnThreadPriority;$/;"	t	typeref:enum:XnThreadPriority
XnThreadSafeQueue	/usr/include/ni/XnThreadSafeQueue.h	/^	XnThreadSafeQueue() : m_hLock(NULL) {}$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
XnThreadSafeQueue	/usr/include/ni/XnThreadSafeQueue.h	/^class XnThreadSafeQueue : public XnQueue$/;"	c	inherits:XnQueue
XnThreadSafeQueue::Init	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Init()$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
XnThreadSafeQueue::Pop	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Pop(XnValue& value)$/;"	f	class:XnThreadSafeQueue	access:public	signature:(XnValue& value)
XnThreadSafeQueue::Push	/usr/include/ni/XnThreadSafeQueue.h	/^	XnStatus Push(XnValue const& value)$/;"	f	class:XnThreadSafeQueue	access:public	signature:(XnValue const& value)
XnThreadSafeQueue::Size	/usr/include/ni/XnThreadSafeQueue.h	/^	XnUInt32 Size() const$/;"	f	class:XnThreadSafeQueue	access:public	signature:() const
XnThreadSafeQueue::XnThreadSafeQueue	/usr/include/ni/XnThreadSafeQueue.h	/^	XnThreadSafeQueue() : m_hLock(NULL) {}$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
XnThreadSafeQueue::m_hLock	/usr/include/ni/XnThreadSafeQueue.h	/^	mutable XN_CRITICAL_SECTION_HANDLE m_hLock;$/;"	m	class:XnThreadSafeQueue	access:private
XnThreadSafeQueue::~XnThreadSafeQueue	/usr/include/ni/XnThreadSafeQueue.h	/^	~XnThreadSafeQueue()$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
XnUChar	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned char		XnUChar;$/;"	t
XnUInt	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned int		XnUInt;$/;"	t
XnUInt16	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned short		XnUInt16;$/;"	t
XnUInt32	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned int		XnUInt32;$/;"	t
XnUInt32XYPair	/usr/include/ni/XnTypes.h	/^typedef struct XnUInt32XYPair$/;"	s
XnUInt32XYPair	/usr/include/ni/XnTypes.h	/^} XnUInt32XYPair;$/;"	t	typeref:struct:XnUInt32XYPair
XnUInt32XYPair::X	/usr/include/ni/XnTypes.h	/^	XnUInt32 X;$/;"	m	struct:XnUInt32XYPair	access:public
XnUInt32XYPair::Y	/usr/include/ni/XnTypes.h	/^	XnUInt32 Y;$/;"	m	struct:XnUInt32XYPair	access:public
XnUInt64	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned long long	XnUInt64;$/;"	t
XnUInt8	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	unsigned char		XnUInt8;$/;"	t
XnUSBConnectionString	/usr/include/ni/XnUSB.h	/^typedef XnChar XnUSBConnectionString[XN_FILE_MAX_PATH];$/;"	t
XnUSBControlType	/usr/include/ni/XnUSB.h	/^} XnUSBControlType;$/;"	t	typeref:enum:__anon11
XnUSBDeviceSpeed	/usr/include/ni/XnUSB.h	/^} XnUSBDeviceSpeed;$/;"	t	typeref:enum:__anon8
XnUSBDirectionType	/usr/include/ni/XnUSB.h	/^} XnUSBDirectionType;$/;"	t	typeref:enum:__anon10
XnUSBEndPointType	/usr/include/ni/XnUSB.h	/^} XnUSBEndPointType;$/;"	t	typeref:enum:__anon9
XnUSBEventCallbackFunctionPtr	/usr/include/ni/XnUSB.h	/^typedef XnBool (XN_CALLBACK_TYPE* XnUSBEventCallbackFunctionPtr)(XnUSBEventType USBEventType, XnChar* cpDevPath, void* pCallbackData);$/;"	t
XnUSBEventType	/usr/include/ni/XnUSB.h	/^} XnUSBEventType;$/;"	t	typeref:enum:__anon12
XnUSBReadCallbackFunctionPtr	/usr/include/ni/XnUSB.h	/^typedef XnBool (XN_CALLBACK_TYPE* XnUSBReadCallbackFunctionPtr)(XnUChar* pBuffer, XnUInt32 nBufferSize, void* pCallbackData);$/;"	t
XnUserHandler	/usr/include/ni/XnTypes.h	/^typedef void (XN_CALLBACK_TYPE* XnUserHandler)(XnNodeHandle hNode, XnUserID user, void* pCookie);$/;"	t
XnUserID	/usr/include/ni/XnTypes.h	/^typedef XnUInt32 XnUserID;$/;"	t
XnValue	/usr/include/ni/XnDataTypes.h	/^typedef void* XnValue;$/;"	t
XnVector3D	/usr/include/ni/XnTypes.h	/^typedef struct XnVector3D$/;"	s
XnVector3D	/usr/include/ni/XnTypes.h	/^} XnVector3D;$/;"	t	typeref:struct:XnVector3D
XnVector3D::X	/usr/include/ni/XnTypes.h	/^	XnFloat X;$/;"	m	struct:XnVector3D	access:public
XnVector3D::Y	/usr/include/ni/XnTypes.h	/^	XnFloat Y;$/;"	m	struct:XnVector3D	access:public
XnVector3D::Z	/usr/include/ni/XnTypes.h	/^	XnFloat Z;$/;"	m	struct:XnVector3D	access:public
XnVersion	/usr/include/ni/XnTypes.h	/^typedef struct XnVersion$/;"	s
XnVersion	/usr/include/ni/XnTypes.h	/^} XnVersion;$/;"	t	typeref:struct:XnVersion
XnVersion::nBuild	/usr/include/ni/XnTypes.h	/^	XnUInt32 nBuild;$/;"	m	struct:XnVersion	access:public
XnVersion::nMaintenance	/usr/include/ni/XnTypes.h	/^	XnUInt16 nMaintenance;$/;"	m	struct:XnVersion	access:public
XnVersion::nMajor	/usr/include/ni/XnTypes.h	/^	XnUInt8 nMajor;$/;"	m	struct:XnVersion	access:public
XnVersion::nMinor	/usr/include/ni/XnTypes.h	/^	XnUInt8 nMinor;$/;"	m	struct:XnVersion	access:public
XnWChar	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^typedef	wchar_t				XnWChar;$/;"	t
XnWaveOutputMode	/usr/include/ni/XnTypes.h	/^typedef struct XnWaveOutputMode$/;"	s
XnWaveOutputMode	/usr/include/ni/XnTypes.h	/^} XnWaveOutputMode;$/;"	t	typeref:struct:XnWaveOutputMode
XnWaveOutputMode::nBitsPerSample	/usr/include/ni/XnTypes.h	/^	XnUInt16 nBitsPerSample;$/;"	m	struct:XnWaveOutputMode	access:public
XnWaveOutputMode::nChannels	/usr/include/ni/XnTypes.h	/^	XnUInt8 nChannels;$/;"	m	struct:XnWaveOutputMode	access:public
XnWaveOutputMode::nSampleRate	/usr/include/ni/XnTypes.h	/^	XnUInt32 nSampleRate;$/;"	m	struct:XnWaveOutputMode	access:public
XnYUV422DoublePixel	/usr/include/ni/XnTypes.h	/^typedef struct XnYUV422DoublePixel$/;"	s
XnYUV422DoublePixel	/usr/include/ni/XnTypes.h	/^} XnYUV422DoublePixel;$/;"	t	typeref:struct:XnYUV422DoublePixel
XnYUV422DoublePixel::nU	/usr/include/ni/XnTypes.h	/^	XnUInt8 nU;$/;"	m	struct:XnYUV422DoublePixel	access:public
XnYUV422DoublePixel::nV	/usr/include/ni/XnTypes.h	/^	XnUInt8 nV;$/;"	m	struct:XnYUV422DoublePixel	access:public
XnYUV422DoublePixel::nY1	/usr/include/ni/XnTypes.h	/^	XnUInt8 nY1;$/;"	m	struct:XnYUV422DoublePixel	access:public
XnYUV422DoublePixel::nY2	/usr/include/ni/XnTypes.h	/^	XnUInt8 nY2;$/;"	m	struct:XnYUV422DoublePixel	access:public
Y	/usr/include/ni/XnTypes.h	/^	XnFloat Y;$/;"	m	struct:XnVector3D	access:public
Y	/usr/include/ni/XnTypes.h	/^	XnUInt32 Y;$/;"	m	struct:XnUInt32XYPair	access:public
YOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 YOffset() const { return m_map.Offset.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
YOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& YOffset() { return m_map.Offset.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
YRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 YRes() const { return m_map.Res.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
YRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& YRes() { return m_map.Res.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
YUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel* YUV422Data() const { return (const XnYUV422DoublePixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
YUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel*& YUV422Data() { return (const XnYUV422DoublePixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
Z	/usr/include/ni/XnTypes.h	/^	XnFloat Z;$/;"	m	struct:XnVector3D	access:public
ZRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel ZRes() const { return m_depth.nZRes; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
ZRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel& ZRes() { return m_depth.nZRes; }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
_CONCAT	/usr/include/ni/XnModuleCppRegistratration.h	/^#define _CONCAT(/;"	d
_ININODEALLOCATOR_H	/usr/include/ni/IXnNodeAllocator.h	/^#define _ININODEALLOCATOR_H$/;"	d
_NINODEALLOC_H	/usr/include/ni/XnBaseNode.h	/^#define _NINODEALLOC_H$/;"	d
_NISIMPLENODEALLOCATOR_H	/usr/include/ni/XnNodeAllocator.h	/^#define _NISIMPLENODEALLOCATOR_H$/;"	d
_RegisterToStateChange	/usr/include/ni/XnCppWrapper.h	/^	static XnStatus _RegisterToStateChange(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	namespace:xn	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
_RegisterToStateChange	/usr/include/ni/XnCppWrapper.h	/^	static XnStatus _RegisterToStateChange(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback);$/;"	p	namespace:xn	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
_UnregisterFromStateChange	/usr/include/ni/XnCppWrapper.h	/^	static void _UnregisterFromStateChange(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)$/;"	f	namespace:xn	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
_UnregisterFromStateChange	/usr/include/ni/XnCppWrapper.h	/^	static void _UnregisterFromStateChange(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback);$/;"	p	namespace:xn	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
_XN_ARGS_0ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_0ARG(/;"	d
_XN_ARGS_1ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_1ARG(/;"	d
_XN_ARGS_2ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_2ARG(/;"	d
_XN_ARGS_3ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_3ARG(/;"	d
_XN_ARGS_4ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_4ARG(/;"	d
_XN_ARGS_5ARG	/usr/include/ni/XnEvent.h	/^#define _XN_ARGS_5ARG(/;"	d
_XN_DATA_TYPES_H_	/usr/include/ni/XnDataTypes.h	/^#define _XN_DATA_TYPES_H_$/;"	d
_XN_DECLARE_EVENT_CLASS	/usr/include/ni/XnEvent.h	/^#define _XN_DECLARE_EVENT_CLASS(/;"	d
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(DepthMap, XnDepthPixel);$/;"	p	namespace:xn	signature:(DepthMap, XnDepthPixel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(Grayscale16Map, XnGrayscale16Pixel);$/;"	p	namespace:xn	signature:(Grayscale16Map, XnGrayscale16Pixel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(Grayscale8Map, XnGrayscale8Pixel);$/;"	p	namespace:xn	signature:(Grayscale8Map, XnGrayscale8Pixel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(IRMap, XnIRPixel);$/;"	p	namespace:xn	signature:(IRMap, XnIRPixel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(ImageMap, XnUInt8);$/;"	p	namespace:xn	signature:(ImageMap, XnUInt8)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(LabelMap, XnLabel);$/;"	p	namespace:xn	signature:(LabelMap, XnLabel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(RGB24Map, XnRGB24Pixel);$/;"	p	namespace:xn	signature:(RGB24Map, XnRGB24Pixel)
_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^#define _XN_DECLARE_MAP_DATA_CLASS(/;"	d
_XN_DEFAULT_KEY_MANAGER_NAME	/usr/include/ni/XnHash.h	/^#define _XN_DEFAULT_KEY_MANAGER_NAME(/;"	d
_XN_DEFAULT_KEY_TRANSLATOR	/usr/include/ni/XnHash.h	/^#define _XN_DEFAULT_KEY_TRANSLATOR(/;"	d
_XN_DEFAULT_VALUE_TRANSLATOR	/usr/include/ni/XnHash.h	/^#define _XN_DEFAULT_VALUE_TRANSLATOR(/;"	d
_XN_ERROR_GROUP_NAME	/usr/include/ni/XnStatusRegister.h	/^#define _XN_ERROR_GROUP_NAME(/;"	d
_XN_EXPORT_NODE_COMMON	/usr/include/ni/XnModuleCppRegistratration.h	/^#define _XN_EXPORT_NODE_COMMON(/;"	d
_XN_FULL_SIGNATURE_0ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_0ARG(/;"	d
_XN_FULL_SIGNATURE_1ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_1ARG(/;"	d
_XN_FULL_SIGNATURE_2ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_2ARG(/;"	d
_XN_FULL_SIGNATURE_3ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_3ARG(/;"	d
_XN_FULL_SIGNATURE_4ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_4ARG(/;"	d
_XN_FULL_SIGNATURE_5ARG	/usr/include/ni/XnEvent.h	/^#define _XN_FULL_SIGNATURE_5ARG(/;"	d
_XN_HASH_H	/usr/include/ni/XnHash.h	/^#define _XN_HASH_H$/;"	d
_XN_LIST_H	/usr/include/ni/XnList.h	/^#define _XN_LIST_H$/;"	d
_XN_LOG_H_	/usr/include/ni/XnLog.h	/^#define _XN_LOG_H_$/;"	d
_XN_MACROS_H_	/usr/include/ni/XnMacros.h	/^#define _XN_MACROS_H_$/;"	d
_XN_MODULE_INST	/usr/include/ni/XnModuleCppRegistratration.h	/^	static Module* _XN_MODULE_INST;$/;"	v
_XN_MODULE_INST	/usr/include/ni/XnModuleCppRegistratration.h	/^#define _XN_MODULE_INST /;"	d
_XN_NODE_H_	/usr/include/ni/XnNode.h	/^#define _XN_NODE_H_$/;"	d
_XN_OSLINUX_X86_H_	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^#define _XN_OSLINUX_X86_H_$/;"	d
_XN_PLATFORM_LINUX_ARM_H_	/usr/include/ni/Linux-Arm/XnPlatformLinux-Arm.h	/^#define _XN_PLATFORM_LINUX_ARM_H_$/;"	d
_XN_PLATFORM_LINUX_X86_H_	/usr/include/ni/Linux-x86/XnPlatformLinux-x86.h	/^#define _XN_PLATFORM_LINUX_X86_H_$/;"	d
_XN_PLATFORM_MACOSX_H_	/usr/include/ni/MacOSX/XnPlatformMacOSX.h	/^#define _XN_PLATFORM_MACOSX_H_$/;"	d
_XN_PROFILING_H_	/usr/include/ni/XnProfiling.h	/^#define _XN_PROFILING_H_$/;"	d
_XN_PROFILING_START_SECTION	/usr/include/ni/XnProfiling.h	/^#define _XN_PROFILING_START_SECTION(/;"	d
_XN_QUEUE_H	/usr/include/ni/XnQueue.h	/^#define _XN_QUEUE_H$/;"	d
_XN_RAISE_NO_RET_CODE	/usr/include/ni/XnEvent.h	/^#define _XN_RAISE_NO_RET_CODE(/;"	d
_XN_RAISE_WITH_RET_CODE	/usr/include/ni/XnEvent.h	/^#define _XN_RAISE_WITH_RET_CODE(/;"	d
_XN_SCHEDULER_H_	/usr/include/ni/XnScheduler.h	/^#define _XN_SCHEDULER_H_$/;"	d
_XN_SIGNATURE_0ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_0ARG(/;"	d
_XN_SIGNATURE_1ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_1ARG(/;"	d
_XN_SIGNATURE_2ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_2ARG(/;"	d
_XN_SIGNATURE_3ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_3ARG(/;"	d
_XN_SIGNATURE_4ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_4ARG(/;"	d
_XN_SIGNATURE_5ARG	/usr/include/ni/XnEvent.h	/^#define _XN_SIGNATURE_5ARG(/;"	d
_XN_STACK_H	/usr/include/ni/XnStack.h	/^#define _XN_STACK_H$/;"	d
_XN_STRINGS_HASH_H	/usr/include/ni/XnStringsHash.h	/^#define _XN_STRINGS_HASH_H$/;"	d
_XN_USB_H_	/usr/include/ni/XnUSB.h	/^#define _XN_USB_H_$/;"	d
_XN_VALIDATE_CAPABILITY_INTERFACE	/usr/include/ni/XnModuleCppRegistratration.h	/^#define _XN_VALIDATE_CAPABILITY_INTERFACE(/;"	d
_XN_VALIDATE_CAPABILITY_INTERFACE_RET	/usr/include/ni/XnModuleCppRegistratration.h	/^#define _XN_VALIDATE_CAPABILITY_INTERFACE_RET(/;"	d
_XN_VERSION_H_	/usr/include/ni/XnVersion.h	/^#define _XN_VERSION_H_$/;"	d
_XnEvent	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^} _XnEvent, *XN_EVENT_HANDLE;$/;"	t	typeref:struct:__anon1
_XnRegisterStateChangeFuncPtr	/usr/include/ni/XnCppWrapper.h	/^	typedef XnStatus (*_XnRegisterStateChangeFuncPtr)(XnNodeHandle hNode, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	t	namespace:xn
_XnUnregisterStateChangeFuncPtr	/usr/include/ni/XnCppWrapper.h	/^	typedef void (*_XnUnregisterStateChangeFuncPtr)(XnNodeHandle hNode, XnCallbackHandle hCallback);$/;"	t	namespace:xn
__ModuleAbortSkeletonCalibration	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleAbortSkeletonCalibration(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleAddGesture	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleAddGesture(XnModuleNodeHandle hGenerator, const XnChar* strGesture, XnBoundingBox3D* pArea)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar* strGesture, XnBoundingBox3D* pArea)
__ModuleCanFrameSyncWith	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleCanFrameSyncWith(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleClearCalibrationData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleClearCalibrationData(XnModuleNodeHandle hGenerator, XnUInt32 nSlot)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUInt32 nSlot)
__ModuleCodecInit	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleCodecInit(XnModuleNodeHandle hCodec, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hCodec, XnNodeHandle hNode)
__ModuleCompressData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleCompressData(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)$/;"	f	signature:(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)
__ModuleDecompressData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleDecompressData(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)$/;"	f	signature:(XnModuleNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)
__ModuleEnumerateActiveJoints	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleEnumerateActiveJoints(XnModuleNodeHandle hGenerator, XnSkeletonJoint* pJoints, XnUInt16* pnJoints)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonJoint* pJoints, XnUInt16* pnJoints)
__ModuleEnumerateAllGestures	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleEnumerateAllGestures(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* pnGestures)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* pnGestures)
__ModuleEnumerateGestures	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleEnumerateGestures(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* pnGestures)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* pnGestures)
__ModuleFrameSyncWith	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleFrameSyncWith(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleGeneralIntGet	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGeneralIntGet(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32* pnValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32* pnValue)
__ModuleGeneralIntGetRange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGeneralIntGetRange(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported)
__ModuleGeneralIntRegisterToValueChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGeneralIntRegisterToValueChange$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCap, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleGeneralIntSet	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGeneralIntSet(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32 nValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCap, XnInt32 nValue)
__ModuleGeneralIntUnregisterFromValueChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGeneralIntUnregisterFromValueChange$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCap, XnCallbackHandle hCallback)
__ModuleGetActiveGestures	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetActiveGestures(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* pnGestures)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt16* pnGestures)
__ModuleGetAllActiveGestures	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetAllActiveGestures(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* pnGestures)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* pnGestures)
__ModuleGetAllAvailablePoses	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetAllAvailablePoses(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses)
__ModuleGetAlternativeViewPointInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetAlternativeViewPointInterface(XnModuleAlternativeViewPointInterface* pInterface)$/;"	f	signature:(XnModuleAlternativeViewPointInterface* pInterface)
__ModuleGetAntiFlickerInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetAntiFlickerInterface(XnModuleAntiFlickerInterface* pInterface)$/;"	f	signature:(XnModuleAntiFlickerInterface* pInterface)
__ModuleGetAudioBuffer	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUChar* XN_CALLBACK_TYPE __ModuleGetAudioBuffer(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetAudioGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetAudioGeneratorInterface(XnModuleAudioGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleAudioGeneratorInterface* pInterface)
__ModuleGetAudioGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetAudioGeneratorInterface(XnModuleAudioGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleAudioGeneratorInterface* pInterface)
__ModuleGetAvailablePoses	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetAvailablePoses(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32* pnPoses)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar** pstrPoses, XnUInt32* pnPoses)
__ModuleGetBytesPerPixel	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetBytesPerPixel(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetCodecID	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnCodecID XN_CALLBACK_TYPE __ModuleGetCodecID(XnModuleNodeHandle hCodec)$/;"	f	signature:(XnModuleNodeHandle hCodec)
__ModuleGetCodecInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetCodecInterface(XnModuleCodecInterface* pInterface)$/;"	f	signature:(XnModuleCodecInterface* pInterface)
__ModuleGetCodecInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetCodecInterface(XnModuleCodecInterface* pInterface);$/;"	p	signature:(XnModuleCodecInterface* pInterface)
__ModuleGetCropping	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetCropping(XnModuleNodeHandle hGenerator, XnCropping* pCropping)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCropping* pCropping)
__ModuleGetCroppingInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetCroppingInterface(XnModuleCroppingInterface* pInterface)$/;"	f	signature:(XnModuleCroppingInterface* pInterface)
__ModuleGetData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT const void* XN_CALLBACK_TYPE __ModuleGetData(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetDataSize	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetDataSize(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetDepthGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetDepthGeneratorInterface(XnModuleDepthGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleDepthGeneratorInterface* pInterface)
__ModuleGetDepthGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetDepthGeneratorInterface(XnModuleDepthGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleDepthGeneratorInterface* pInterface)
__ModuleGetDepthMap	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnDepthPixel* XN_CALLBACK_TYPE __ModuleGetDepthMap(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetDeviceIdentificationInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetDeviceIdentificationInterface(XnModuleDeviceIdentificationInterface* pInterface)$/;"	f	signature:(XnModuleDeviceIdentificationInterface* pInterface)
__ModuleGetDeviceInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetDeviceInterface(XnModuleDeviceInterface* pInterface)$/;"	f	signature:(XnModuleDeviceInterface* pInterface)
__ModuleGetDeviceInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetDeviceInterface(XnModuleDeviceInterface* pInterface);$/;"	p	signature:(XnModuleDeviceInterface* pInterface)
__ModuleGetDeviceMaxDepth	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnDepthPixel XN_CALLBACK_TYPE __ModuleGetDeviceMaxDepth(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetDeviceName	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetDeviceName(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
__ModuleGetErrorState	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetErrorState(XnModuleNodeHandle hInstance)$/;"	f	signature:(XnModuleNodeHandle hInstance)
__ModuleGetErrorStateInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetErrorStateInterface(XnModuleErrorStateInterface* pInterface)$/;"	f	signature:(XnModuleErrorStateInterface* pInterface)
__ModuleGetExtendedSerializationInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetExtendedSerializationInterface(XnModuleExtendedSerializationInterface* pInterface)$/;"	f	signature:(XnModuleExtendedSerializationInterface* pInterface)
__ModuleGetFieldOfView	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetFieldOfView(XnModuleNodeHandle hGenerator, XnFieldOfView* pFOV)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnFieldOfView* pFOV)
__ModuleGetFloor	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetFloor(XnModuleNodeHandle hGenerator, XnPlane3D* pPlane)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnPlane3D* pPlane)
__ModuleGetFrameID	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetFrameID(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetFrameSyncInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetFrameSyncInterface(XnModuleFrameSyncInterface* pInterface)$/;"	f	signature:(XnModuleFrameSyncInterface* pInterface)
__ModuleGetGeneralIntInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetGeneralIntInterface(XnModuleGeneralIntInterface* pInterface)$/;"	f	signature:(XnModuleGeneralIntInterface* pInterface)
__ModuleGetGeneralProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetGeneralProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer)
__ModuleGetGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetGeneratorInterface(XnModuleGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleGeneratorInterface* pInterface)
__ModuleGetGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetGeneratorInterface(XnModuleGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleGeneratorInterface* pInterface)
__ModuleGetGestureGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetGestureGeneratorInterface(XnModuleGestureGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleGestureGeneratorInterface* pInterface)
__ModuleGetGestureGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetGestureGeneratorInterface(XnModuleGestureGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleGestureGeneratorInterface* pInterface)
__ModuleGetGetInterfaceFunc	/usr/include/ni/XnModuleCppRegistratration.h	/^static GetInterfaceFuncPtr __ModuleGetGetInterfaceFunc(XnProductionNodeType type)$/;"	f	signature:(XnProductionNodeType type)
__ModuleGetHandsGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetHandsGeneratorInterface(XnModuleHandsGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleHandsGeneratorInterface* pInterface)
__ModuleGetHandsGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetHandsGeneratorInterface(XnModuleHandsGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleHandsGeneratorInterface* pInterface)
__ModuleGetIRGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetIRGeneratorInterface(XnModuleIRGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleIRGeneratorInterface* pInterface)
__ModuleGetIRGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetIRGeneratorInterface(XnModuleIRGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleIRGeneratorInterface* pInterface)
__ModuleGetIRMap	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnIRPixel* XN_CALLBACK_TYPE __ModuleGetIRMap(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetImageGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetImageGeneratorInterface(XnModuleImageGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleImageGeneratorInterface* pInterface)
__ModuleGetImageGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetImageGeneratorInterface(XnModuleImageGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleImageGeneratorInterface* pInterface)
__ModuleGetImageMap	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt8* XN_CALLBACK_TYPE __ModuleGetImageMap(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetIntProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetIntProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue)
__ModuleGetLabelMap	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT const XnLabel* XN_CALLBACK_TYPE __ModuleGetLabelMap(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetLockAwareInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetLockAwareInterface(XnModuleLockAwareInterface* pInterface)$/;"	f	signature:(XnModuleLockAwareInterface* pInterface)
__ModuleGetLockState	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleGetLockState(XnModuleNodeHandle hInstance)$/;"	f	signature:(XnModuleNodeHandle hInstance)
__ModuleGetMapGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetMapGeneratorInterface(XnModuleMapGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleMapGeneratorInterface* pInterface)
__ModuleGetMapGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetMapGeneratorInterface(XnModuleMapGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleMapGeneratorInterface* pInterface)
__ModuleGetMapOutputMode	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetMapOutputMode(XnModuleNodeHandle hGenerator, XnMapOutputMode* pOutputMode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnMapOutputMode* pOutputMode)
__ModuleGetMirrorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetMirrorInterface(XnModuleMirrorInterface* pInterface)$/;"	f	signature:(XnModuleMirrorInterface* pInterface)
__ModuleGetNodeNotificationsInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetNodeNotificationsInterface(XnNodeNotifications *pInterface)$/;"	f	signature:(XnNodeNotifications *pInterface)
__ModuleGetNumFrames	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetNumFrames(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnUInt32* pnFrames)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnUInt32* pnFrames)
__ModuleGetNumberOfPoses	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetNumberOfPoses(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetNumberOfUsers	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt16 XN_CALLBACK_TYPE __ModuleGetNumberOfUsers(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetPixelFormat	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnPixelFormat XN_CALLBACK_TYPE __ModuleGetPixelFormat(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetPlayerInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetPlayerInterface(XnModulePlayerInterface* pInterface)$/;"	f	signature:(XnModulePlayerInterface* pInterface)
__ModuleGetPlayerInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetPlayerInterface(XnModulePlayerInterface* pInterface);$/;"	p	signature:(XnModulePlayerInterface* pInterface)
__ModuleGetPoseDetectionInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetPoseDetectionInterface(XnModulePoseDetectionCapabilityInterface* pInteface)$/;"	f	signature:(XnModulePoseDetectionCapabilityInterface* pInteface)
__ModuleGetPowerLineFrequency	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnPowerLineFrequency XN_CALLBACK_TYPE __ModuleGetPowerLineFrequency(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetProductionNodeInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetProductionNodeInterface(XnModuleProductionNodeInterface* pInterface)$/;"	f	signature:(XnModuleProductionNodeInterface* pInterface)
__ModuleGetProductionNodeInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetProductionNodeInterface(XnModuleProductionNodeInterface* pInterface);$/;"	p	signature:(XnModuleProductionNodeInterface* pInterface)
__ModuleGetRealProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetRealProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue)
__ModuleGetRecorderInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetRecorderInterface(XnModuleRecorderInterface* pInterface)$/;"	f	signature:(XnModuleRecorderInterface* pInterface)
__ModuleGetRecorderInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetRecorderInterface(XnModuleRecorderInterface* pInterface);$/;"	p	signature:(XnModuleRecorderInterface* pInterface)
__ModuleGetSceneAnalyzerInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetSceneAnalyzerInterface(XnModuleSceneAnalyzerInterface* pInterface)$/;"	f	signature:(XnModuleSceneAnalyzerInterface* pInterface)
__ModuleGetSceneAnalyzerInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetSceneAnalyzerInterface(XnModuleSceneAnalyzerInterface* pInterface);$/;"	p	signature:(XnModuleSceneAnalyzerInterface* pInterface)
__ModuleGetSerialNumber	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSerialNumber(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
__ModuleGetSkeletonCalibrationPose	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSkeletonCalibrationPose(XnModuleNodeHandle hGenerator, XnChar* strPose)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnChar* strPose)
__ModuleGetSkeletonInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetSkeletonInterface(XnModuleSkeletonCapabilityInterface* pInterface)$/;"	f	signature:(XnModuleSkeletonCapabilityInterface* pInterface)
__ModuleGetSkeletonJoint	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSkeletonJoint(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint)
__ModuleGetSkeletonJointOrientation	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSkeletonJointOrientation(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint)
__ModuleGetSkeletonJointPosition	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSkeletonJointPosition(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint)
__ModuleGetStringProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetStringProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize)
__ModuleGetSupportedFormat	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT const XnChar* XN_CALLBACK_TYPE __ModuleGetSupportedFormat(XnModuleNodeHandle hInstance)$/;"	f	signature:(XnModuleNodeHandle hInstance)
__ModuleGetSupportedMapOutputModes	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSupportedMapOutputModes(XnModuleNodeHandle hGenerator, XnMapOutputMode* aModes, XnUInt32* pnCount)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnMapOutputMode* aModes, XnUInt32* pnCount)
__ModuleGetSupportedMapOutputModesCount	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetSupportedMapOutputModesCount(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetSupportedUserPositionsCount	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetSupportedUserPositionsCount(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetSupportedWaveOutputModes	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetSupportedWaveOutputModes(XnModuleNodeHandle hGenerator, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount)
__ModuleGetSupportedWaveOutputModesCount	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt32 XN_CALLBACK_TYPE __ModuleGetSupportedWaveOutputModesCount(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetTimestamp	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnUInt64 XN_CALLBACK_TYPE __ModuleGetTimestamp(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleGetUserCoM	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetUserCoM(XnModuleNodeHandle hGenerator, XnUserID user, XnPoint3D* pCoM)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnPoint3D* pCoM)
__ModuleGetUserGeneratorInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetUserGeneratorInterface(XnModuleUserGeneratorInterface* pInterface)$/;"	f	signature:(XnModuleUserGeneratorInterface* pInterface)
__ModuleGetUserGeneratorInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetUserGeneratorInterface(XnModuleUserGeneratorInterface* pInterface);$/;"	p	signature:(XnModuleUserGeneratorInterface* pInterface)
__ModuleGetUserPixels	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetUserPixels(XnModuleNodeHandle hGenerator, XnUserID user, XnSceneMetaData* pScene)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnSceneMetaData* pScene)
__ModuleGetUserPosition	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetUserPosition(XnModuleNodeHandle hGenerator, XnUInt32 nIndex, XnBoundingBox3D* pPosition)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUInt32 nIndex, XnBoundingBox3D* pPosition)
__ModuleGetUserPositionInterface	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleGetUserPositionInterface(XnModuleUserPositionCapabilityInterface* pInterface)$/;"	f	signature:(XnModuleUserPositionCapabilityInterface* pInterface)
__ModuleGetUsers	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetUsers(XnModuleNodeHandle hGenerator, XnUserID* pUsers, XnUInt16* pnUsers)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID* pUsers, XnUInt16* pnUsers)
__ModuleGetVendorSpecificData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetVendorSpecificData(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
__ModuleGetWaveOutputMode	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleGetWaveOutputMode(XnModuleNodeHandle hGenerator, XnWaveOutputMode* pOutputMode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnWaveOutputMode* pOutputMode)
__ModuleInitNotifications	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleInitNotifications(XnModuleNodeHandle hInstance, XnNodeNotifications* pNotifications, void* pCookie)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnNodeNotifications* pNotifications, void* pCookie)
__ModuleIsCalibrationData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsCalibrationData(XnModuleNodeHandle hGenerator, XnUInt32 nSlot)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUInt32 nSlot)
__ModuleIsCapabilitySupported	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsCapabilitySupported(XnModuleNodeHandle hInstance, const XnChar* strCapabilityName)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strCapabilityName)
__ModuleIsEOF	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsEOF(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleIsFrameSyncedWith	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsFrameSyncedWith(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleIsGenerating	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsGenerating(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleIsGestureAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsGestureAvailable(XnModuleNodeHandle hGenerator, const XnChar* strGesture)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar* strGesture)
__ModuleIsGestureProgressSupported	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsGestureProgressSupported(XnModuleNodeHandle hGenerator, const XnChar* strGesture)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar* strGesture)
__ModuleIsJointActive	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsJointActive(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint)
__ModuleIsJointAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsJointAvailable(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint)
__ModuleIsMirrored	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsMirrored(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleIsNewDataAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsNewDataAvailable(XnModuleNodeHandle hGenerator, XnUInt64* pnTimestamp)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUInt64* pnTimestamp)
__ModuleIsPixelFormatSupported	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsPixelFormatSupported(XnModuleNodeHandle hGenerator, XnPixelFormat Format)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnPixelFormat Format)
__ModuleIsProfileAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsProfileAvailable(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile)
__ModuleIsSkeletonCalibrated	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsSkeletonCalibrated(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleIsSkeletonCalibrating	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsSkeletonCalibrating(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleIsSkeletonTracking	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsSkeletonTracking(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleIsViewPointAs	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsViewPointAs(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleIsViewPointSupported	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleIsViewPointSupported(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleLoadCalibrationData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleLoadCalibrationData(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot)
__ModuleLoadCalibrationDataFromFile	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleLoadCalibrationDataFromFile(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName)
__ModuleNeedPoseForSkeletonCalibration	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnBool XN_CALLBACK_TYPE __ModuleNeedPoseForSkeletonCalibration(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleNodeToHandle	/usr/include/ni/XnModuleCppRegistratration.h	/^inline XnModuleNodeHandle __ModuleNodeToHandle(xn::ModuleProductionNode* pNode)$/;"	f	signature:(xn::ModuleProductionNode* pNode)
__ModuleOnNodeAdded	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeAdded(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, XnProductionNodeType type, XnCodecID compression)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, XnProductionNodeType type, XnCodecID compression)
__ModuleOnNodeGeneralPropChanged	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeGeneralPropChanged(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer)
__ModuleOnNodeIntPropChanged	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeIntPropChanged(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnUInt64 nValue)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnUInt64 nValue)
__ModuleOnNodeNewData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeNewData(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void *pData, XnUInt32 nSize)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void *pData, XnUInt32 nSize)
__ModuleOnNodeRealPropChanged	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeRealPropChanged(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnDouble dValue)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, XnDouble dValue)
__ModuleOnNodeRemoved	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeRemoved(XnModuleNodeHandle hGenerator, const XnChar *strNodeName)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName)
__ModuleOnNodeStateReady	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeStateReady(XnModuleNodeHandle hGenerator, const XnChar *strNodeName)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName)
__ModuleOnNodeStringPropChanged	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleOnNodeStringPropChanged(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, const XnChar* strValue)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar *strNodeName, const XnChar* strPropName, const XnChar* strValue)
__ModuleReadNext	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleReadNext(XnModuleNodeHandle hInstance)$/;"	f	signature:(XnModuleNodeHandle hInstance)
__ModuleRegisterCalibrationCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterCalibrationCallbacks(XnModuleNodeHandle hGenerator, XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterGestureCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterGestureCallbacks(XnModuleNodeHandle hGenerator, XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterHandCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterHandCallbacks(XnModuleNodeHandle hGenerator, XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToCroppingChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToCroppingChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToEndOfFileReached	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToEndOfFileReached(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToErrorStateChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToErrorStateChange(XnModuleNodeHandle hInstance, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToFieldOfViewChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToFieldOfViewChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToFrameSyncChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToFrameSyncChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToGenerationRunningChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToGenerationRunningChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToGestureChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToGestureChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToJointConfigurationChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToJointConfigurationChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToLockChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToLockChange(XnModuleNodeHandle hInstance, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToMapOutputModeChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToMapOutputModeChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToMirrorChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToMirrorChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToNewDataAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToNewDataAvailable(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToPixelFormatChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToPixelFormatChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToPoseCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToPoseCallbacks(XnModuleNodeHandle hGenerator, XnModulePoseDetectionCallback PoseDetectionStartCB, XnModulePoseDetectionCallback PoseDetectionEndCB, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModulePoseDetectionCallback PoseDetectionStartCB, XnModulePoseDetectionCallback PoseDetectionEndCB, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToPowerLineFrequencyChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToPowerLineFrequencyChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToUserPositionChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToUserPositionChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToViewPointChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToViewPointChange(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterToWaveOutputModeChanges	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterToWaveOutputModeChanges(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRegisterUserCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRegisterUserCallbacks(XnModuleNodeHandle hGenerator, XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback)
__ModuleRemoveGesture	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRemoveGesture(XnModuleNodeHandle hGenerator, const XnChar* strGesture)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar* strGesture)
__ModuleRequestSkeletonCalibration	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleRequestSkeletonCalibration(XnModuleNodeHandle hGenerator, XnUserID user, XnBool bForce)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnBool bForce)
__ModuleResetSkeleton	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleResetSkeleton(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleResetViewPoint	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleResetViewPoint(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleSaveCalibrationData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSaveCalibrationData(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, XnUInt32 nSlot)
__ModuleSaveCalibrationDataToFile	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSaveCalibrationDataToFile(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user, const XnChar* strFileName)
__ModuleSeekToFrame	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSeekToFrame(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
__ModuleSeekToTimeStamp	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSeekToTimeStamp(XnModuleNodeHandle hInstance, XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
__ModuleSetCropping	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetCropping(XnModuleNodeHandle hGenerator, const XnCropping* pCropping)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnCropping* pCropping)
__ModuleSetGeneralProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetGeneralProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)
__ModuleSetInputStream	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetInputStream(XnModuleNodeHandle hInstance, void *pStreamCookie, XnPlayerInputStreamInterface *pStream)$/;"	f	signature:(XnModuleNodeHandle hInstance, void *pStreamCookie, XnPlayerInputStreamInterface *pStream)
__ModuleSetIntProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetIntProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue)
__ModuleSetJointActive	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetJointActive(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint, XnBool bState)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonJoint eJoint, XnBool bState)
__ModuleSetLockState	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetLockState(XnModuleNodeHandle hInstance, XnBool bLocked)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnBool bLocked)
__ModuleSetMapOutputMode	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetMapOutputMode(XnModuleNodeHandle hGenerator, const XnMapOutputMode* pOutputMode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnMapOutputMode* pOutputMode)
__ModuleSetMirror	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetMirror(XnModuleNodeHandle hGenerator, XnBool bMirror)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnBool bMirror)
__ModuleSetNodeNotifications	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetNodeNotifications(XnModuleNodeHandle hInstance, void *pNodeNotificationsCookie, XnNodeNotifications *pNodeNotifications)$/;"	f	signature:(XnModuleNodeHandle hInstance, void *pNodeNotificationsCookie, XnNodeNotifications *pNodeNotifications)
__ModuleSetOutputStream	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetOutputStream(XnModuleNodeHandle hInstance, void *pCookie, XnRecorderOutputStreamInterface *pStream)$/;"	f	signature:(XnModuleNodeHandle hInstance, void *pCookie, XnRecorderOutputStreamInterface *pStream)
__ModuleSetPixelFormat	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetPixelFormat(XnModuleNodeHandle hGenerator, XnPixelFormat Format)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnPixelFormat Format)
__ModuleSetPowerLineFrequency	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetPowerLineFrequency(XnModuleNodeHandle hGenerator, XnPowerLineFrequency nFrequency)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnPowerLineFrequency nFrequency)
__ModuleSetRealProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetRealProperty(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble dValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, XnDouble dValue)
__ModuleSetRepeat	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetRepeat(XnModuleNodeHandle hInstance, XnBool bRepeat)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnBool bRepeat)
__ModuleSetSkeletonProfile	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetSkeletonProfile(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnSkeletonProfile eProfile)
__ModuleSetSkeletonSmoothing	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetSkeletonSmoothing(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor)
__ModuleSetStringProperty	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetStringProperty(XnModuleNodeHandle hInstance, const XnChar* strName, const XnChar* strValue)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strName, const XnChar* strValue)
__ModuleSetTrackingSmoothing	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetTrackingSmoothing(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnFloat fSmoothingFactor)
__ModuleSetUserPosition	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetUserPosition(XnModuleNodeHandle hGenerator, XnUInt32 nIndex, const XnBoundingBox3D* pPosition)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUInt32 nIndex, const XnBoundingBox3D* pPosition)
__ModuleSetViewPoint	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetViewPoint(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleSetWaveOutputMode	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleSetWaveOutputMode(XnModuleNodeHandle hGenerator, const XnWaveOutputMode* pOutputMode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnWaveOutputMode* pOutputMode)
__ModuleStartGenerating	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStartGenerating(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleStartPoseDetection	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStartPoseDetection(XnModuleNodeHandle hGenerator, const XnChar* strPose, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnChar* strPose, XnUserID user)
__ModuleStartSkeletonTracking	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStartSkeletonTracking(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleStartTracking	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStartTracking(XnModuleNodeHandle hGenerator, const XnPoint3D* pPosition)$/;"	f	signature:(XnModuleNodeHandle hGenerator, const XnPoint3D* pPosition)
__ModuleStopFrameSyncWith	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStopFrameSyncWith(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnNodeHandle hNode)
__ModuleStopGenerating	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleStopGenerating(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleStopNotifications	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleStopNotifications(XnModuleNodeHandle hInstance)$/;"	f	signature:(XnModuleNodeHandle hInstance)
__ModuleStopPoseDetection	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStopPoseDetection(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleStopSkeletonTracking	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStopSkeletonTracking(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleStopTracking	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStopTracking(XnModuleNodeHandle hGenerator, XnUserID user)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnUserID user)
__ModuleStopTrackingAll	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleStopTrackingAll(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__ModuleTellFrame	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleTellFrame(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnUInt32* pnFrame)$/;"	f	signature:(XnModuleNodeHandle hInstance, const XnChar* strNodeName, XnUInt32* pnFrame)
__ModuleTellTimestamp	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleTellTimestamp(XnModuleNodeHandle hInstance, XnUInt64* pnTimestamp)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnUInt64* pnTimestamp)
__ModuleUnregisterCalibrationCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterCalibrationCallbacks(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromCroppingChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromCroppingChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromEndOfFileReached	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromEndOfFileReached(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromErrorStateChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromErrorStateChange(XnModuleNodeHandle hInstance, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnCallbackHandle hCallback)
__ModuleUnregisterFromFieldOfViewChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromFieldOfViewChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromFrameSyncChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromFrameSyncChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromGenerationRunningChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromGenerationRunningChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromGestureChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromGestureChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromJointConfigurationChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromJointConfigurationChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromLockChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromLockChange(XnModuleNodeHandle hInstance, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hInstance, XnCallbackHandle hCallback)
__ModuleUnregisterFromMapOutputModeChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromMapOutputModeChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromMirrorChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromMirrorChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromNewDataAvailable	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromNewDataAvailable(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromPixelFormatChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromPixelFormatChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromPoseCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromPoseCallbacks(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromPowerLineFrequencyChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromUserPositionChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromUserPositionChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromViewPointChange	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromViewPointChange(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterFromWaveOutputModeChanges	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterFromWaveOutputModeChanges(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterGestureCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterGestureCallbacks(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterHandCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterHandCallbacks(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUnregisterUserCallbacks	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT void XN_CALLBACK_TYPE __ModuleUnregisterUserCallbacks(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)$/;"	f	signature:(XnModuleNodeHandle hGenerator, XnCallbackHandle hCallback)
__ModuleUpdateData	/usr/include/ni/XnModuleCFunctions.h	/^XN_C_API_EXPORT XnStatus XN_CALLBACK_TYPE __ModuleUpdateData(XnModuleNodeHandle hGenerator)$/;"	f	signature:(XnModuleNodeHandle hGenerator)
__NICODECIDS_H__	/usr/include/ni/XnCodecIDs.h	/^#define __NICODECIDS_H__$/;"	d
__NIINTERNALDEFS_H__	/usr/include/ni/XnInternalDefs.h	/^#define __NIINTERNALDEFS_H__$/;"	d
__XNARRAY_H__	/usr/include/ni/XnArray.h	/^#define __XNARRAY_H__$/;"	d
__XNBITSET_H__	/usr/include/ni/XnBitSet.h	/^#define __XNBITSET_H__$/;"	d
__XNOSMEMORY_H__	/usr/include/ni/XnOSMemory.h	/^#define __XNOSMEMORY_H__$/;"	d
__XNOSSTRINGS_H__	/usr/include/ni/XnOSStrings.h	/^#define __XNOSSTRINGS_H__$/;"	d
__XN_ALGORITHMS_H__	/usr/include/ni/XnAlgorithms.h	/^#define __XN_ALGORITHMS_H__$/;"	d
__XN_CALLBACK_H__	/usr/include/ni/XnCallback.h	/^#define __XN_CALLBACK_H__$/;"	d
__XN_CONTEXT_H__	/usr/include/ni/XnContext.h	/^#define __XN_CONTEXT_H__$/;"	d
__XN_CPP_WRAPPER_H__	/usr/include/ni/XnCppWrapper.h	/^#define __XN_CPP_WRAPPER_H__$/;"	d
__XN_ENUMERATION_ERRORS_H__	/usr/include/ni/XnEnumerationErrors.h	/^#define __XN_ENUMERATION_ERRORS_H__$/;"	d
__XN_EVENT_H__	/usr/include/ni/XnEvent.h	/^#define __XN_EVENT_H__$/;"	d
__XN_EXPORT_NODE_COMMON	/usr/include/ni/XnModuleCppRegistratration.h	/^#define __XN_EXPORT_NODE_COMMON(/;"	d
__XN_FPS_CALCULATOR_H__	/usr/include/ni/XnFPSCalculator.h	/^#define __XN_FPS_CALCULATOR_H__$/;"	d
__XN_GENERAL_BUFFER_H__	/usr/include/ni/XnGeneralBuffer.h	/^#define __XN_GENERAL_BUFFER_H__$/;"	d
__XN_LICENSING_H__	/usr/include/ni/XnLicensing.h	/^#define __XN_LICENSING_H__$/;"	d
__XN_MODULE_CPP_INTERFACE_H__	/usr/include/ni/XnModuleCppInterface.h	/^#define __XN_MODULE_CPP_INTERFACE_H__$/;"	d
__XN_MODULE_CPP_REGISTRATION_H__	/usr/include/ni/XnModuleCppRegistratration.h	/^#define __XN_MODULE_CPP_REGISTRATION_H__$/;"	d
__XN_MODULE_INTERFACE_H__	/usr/include/ni/XnModuleInterface.h	/^#define __XN_MODULE_INTERFACE_H__$/;"	d
__XN_OPEN_NI_H__	/usr/include/ni/XnOpenNI.h	/^#define __XN_OPEN_NI_H__$/;"	d
__XN_OPEN_NI_STATUS_H__	/usr/include/ni/XnStatus.h	/^#define __XN_OPEN_NI_STATUS_H__$/;"	d
__XN_OS_CPP_H__	/usr/include/ni/XnOSCpp.h	/^#define __XN_OS_CPP_H__$/;"	d
__XN_OS_H__	/usr/include/ni/XnOS.h	/^#define __XN_OS_H__$/;"	d
__XN_PLATFORM_H__	/usr/include/ni/XnPlatform.h	/^#define __XN_PLATFORM_H__$/;"	d
__XN_PRD_NODE_H__	/usr/include/ni/XnPrdNode.h	/^#define __XN_PRD_NODE_H__$/;"	d
__XN_PRD_NODE_INFO_H__	/usr/include/ni/XnPrdNodeInfo.h	/^#define __XN_PRD_NODE_INFO_H__$/;"	d
__XN_PRD_NODE_INFO_LIST_H__	/usr/include/ni/XnPrdNodeInfoList.h	/^#define __XN_PRD_NODE_INFO_LIST_H__$/;"	d
__XN_PROP_NAMES_H__	/usr/include/ni/XnPropNames.h	/^#define __XN_PROP_NAMES_H__$/;"	d
__XN_QUERIES_H__	/usr/include/ni/XnQueries.h	/^#define __XN_QUERIES_H__$/;"	d
__XN_STATUS_CODES_H__	/usr/include/ni/XnStatusCodes.h	/^#define __XN_STATUS_CODES_H__$/;"	d
__XN_STATUS_REGISTER_H__	/usr/include/ni/XnStatusRegister.h	/^#define __XN_STATUS_REGISTER_H__$/;"	d
__XN_THREAD_SAFE_QUEUE_H__	/usr/include/ni/XnThreadSafeQueue.h	/^#define __XN_THREAD_SAFE_QUEUE_H__$/;"	d
__XN_TYPES_H__	/usr/include/ni/XnTypes.h	/^#define __XN_TYPES_H__$/;"	d
__XN_UTILS_H__	/usr/include/ni/XnUtils.h	/^#define __XN_UTILS_H__$/;"	d
__anon1::NamedSem	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	int NamedSem;$/;"	m	struct:__anon1	access:public
__anon1::bManualReset	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bManualReset;$/;"	m	struct:__anon1	access:public
__anon1::bNamed	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bNamed;$/;"	m	struct:__anon1	access:public
__anon1::bSignaled	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bSignaled;$/;"	m	struct:__anon1	access:public
__anon1::cond	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	pthread_cond_t cond;$/;"	m	struct:__anon1	access:public
__anon1::csSemFileName	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnChar csSemFileName[XN_FILE_MAX_PATH];$/;"	m	struct:__anon1	access:public
__anon1::hSemFile	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	int hSemFile;$/;"	m	struct:__anon1	access:public
__anon1::mutex	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	pthread_mutex_t mutex;$/;"	m	struct:__anon1	access:public
bEnabled	/usr/include/ni/XnTypes.h	/^	XnBool bEnabled;$/;"	m	struct:XnCropping	access:public
bHighRes	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bHighRes;$/;"	m	struct:XnOSTimer	access:public
bIsNew	/usr/include/ni/XnTypes.h	/^	XnBool bIsNew;$/;"	m	struct:XnOutputMetaData	access:public
bManualReset	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bManualReset;$/;"	m	struct:__anon1	access:public
bNamed	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bNamed;$/;"	m	struct:__anon1	access:public
bSignaled	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnBool bSignaled;$/;"	m	struct:__anon1	access:public
begin	/usr/include/ni/XnArray.h	/^	ConstIterator begin() const$/;"	f	class:XnArray	access:public	signature:() const
begin	/usr/include/ni/XnArray.h	/^	Iterator begin()$/;"	f	class:XnArray	access:public	signature:()
begin	/usr/include/ni/XnHash.h	/^	ConstIterator begin() const$/;"	f	class:XnHash	access:public	signature:() const
begin	/usr/include/ni/XnHash.h	/^	Iterator begin()$/;"	f	class:XnHash	access:public	signature:()
begin	/usr/include/ni/XnList.h	/^	ConstIterator begin() const$/;"	f	class:XnList	access:public	signature:() const
begin	/usr/include/ni/XnList.h	/^	Iterator begin()$/;"	f	class:XnList	access:public	signature:()
cond	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	pthread_cond_t cond;$/;"	m	struct:__anon1	access:public
createHandler	/usr/include/ni/XnCppWrapper.h	/^			HandCreate createHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
csCPUName	/usr/include/ni/XnOS.h	/^	XnChar csCPUName[XN_MAX_OS_NAME_LENGTH];$/;"	m	struct:xnOSInfo	access:public
csMessage	/usr/include/ni/XnStatusRegister.h	/^	const XnChar* csMessage;$/;"	m	struct:XnErrorCodeData	access:public
csName	/usr/include/ni/XnStatusRegister.h	/^	const XnChar* csName;$/;"	m	struct:XnErrorCodeData	access:public
csOSName	/usr/include/ni/XnOS.h	/^	XnChar csOSName[XN_MAX_OS_NAME_LENGTH];$/;"	m	struct:xnOSInfo	access:public
csSemFileName	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	XnChar csSemFileName[XN_FILE_MAX_PATH];$/;"	m	struct:__anon1	access:public
destroyHandler	/usr/include/ni/XnCppWrapper.h	/^			HandDestroy destroyHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
elements	/usr/include/ni/XnTypes.h	/^	XnFloat elements[9];$/;"	m	struct:XnMatrix3X3	access:public
end	/usr/include/ni/XnArray.h	/^	ConstIterator end() const$/;"	f	class:XnArray	access:public	signature:() const
end	/usr/include/ni/XnArray.h	/^	Iterator end()$/;"	f	class:XnArray	access:public	signature:()
end	/usr/include/ni/XnHash.h	/^	ConstIterator end() const$/;"	f	class:XnHash	access:public	signature:() const
end	/usr/include/ni/XnHash.h	/^	Iterator end()$/;"	f	class:XnHash	access:public	signature:()
end	/usr/include/ni/XnList.h	/^	ConstIterator end() const$/;"	f	class:XnList	access:public	signature:() const
end	/usr/include/ni/XnList.h	/^	Iterator end()$/;"	f	class:XnList	access:public	signature:()
endHandler	/usr/include/ni/XnCppWrapper.h	/^			CalibrationEnd endHandler;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
endHandler	/usr/include/ni/XnCppWrapper.h	/^			PoseDetection endHandler;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
fConfidence	/usr/include/ni/XnTypes.h	/^	XnConfidence	fConfidence;$/;"	m	struct:XnSkeletonJointOrientation	access:public
fConfidence	/usr/include/ni/XnTypes.h	/^	XnConfidence	fConfidence;$/;"	m	struct:XnSkeletonJointPosition	access:public
fHFOV	/usr/include/ni/XnTypes.h	/^	XnDouble fHFOV;$/;"	m	struct:XnFieldOfView	access:public
fVFOV	/usr/include/ni/XnTypes.h	/^	XnDouble fVFOV;$/;"	m	struct:XnFieldOfView	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
hFile	/usr/include/ni/XnLog.h	/^	XN_FILE_HANDLE hFile;$/;"	m	struct:XnDump	access:public
hNode	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus XN_API_DEPRECATED("Please use xnProductionNodeAddRef() instead.") xnRefProductionNode(XnNodeHandle hNode);$/;"	v
hNode	/usr/include/ni/XnContext.h	/^XN_C_API void XN_API_DEPRECATED("Please use xnProductionNodeRelease() instead.") xnUnrefProductionNode(XnNodeHandle hNode);$/;"	v
hSemFile	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	int hSemFile;$/;"	m	struct:__anon1	access:public
lostHandler	/usr/include/ni/XnCppWrapper.h	/^			UserHandler lostHandler;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
m_Bins	/usr/include/ni/XnHash.h	/^	XnList** m_Bins;$/;"	m	class:XnHash	access:protected
m_CompareFunction	/usr/include/ni/XnHash.h	/^	XnCompareFunction m_CompareFunction;$/;"	m	class:XnHash	access:protected
m_Data	/usr/include/ni/XnBaseNode.h	/^	XnValue m_Data;$/;"	m	struct:XnBaseNode	access:public
m_ExportedNodes	/usr/include/ni/XnModuleCppInterface.h	/^		ExportedNodesList m_ExportedNodes;$/;"	m	class:xn::Module	access:private
m_Handlers	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_Handlers;$/;"	m	class:XnEvent	access:protected
m_HashFunction	/usr/include/ni/XnHash.h	/^	XnHashFunction m_HashFunction;$/;"	m	class:XnHash	access:protected
m_Info	/usr/include/ni/XnCppWrapper.h	/^			NodeInfo m_Info;$/;"	m	class:xn::NodeInfoList::Iterator	access:private
m_Iterator	/usr/include/ni/XnHash.h	/^		XnList::Iterator m_Iterator;$/;"	m	class:XnHash::ConstIterator	access:protected
m_List	/usr/include/ni/XnQueue.h	/^	XnList m_List;$/;"	m	class:XnQueue	access:private
m_List	/usr/include/ni/XnStack.h	/^	XnList m_List;$/;"	m	class:XnStack	access:private
m_Res	/usr/include/ni/XnCppWrapper.h	/^		XnResolution m_Res;$/;"	m	class:xn::Resolution	access:private
m_ToBeAdded	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_ToBeAdded;$/;"	m	class:XnEvent	access:protected
m_ToBeRemoved	/usr/include/ni/XnEvent.h	/^	XnCallbackPtrList m_ToBeRemoved;$/;"	m	class:XnEvent	access:protected
m_UserHandler	/usr/include/ni/XnCppWrapper.h	/^		StateChangedHandler m_UserHandler;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
m_array	/usr/include/ni/XnBitSet.h	/^	XnArray<XnUInt32> m_array;$/;"	m	class:XnBitSet	access:private
m_audio	/usr/include/ni/XnCppWrapper.h	/^		XnAudioMetaData m_audio;$/;"	m	class:xn::AudioMetaData	access:private
m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::AudioMetaData	access:private
m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::Context	access:private
m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::EnumerationErrors	access:private
m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::NodeInfoList	access:private
m_bGrayscale16Bit	/usr/include/ni/XnTypes.h	/^	XnBool m_bGrayscale16Bit : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_bGrayscale8Bit	/usr/include/ni/XnTypes.h	/^	XnBool m_bGrayscale8Bit : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_bMJPEG	/usr/include/ni/XnTypes.h	/^	XnBool m_bMJPEG : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_bOwnsAllocator	/usr/include/ni/XnList.h	/^	XnBool m_bOwnsAllocator;$/;"	m	class:XnList	access:protected
m_bRGB24	/usr/include/ni/XnTypes.h	/^	XnBool m_bRGB24 : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_bYUV422	/usr/include/ni/XnTypes.h	/^	XnBool m_bYUV422 : 1;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_depth	/usr/include/ni/XnCppWrapper.h	/^		XnDepthMetaData m_depth;$/;"	m	class:xn::DepthMetaData	access:private
m_depthMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::DepthMap m_depthMap;$/;"	m	class:xn::DepthMetaData	access:private
m_gray16Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::Grayscale16Map m_gray16Map;$/;"	m	class:xn::ImageMetaData	access:private
m_gray8Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::Grayscale8Map m_gray8Map;$/;"	m	class:xn::ImageMetaData	access:private
m_hCS	/usr/include/ni/XnOSCpp.h	/^	XN_CRITICAL_SECTION_HANDLE m_hCS;$/;"	m	class:XnAutoCSLocker	access:private
m_hCallback	/usr/include/ni/XnCppWrapper.h	/^		XnCallbackHandle m_hCallback;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
m_hEvent	/usr/include/ni/XnOSCpp.h	/^	XN_EVENT_HANDLE m_hEvent;$/;"	m	class:XnOSEvent	access:private
m_hLock	/usr/include/ni/XnEvent.h	/^	XN_CRITICAL_SECTION_HANDLE m_hLock;$/;"	m	class:XnEvent	access:protected
m_hLock	/usr/include/ni/XnThreadSafeQueue.h	/^	mutable XN_CRITICAL_SECTION_HANDLE m_hLock;$/;"	m	class:XnThreadSafeQueue	access:private
m_hMutex	/usr/include/ni/XnOSCpp.h	/^	XN_MUTEX_HANDLE m_hMutex;$/;"	m	class:XnAutoMutexLocker	access:private
m_hNode	/usr/include/ni/XnCppWrapper.h	/^		XnNodeHandle m_hNode;$/;"	m	class:xn::Capability	access:protected
m_hNode	/usr/include/ni/XnCppWrapper.h	/^		XnNodeHandle m_hNode;$/;"	m	class:xn::NodeWrapper	access:protected
m_image	/usr/include/ni/XnCppWrapper.h	/^		XnImageMetaData m_image;$/;"	m	class:xn::ImageMetaData	access:private
m_imageMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::ImageMap m_imageMap;$/;"	m	class:xn::ImageMetaData	access:private
m_ir	/usr/include/ni/XnCppWrapper.h	/^		XnIRMetaData m_ir;$/;"	m	class:xn::IRMetaData	access:private
m_irMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::IRMap m_irMap;$/;"	m	class:xn::IRMetaData	access:private
m_it	/usr/include/ni/XnCppWrapper.h	/^			XnEnumerationErrorsIterator m_it;$/;"	m	class:xn::EnumerationErrors::Iterator	access:private
m_it	/usr/include/ni/XnCppWrapper.h	/^			XnNodeInfoListIterator m_it;$/;"	m	class:xn::NodeInfoList::Iterator	access:private
m_labelMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::LabelMap m_labelMap;$/;"	m	class:xn::SceneMetaData	access:private
m_map	/usr/include/ni/XnCppWrapper.h	/^		XnMapMetaData m_map;$/;"	m	class:xn::MapMetaData	access:private
m_nAllocatedSize	/usr/include/ni/XnArray.h	/^	XnUInt32 m_nAllocatedSize;$/;"	m	class:XnArray	access:private
m_nAllocatedSize	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nAllocatedSize;$/;"	m	class:xn::OutputMetaData	access:private
m_nCurrentBin	/usr/include/ni/XnHash.h	/^		XnUInt16 m_nCurrentBin;$/;"	m	class:XnHash::ConstIterator	access:protected
m_nInitStatus	/usr/include/ni/XnHash.h	/^	XnStatus m_nInitStatus;$/;"	m	class:XnHash	access:protected
m_nMinBin	/usr/include/ni/XnHash.h	/^	XnUInt16 m_nMinBin;$/;"	m	class:XnHash	access:protected
m_nPadding	/usr/include/ni/XnTypes.h	/^	XnUInt m_nPadding : 3;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_nReserved	/usr/include/ni/XnTypes.h	/^	XnUInt m_nReserved : 24;$/;"	m	struct:XnSupportedPixelFormats	access:public
m_nSize	/usr/include/ni/XnArray.h	/^	XnUInt32 m_nSize;$/;"	m	class:XnArray	access:private
m_nSize	/usr/include/ni/XnBitSet.h	/^	XnUInt32 m_nSize;$/;"	m	class:XnBitSet	access:private
m_nStatus	/usr/include/ni/XnOSCpp.h	/^	XnStatus m_nStatus;$/;"	m	class:XnAutoMutexLocker	access:private
m_nXRes	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nXRes;$/;"	m	class:xn::Resolution	access:private
m_nYRes	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nYRes;$/;"	m	class:xn::Resolution	access:private
m_output	/usr/include/ni/XnCppWrapper.h	/^		XnOutputMetaData m_output;$/;"	m	class:xn::OutputMetaData	access:private
m_pAllocatedData	/usr/include/ni/XnCppWrapper.h	/^		XnUInt8* m_pAllocatedData;$/;"	m	class:xn::OutputMetaData	access:protected
m_pBase	/usr/include/ni/XnList.h	/^	XnNode* m_pBase;$/;"	m	class:XnList	access:protected
m_pContext	/usr/include/ni/XnCppWrapper.h	/^		XnContext* m_pContext;$/;"	m	class:xn::Context	access:private
m_pCurrent	/usr/include/ni/XnList.h	/^		XnNode* m_pCurrent;$/;"	m	class:XnList::ConstIterator	access:protected
m_pData	/usr/include/ni/XnArray.h	/^	T* m_pData;$/;"	m	class:XnArray	access:private
m_pErrors	/usr/include/ni/XnCppWrapper.h	/^		XnEnumerationErrors* m_pErrors;$/;"	m	class:xn::EnumerationErrors	access:private
m_pHash	/usr/include/ni/XnHash.h	/^		const XnHash* m_pHash;$/;"	m	class:XnHash::ConstIterator	access:protected
m_pInfo	/usr/include/ni/XnCppWrapper.h	/^		XnNodeInfo* m_pInfo;$/;"	m	class:xn::NodeInfo	access:private
m_pList	/usr/include/ni/XnCppWrapper.h	/^		XnNodeInfoList* m_pList;$/;"	m	class:xn::NodeInfoList	access:private
m_pNeededNodes	/usr/include/ni/XnCppWrapper.h	/^		mutable NodeInfoList* m_pNeededNodes;$/;"	m	class:xn::NodeInfo	access:private
m_pNext	/usr/include/ni/XnBaseNode.h	/^	XnBaseNode* m_pNext;$/;"	m	struct:XnBaseNode	access:public
m_pNodeAllocator	/usr/include/ni/XnList.h	/^	INiNodeAllocator* m_pNodeAllocator;$/;"	m	class:XnList	access:protected
m_pPrevious	/usr/include/ni/XnBaseNode.h	/^	XnBaseNode* m_pPrevious;$/;"	m	struct:XnBaseNode	access:public
m_pQuery	/usr/include/ni/XnCppWrapper.h	/^		XnNodeQuery* m_pQuery;$/;"	m	class:xn::Query	access:private
m_pUserCookie	/usr/include/ni/XnCppWrapper.h	/^		void* m_pUserCookie;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
m_ppData	/usr/include/ni/XnCppWrapper.h	/^		const XnUInt8** m_ppData;$/;"	m	class:xn::OutputMetaData	access:private
m_rgb24Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::RGB24Map m_rgb24Map;$/;"	m	class:xn::ImageMetaData	access:private
m_scene	/usr/include/ni/XnCppWrapper.h	/^		XnSceneMetaData m_scene;$/;"	m	class:xn::SceneMetaData	access:private
m_strCap	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* m_strCap;$/;"	m	class:xn::GeneralIntCapability	access:private
m_strName	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* m_strName;$/;"	m	class:xn::Resolution	access:private
m_version	/usr/include/ni/XnCppWrapper.h	/^		XnVersion m_version;$/;"	m	class:xn::Version	access:private
m_writableDepthMap	/usr/include/ni/XnCppWrapper.h	/^		xn::DepthMap m_writableDepthMap;$/;"	m	class:xn::DepthMetaData	access:private
m_writableGray16Map	/usr/include/ni/XnCppWrapper.h	/^		xn::Grayscale16Map m_writableGray16Map;$/;"	m	class:xn::ImageMetaData	access:private
m_writableGray8Map	/usr/include/ni/XnCppWrapper.h	/^		xn::Grayscale8Map m_writableGray8Map;$/;"	m	class:xn::ImageMetaData	access:private
m_writableIRMap	/usr/include/ni/XnCppWrapper.h	/^		xn::IRMap m_writableIRMap;$/;"	m	class:xn::IRMetaData	access:private
m_writableImageMap	/usr/include/ni/XnCppWrapper.h	/^		xn::ImageMap m_writableImageMap;$/;"	m	class:xn::ImageMetaData	access:private
m_writableLabelMap	/usr/include/ni/XnCppWrapper.h	/^		xn::LabelMap m_writableLabelMap;$/;"	m	class:xn::SceneMetaData	access:private
m_writableRgb24Map	/usr/include/ni/XnCppWrapper.h	/^		xn::RGB24Map m_writableRgb24Map;$/;"	m	class:xn::ImageMetaData	access:private
moduleInterface	/usr/include/ni/XnModuleCppRegistratration.h	/^static XnOpenNIModuleInterface moduleInterface = $/;"	v
mutex	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	pthread_mutex_t mutex;$/;"	m	struct:__anon1	access:public
nBitsPerSample	/usr/include/ni/XnTypes.h	/^	XnUInt16 nBitsPerSample;$/;"	m	struct:XnWaveOutputMode	access:public
nBlue	/usr/include/ni/XnTypes.h	/^	XnUInt8 nBlue;$/;"	m	struct:XnRGB24Pixel	access:public
nBuild	/usr/include/ni/XnTypes.h	/^	XnUInt32 nBuild;$/;"	m	struct:XnVersion	access:public
nChannels	/usr/include/ni/XnTypes.h	/^	XnUInt8 nChannels;$/;"	m	struct:XnWaveOutputMode	access:public
nCode	/usr/include/ni/XnStatusRegister.h	/^	XnUInt32 nCode;$/;"	m	struct:XnErrorCodeData	access:public
nDataSize	/usr/include/ni/XnGeneralBuffer.h	/^	XnUInt32 nDataSize;$/;"	m	struct:XnGeneralBuffer	access:public
nDataSize	/usr/include/ni/XnTypes.h	/^	XnUInt32 nDataSize;$/;"	m	struct:XnOutputMetaData	access:public
nFPS	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFPS;$/;"	m	struct:XnMapMetaData	access:public
nFPS	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFPS;$/;"	m	struct:XnMapOutputMode	access:public
nFrameID	/usr/include/ni/XnTypes.h	/^	XnUInt32 nFrameID;$/;"	m	struct:XnOutputMetaData	access:public
nGreen	/usr/include/ni/XnTypes.h	/^	XnUInt8 nGreen;$/;"	m	struct:XnRGB24Pixel	access:public
nMaintenance	/usr/include/ni/XnTypes.h	/^	XnUInt16 nMaintenance;$/;"	m	struct:XnVersion	access:public
nMajor	/usr/include/ni/XnTypes.h	/^	XnUInt8 nMajor;$/;"	m	struct:XnVersion	access:public
nMinor	/usr/include/ni/XnTypes.h	/^	XnUInt8 nMinor;$/;"	m	struct:XnVersion	access:public
nProcessorsCount	/usr/include/ni/XnOS.h	/^	XnUInt32 nProcessorsCount;$/;"	m	struct:xnOSInfo	access:public
nRed	/usr/include/ni/XnTypes.h	/^	XnUInt8 nRed;$/;"	m	struct:XnRGB24Pixel	access:public
nSampleRate	/usr/include/ni/XnTypes.h	/^	XnUInt32 nSampleRate;$/;"	m	struct:XnWaveOutputMode	access:public
nTimestamp	/usr/include/ni/XnTypes.h	/^	XnUInt64 nTimestamp;$/;"	m	struct:XnOutputMetaData	access:public
nTotalMemory	/usr/include/ni/XnOS.h	/^	XnUInt64 nTotalMemory;$/;"	m	struct:xnOSInfo	access:public
nU	/usr/include/ni/XnTypes.h	/^	XnUInt8 nU;$/;"	m	struct:XnYUV422DoublePixel	access:public
nV	/usr/include/ni/XnTypes.h	/^	XnUInt8 nV;$/;"	m	struct:XnYUV422DoublePixel	access:public
nXOffset	/usr/include/ni/XnTypes.h	/^	XnUInt16 nXOffset;$/;"	m	struct:XnCropping	access:public
nXRes	/usr/include/ni/XnTypes.h	/^	XnUInt32 nXRes;$/;"	m	struct:XnMapOutputMode	access:public
nXSize	/usr/include/ni/XnTypes.h	/^	XnUInt16 nXSize;$/;"	m	struct:XnCropping	access:public
nY1	/usr/include/ni/XnTypes.h	/^	XnUInt8 nY1;$/;"	m	struct:XnYUV422DoublePixel	access:public
nY2	/usr/include/ni/XnTypes.h	/^	XnUInt8 nY2;$/;"	m	struct:XnYUV422DoublePixel	access:public
nYOffset	/usr/include/ni/XnTypes.h	/^	XnUInt16 nYOffset;$/;"	m	struct:XnCropping	access:public
nYRes	/usr/include/ni/XnTypes.h	/^	XnUInt32 nYRes;$/;"	m	struct:XnMapOutputMode	access:public
nYSize	/usr/include/ni/XnTypes.h	/^	XnUInt16 nYSize;$/;"	m	struct:XnCropping	access:public
nZRes	/usr/include/ni/XnTypes.h	/^	XnDepthPixel nZRes;$/;"	m	struct:XnDepthMetaData	access:public
newHandler	/usr/include/ni/XnCppWrapper.h	/^			UserHandler newHandler;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
operator !=	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator!=(const Iterator& other) const$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(const Iterator& other) const
operator !=	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator!=(const Iterator& other) const$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(const Iterator& other) const
operator !=	/usr/include/ni/XnCppWrapper.h	/^		bool operator!=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator !=	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool operator!=(const NodeWrapper& other)$/;"	f	class:xn::NodeWrapper	access:public	signature:(const NodeWrapper& other)
operator !=	/usr/include/ni/XnHash.h	/^		XnBool operator!=(const ConstIterator& other) const$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other) const
operator !=	/usr/include/ni/XnList.h	/^		XnBool operator!=(const ConstIterator& other) const$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other) const
operator ()	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel& operator()(XnUInt32 x, XnUInt32 y) const $/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 x, XnUInt32 y) const
operator ()	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel& operator()(XnUInt32 x, XnUInt32 y) const$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 x, XnUInt32 y) const
operator *	/usr/include/ni/XnCppWrapper.h	/^			inline NodeInfo operator*()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
operator *	/usr/include/ni/XnList.h	/^		const XnValue& operator*() const$/;"	f	class:XnList::ConstIterator	access:public	signature:() const
operator *	/usr/include/ni/XnList.h	/^		inline XnValue& operator*() const { return ((XnValue&)**(ConstIterator*)this); }$/;"	f	class:XnList::Iterator	access:public	signature:() const
operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator++(int)$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator++(int)$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator++()$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator++()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
operator ++	/usr/include/ni/XnHash.h	/^		ConstIterator operator++(int)$/;"	f	class:XnHash::ConstIterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnHash.h	/^		ConstIterator& operator++()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
operator ++	/usr/include/ni/XnHash.h	/^		inline Iterator operator++(int) $/;"	f	class:XnHash::Iterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnHash.h	/^		inline Iterator& operator++() $/;"	f	class:XnHash::Iterator	access:public	signature:()
operator ++	/usr/include/ni/XnList.h	/^		ConstIterator operator++(int)$/;"	f	class:XnList::ConstIterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnList.h	/^		ConstIterator& operator++()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
operator ++	/usr/include/ni/XnList.h	/^		inline Iterator operator++(int) $/;"	f	class:XnList::Iterator	access:public	signature:(int)
operator ++	/usr/include/ni/XnList.h	/^		inline Iterator& operator++() $/;"	f	class:XnList::Iterator	access:public	signature:()
operator --	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator--(int)$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(int)
operator --	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator--()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
operator --	/usr/include/ni/XnHash.h	/^		ConstIterator operator--(int)$/;"	f	class:XnHash::ConstIterator	access:public	signature:(int)
operator --	/usr/include/ni/XnHash.h	/^		ConstIterator& operator--()$/;"	f	class:XnHash::ConstIterator	access:public	signature:()
operator --	/usr/include/ni/XnHash.h	/^		inline Iterator operator--(int)$/;"	f	class:XnHash::Iterator	access:public	signature:(int)
operator --	/usr/include/ni/XnHash.h	/^		inline Iterator& operator--() $/;"	f	class:XnHash::Iterator	access:public	signature:()
operator --	/usr/include/ni/XnList.h	/^		ConstIterator operator--(int)$/;"	f	class:XnList::ConstIterator	access:public	signature:(int)
operator --	/usr/include/ni/XnList.h	/^		ConstIterator& operator--()$/;"	f	class:XnList::ConstIterator	access:public	signature:()
operator --	/usr/include/ni/XnList.h	/^		inline Iterator operator--(int)$/;"	f	class:XnList::Iterator	access:public	signature:(int)
operator --	/usr/include/ni/XnList.h	/^		inline Iterator& operator--() $/;"	f	class:XnList::Iterator	access:public	signature:()
operator <	/usr/include/ni/XnCppWrapper.h	/^		bool operator<(const Version& other) const $/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator <=	/usr/include/ni/XnCppWrapper.h	/^		bool operator<=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator =	/usr/include/ni/XnArray.h	/^	XnArray& operator=(const XnArray& other)$/;"	f	class:XnArray	access:public	signature:(const XnArray& other)
operator =	/usr/include/ni/XnCppWrapper.h	/^		AudioMetaData& operator=(const AudioMetaData&);$/;"	p	class:xn::AudioMetaData	access:private	signature:(const AudioMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		DepthMetaData& operator=(const DepthMetaData&);$/;"	p	class:xn::DepthMetaData	access:private	signature:(const DepthMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		IRMetaData& operator=(const IRMetaData&);$/;"	p	class:xn::IRMetaData	access:private	signature:(const IRMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		ImageMetaData& operator=(const ImageMetaData&);$/;"	p	class:xn::ImageMetaData	access:private	signature:(const ImageMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		MapMetaData& operator=(const MapMetaData&);$/;"	p	class:xn::MapMetaData	access:private	signature:(const MapMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		SceneMetaData& operator=(const SceneMetaData&);$/;"	p	class:xn::SceneMetaData	access:private	signature:(const SceneMetaData&)
operator =	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfo& operator=(const NodeInfo& other)$/;"	f	class:xn::NodeInfo	access:public	signature:(const NodeInfo& other)
operator =	/usr/include/ni/XnOSCpp.h	/^	inline XnAutoCSLocker& operator=(const XnAutoCSLocker& other)$/;"	f	class:XnAutoCSLocker	access:public	signature:(const XnAutoCSLocker& other)
operator ==	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator==(const Iterator& other) const$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(const Iterator& other) const
operator ==	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator==(const Iterator& other) const$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(const Iterator& other) const
operator ==	/usr/include/ni/XnCppWrapper.h	/^		bool operator==(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator ==	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool operator==(const NodeWrapper& other)$/;"	f	class:xn::NodeWrapper	access:public	signature:(const NodeWrapper& other)
operator ==	/usr/include/ni/XnHash.h	/^		XnBool operator==(const ConstIterator& other) const$/;"	f	class:XnHash::ConstIterator	access:public	signature:(const ConstIterator& other) const
operator ==	/usr/include/ni/XnList.h	/^		XnBool operator==(const ConstIterator& other) const$/;"	f	class:XnList::ConstIterator	access:public	signature:(const ConstIterator& other) const
operator >	/usr/include/ni/XnCppWrapper.h	/^		bool operator>(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator >=	/usr/include/ni/XnCppWrapper.h	/^		bool operator>=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
operator XN_EVENT_HANDLE	/usr/include/ni/XnOSCpp.h	/^	operator XN_EVENT_HANDLE() const $/;"	f	class:XnOSEvent	access:public	signature:() const
operator XnNodeHandle	/usr/include/ni/XnCppWrapper.h	/^		inline operator XnNodeHandle() const { return m_hNode; }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
operator XnNodeInfo*	/usr/include/ni/XnCppWrapper.h	/^		inline operator XnNodeInfo*()$/;"	f	class:xn::NodeInfo	access:public	signature:()
operator []	/usr/include/ni/XnArray.h	/^	T& operator[](XnUInt32 nIndex)$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex)
operator []	/usr/include/ni/XnArray.h	/^	const T& operator[](XnUInt32 nIndex) const$/;"	f	class:XnArray	access:public	signature:(XnUInt32 nIndex) const
operator []	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel& operator[](XnUInt32 nIndex) const $/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 nIndex) const
operator []	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel& operator[](XnUInt32 nIndex) const$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 nIndex) const
operator delete	/usr/include/ni/XnOS.h	/^		static void operator delete(void* p)$/;"	f	signature:(void* p)
operator delete	/usr/include/ni/XnOS.h	/^		static void operator delete(void* p, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)$/;"	f	signature:(void* p, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)
operator delete[]	/usr/include/ni/XnOS.h	/^		static void operator delete[](void* p)$/;"	f	signature:(void* p)
operator delete[]	/usr/include/ni/XnOS.h	/^		static void operator delete[](void* p, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)$/;"	f	signature:(void* p, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)
operator new	/usr/include/ni/XnOS.h	/^		static void* operator new(size_t size)$/;"	f	signature:(size_t size)
operator new	/usr/include/ni/XnOS.h	/^		static void* operator new(size_t size, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)$/;"	f	signature:(size_t size, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)
operator new[]	/usr/include/ni/XnOS.h	/^		static void* operator new[](size_t size)$/;"	f	signature:(size_t size)
operator new[]	/usr/include/ni/XnOS.h	/^		static void* operator new[](size_t size, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)$/;"	f	signature:(size_t size, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)
orientation	/usr/include/ni/XnTypes.h	/^	XnMatrix3X3		orientation;$/;"	m	struct:XnSkeletonJointOrientation	access:public
orientation	/usr/include/ni/XnTypes.h	/^	XnSkeletonJointOrientation	orientation;$/;"	m	struct:XnSkeletonJointTransformation	access:public
pAlternativeViewPointInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleAlternativeViewPointInterface* pAlternativeViewPointInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
pAntiFlickerInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleAntiFlickerInterface* pAntiFlickerInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
pCookie	/usr/include/ni/XnCallback.h	/^	void* pCookie;$/;"	m	struct:XnCallback	access:public
pCroppingInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleCroppingInterface* pCroppingInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
pCurrent	/usr/include/ni/XnTypes.h	/^	XnNodeInfoListNode* pCurrent;$/;"	m	struct:XnNodeInfoListIterator	access:public
pData	/usr/include/ni/XnGeneralBuffer.h	/^	void* pData;$/;"	m	struct:XnGeneralBuffer	access:public
pData	/usr/include/ni/XnTypes.h	/^	const XnDepthPixel* pData;$/;"	m	struct:XnDepthMetaData	access:public
pData	/usr/include/ni/XnTypes.h	/^	const XnIRPixel* pData;$/;"	m	struct:XnIRMetaData	access:public
pData	/usr/include/ni/XnTypes.h	/^	const XnLabel* pData;$/;"	m	struct:XnSceneMetaData	access:public
pData	/usr/include/ni/XnTypes.h	/^	const XnUInt8* pData;$/;"	m	struct:XnAudioMetaData	access:public
pData	/usr/include/ni/XnTypes.h	/^	const XnUInt8* pData;$/;"	m	struct:XnImageMetaData	access:public
pDeviceIdentificationInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleDeviceIdentificationInterface* pDeviceIdentificationInterface;$/;"	m	struct:XnModuleDeviceInterface	access:public
pErrorStateInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleErrorStateInterface* pErrorStateInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
pExtendedSerializationInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleExtendedSerializationInterface* pExtendedSerializationInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
pFrameSyncInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleFrameSyncInterface* pFrameSyncInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
pFuncPtr	/usr/include/ni/XnCallback.h	/^	XnFuncPtr pFuncPtr;$/;"	m	struct:XnCallback	access:public
pGeneralIntInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneralIntInterface* pGeneralIntInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleAudioGeneratorInterface	access:public
pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleGestureGeneratorInterface	access:public
pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleHandsGeneratorInterface	access:public
pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleMapGeneratorInterface	access:public
pGeneratorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGeneratorInterface* pGeneratorInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
pGetCountFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetExportedNodesCountPtr pGetCountFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
pGetEntryPointsFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetExportedNodesEntryPointsPtr pGetEntryPointsFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
pGetVersionFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleGetOpenNIVersionPtr pGetVersionFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
pLoadFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleLoadPtr pLoadFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
pLockAwareInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleLockAwareInterface* pLockAwareInterface;$/;"	m	struct:XnModuleProductionNodeInterface	access:public
pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnDepthMetaData	access:public
pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnIRMetaData	access:public
pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnImageMetaData	access:public
pMap	/usr/include/ni/XnTypes.h	/^	XnMapMetaData* pMap;$/;"	m	struct:XnSceneMetaData	access:public
pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleIRGeneratorInterface	access:public
pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleImageGeneratorInterface	access:public
pMapInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMapGeneratorInterface* pMapInterface;$/;"	m	struct:XnModuleSceneAnalyzerInterface	access:public
pMirrorInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleMirrorInterface* pMirrorInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
pNodeNotifications	/usr/include/ni/XnModuleInterface.h	/^	XnNodeNotifications* pNodeNotifications;$/;"	m	struct:XnModuleRecorderInterface	access:public
pObsolete1	/usr/include/ni/XnModuleInterface.h	/^	void* pObsolete1; \/\/ used to be pSeekingInterface (removed in 1.0.0.28)$/;"	m	struct:XnModuleGeneratorInterface	access:public
pObsolete1	/usr/include/ni/XnModuleInterface.h	/^	void* pObsolete1; \/\/ used to be pSeekingInterface (removed in 1.0.0.28)$/;"	m	struct:XnModulePlayerInterface	access:public
pOutput	/usr/include/ni/XnTypes.h	/^	XnOutputMetaData* pOutput;$/;"	m	struct:XnAudioMetaData	access:public
pOutput	/usr/include/ni/XnTypes.h	/^	XnOutputMetaData* pOutput;$/;"	m	struct:XnMapMetaData	access:public
pPoseCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pPoseCookie;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
pPoseDetectionInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModulePoseDetectionCapabilityInterface* pPoseDetectionInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleCodecInterface	access:public
pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleDeviceInterface	access:public
pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModulePlayerInterface	access:public
pProductionNode	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNode;$/;"	m	struct:XnModuleRecorderInterface	access:public
pProductionNodeInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleProductionNodeInterface* pProductionNodeInterface;$/;"	m	struct:XnModuleGeneratorInterface	access:public
pSkeletonInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleSkeletonCapabilityInterface* pSkeletonInterface;$/;"	m	struct:XnModuleUserGeneratorInterface	access:public
pUnloadFunc	/usr/include/ni/XnModuleInterface.h	/^	XnModuleUnloadPtr pUnloadFunc;$/;"	m	struct:XnOpenNIModuleInterface	access:public
pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
pUserPositionInterface	/usr/include/ni/XnModuleInterface.h	/^	XnModuleUserPositionCapabilityInterface* pUserPositionInterface;$/;"	m	struct:XnModuleDepthGeneratorInterface	access:public
position	/usr/include/ni/XnTypes.h	/^	XnSkeletonJointPosition		position;$/;"	m	struct:XnSkeletonJointTransformation	access:public
position	/usr/include/ni/XnTypes.h	/^	XnVector3D		position;$/;"	m	struct:XnSkeletonJointPosition	access:public
progressHandler	/usr/include/ni/XnCppWrapper.h	/^			GestureProgress progressHandler;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
ptPoint	/usr/include/ni/XnTypes.h	/^	XnPoint3D ptPoint;$/;"	m	struct:XnPlane3D	access:public
rbegin	/usr/include/ni/XnList.h	/^	ConstIterator rbegin() const$/;"	f	class:XnList	access:public	signature:() const
rbegin	/usr/include/ni/XnList.h	/^	Iterator rbegin()$/;"	f	class:XnList	access:public	signature:()
recognizedHandler	/usr/include/ni/XnCppWrapper.h	/^			GestureRecognized recognizedHandler;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
registerResult	/usr/include/ni/XnModuleCppRegistratration.h	/^static XnStatus registerResult = xnRegisterModuleWithOpenNI(&moduleInterface, NULL, __FILE__);$/;"	v
rend	/usr/include/ni/XnList.h	/^	ConstIterator rend() const$/;"	f	class:XnList	access:public	signature:() const
rend	/usr/include/ni/XnList.h	/^	Iterator rend()$/;"	f	class:XnList	access:public	signature:()
startHandler	/usr/include/ni/XnCppWrapper.h	/^			CalibrationStart startHandler;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
startHandler	/usr/include/ni/XnCppWrapper.h	/^			PoseDetection startHandler;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
strKey	/usr/include/ni/XnTypes.h	/^	XnChar strKey[XN_MAX_LICENSE_LENGTH];$/;"	m	struct:XnLicense	access:public
strName	/usr/include/ni/XnTypes.h	/^	XnChar strName[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnProductionNodeDescription	access:public
strVendor	/usr/include/ni/XnTypes.h	/^	XnChar strVendor[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnLicense	access:public
strVendor	/usr/include/ni/XnTypes.h	/^	XnChar strVendor[XN_MAX_NAME_LENGTH];$/;"	m	struct:XnProductionNodeDescription	access:public
tStartTime	/usr/include/ni/Linux-x86/XnOSLinux-x86.h	/^	struct timespec tStartTime;$/;"	m	struct:XnOSTimer	typeref:struct:XnOSTimer::timespec	access:public
updateHandler	/usr/include/ni/XnCppWrapper.h	/^			HandUpdate updateHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
userHandler	/usr/include/ni/XnCppWrapper.h	/^			StateChangedHandler userHandler;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
vNormal	/usr/include/ni/XnTypes.h	/^	XnVector3D vNormal;$/;"	m	struct:XnPlane3D	access:public
xn	/usr/include/ni/XnCppWrapper.h	/^namespace xn$/;"	n
xn	/usr/include/ni/XnModuleCppInterface.h	/^namespace xn$/;"	n
xn::AlternativeViewPointCapability	/usr/include/ni/XnCppWrapper.h	/^	class AlternativeViewPointCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::AlternativeViewPointCapability::AlternativeViewPointCapability	/usr/include/ni/XnCppWrapper.h	/^		inline AlternativeViewPointCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(XnNodeHandle hNode)
xn::AlternativeViewPointCapability::IsViewPointAs	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsViewPointAs(ProductionNode& otherNode) const$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode) const
xn::AlternativeViewPointCapability::IsViewPointSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsViewPointSupported(ProductionNode& otherNode) const$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode) const
xn::AlternativeViewPointCapability::RegisterToViewPointChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToViewPointChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::AlternativeViewPointCapability::ResetViewPoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ResetViewPoint()$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:()
xn::AlternativeViewPointCapability::SetViewPoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetViewPoint(ProductionNode& otherNode)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(ProductionNode& otherNode)
xn::AlternativeViewPointCapability::UnregisterFromViewPointChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromViewPointChange(XnCallbackHandle hCallback)$/;"	f	class:xn::AlternativeViewPointCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::AntiFlickerCapability	/usr/include/ni/XnCppWrapper.h	/^	class AntiFlickerCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::AntiFlickerCapability::AntiFlickerCapability	/usr/include/ni/XnCppWrapper.h	/^		inline AntiFlickerCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnNodeHandle hNode)
xn::AntiFlickerCapability::GetPowerLineFrequency	/usr/include/ni/XnCppWrapper.h	/^		inline XnPowerLineFrequency GetPowerLineFrequency()$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:()
xn::AntiFlickerCapability::RegisterToPowerLineFrequencyChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPowerLineFrequencyChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::AntiFlickerCapability::SetPowerLineFrequency	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPowerLineFrequency(XnPowerLineFrequency nFrequency)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnPowerLineFrequency nFrequency)
xn::AntiFlickerCapability::UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPowerLineFrequencyChange(XnCallbackHandle hCallback)$/;"	f	class:xn::AntiFlickerCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::AudioGenerator	/usr/include/ni/XnCppWrapper.h	/^	class AudioGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::AudioGenerator::AudioGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline AudioGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::AudioGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::AudioGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::AudioGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus AudioGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::AudioGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::AudioGenerator::GetAudioBuffer	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUChar* GetAudioBuffer() const$/;"	f	class:xn::AudioGenerator	access:public	signature:() const
xn::AudioGenerator::GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(AudioMetaData& metaData) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(AudioMetaData& metaData) const
xn::AudioGenerator::GetSupportedWaveOutputModes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSupportedWaveOutputModes(XnWaveOutputMode* aSupportedModes, XnUInt32& nCount) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnWaveOutputMode* aSupportedModes, XnUInt32& nCount) const
xn::AudioGenerator::GetSupportedWaveOutputModesCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedWaveOutputModesCount() const$/;"	f	class:xn::AudioGenerator	access:public	signature:() const
xn::AudioGenerator::GetWaveOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetWaveOutputMode(XnWaveOutputMode& OutputMode) const$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnWaveOutputMode& OutputMode) const
xn::AudioGenerator::RegisterToWaveOutputModeChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToWaveOutputModeChanges(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::AudioGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::AudioGenerator::SetWaveOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetWaveOutputMode(const XnWaveOutputMode& OutputMode)$/;"	f	class:xn::AudioGenerator	access:public	signature:(const XnWaveOutputMode& OutputMode)
xn::AudioGenerator::UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromWaveOutputModeChanges(XnCallbackHandle hCallback)$/;"	f	class:xn::AudioGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^	class AudioMetaData : public OutputMetaData$/;"	c	namespace:xn	inherits:OutputMetaData
xn::AudioMetaData::AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^		AudioMetaData(const AudioMetaData& other);$/;"	p	class:xn::AudioMetaData	access:private	signature:(const AudioMetaData& other)
xn::AudioMetaData::AudioMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline AudioMetaData() : OutputMetaData(&m_audio.pData)$/;"	f	class:xn::AudioMetaData	access:public	signature:()
xn::AudioMetaData::BitsPerSample	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16 BitsPerSample() const { return m_audio.Wave.nBitsPerSample; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
xn::AudioMetaData::BitsPerSample	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16& BitsPerSample() { return m_audio.Wave.nBitsPerSample; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
xn::AudioMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnAudioMetaData* GetUnderlying() { return &m_audio; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
xn::AudioMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnAudioMetaData* GetUnderlying() const { return &m_audio; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
xn::AudioMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const AudioMetaData& other)$/;"	f	class:xn::AudioMetaData	access:public	signature:(const AudioMetaData& other)
xn::AudioMetaData::NumberOfChannels	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8 NumberOfChannels() const { return m_audio.Wave.nChannels; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
xn::AudioMetaData::NumberOfChannels	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8& NumberOfChannels() { return m_audio.Wave.nChannels; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
xn::AudioMetaData::SampleRate	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 SampleRate() const { return m_audio.Wave.nSampleRate; }$/;"	f	class:xn::AudioMetaData	access:public	signature:() const
xn::AudioMetaData::SampleRate	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& SampleRate() { return m_audio.Wave.nSampleRate; }$/;"	f	class:xn::AudioMetaData	access:public	signature:()
xn::AudioMetaData::m_audio	/usr/include/ni/XnCppWrapper.h	/^		XnAudioMetaData m_audio;$/;"	m	class:xn::AudioMetaData	access:private
xn::AudioMetaData::m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::AudioMetaData	access:private
xn::AudioMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		AudioMetaData& operator=(const AudioMetaData&);$/;"	p	class:xn::AudioMetaData	access:private	signature:(const AudioMetaData&)
xn::Capability	/usr/include/ni/XnCppWrapper.h	/^	class Capability$/;"	c	namespace:xn
xn::Capability::Capability	/usr/include/ni/XnCppWrapper.h	/^		Capability(XnNodeHandle hNode) : m_hNode(hNode) {}$/;"	f	class:xn::Capability	access:public	signature:(XnNodeHandle hNode)
xn::Capability::SetUnderlyingHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetUnderlyingHandle(XnNodeHandle hNode)$/;"	f	class:xn::Capability	access:public	signature:(XnNodeHandle hNode)
xn::Capability::m_hNode	/usr/include/ni/XnCppWrapper.h	/^		XnNodeHandle m_hNode;$/;"	m	class:xn::Capability	access:protected
xn::Codec	/usr/include/ni/XnCppWrapper.h	/^	class Codec : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
xn::Codec::Codec	/usr/include/ni/XnCppWrapper.h	/^		inline Codec(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Codec	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Codec::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, XnCodecID codecID, ProductionNode& initializerNode);$/;"	p	class:xn::Codec	access:public	signature:(Context& context, XnCodecID codecID, ProductionNode& initializerNode)
xn::Codec::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Codec::Create(Context& context, XnCodecID codecID, ProductionNode& initializerNode)$/;"	f	class:xn::Codec	signature:(Context& context, XnCodecID codecID, ProductionNode& initializerNode)
xn::Codec::DecodeData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus DecodeData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const$/;"	f	class:xn::Codec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
xn::Codec::EncodeData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EncodeData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const$/;"	f	class:xn::Codec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
xn::Codec::GetCodecID	/usr/include/ni/XnCppWrapper.h	/^		inline XnCodecID GetCodecID() const$/;"	f	class:xn::Codec	access:public	signature:() const
xn::Context	/usr/include/ni/XnCppWrapper.h	/^	class Context$/;"	c	namespace:xn
xn::Context::AddLicense	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddLicense(const XnLicense& License)$/;"	f	class:xn::Context	access:public	signature:(const XnLicense& License)
xn::Context::AutoEnumerateOverSingleInput	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AutoEnumerateOverSingleInput(NodeInfoList& List, XnProductionNodeDescription& description, const XnChar* strCreationInfo, XnProductionNodeType InputType, EnumerationErrors* pErrors, Query* pQuery = NULL) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& List, XnProductionNodeDescription& description, const XnChar* strCreationInfo, XnProductionNodeType InputType, EnumerationErrors* pErrors, Query* pQuery = NULL) const
xn::Context::Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context() : m_pContext(NULL), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context(XnContext* pContext) : m_pContext(pContext), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:(XnContext* pContext)
xn::Context::Context	/usr/include/ni/XnCppWrapper.h	/^		inline Context(const Context& other) : m_pContext(other.m_pContext), m_bAllocated(FALSE) {}$/;"	f	class:xn::Context	access:public	signature:(const Context& other)
xn::Context::CreateAnyProductionTree	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateAnyProductionTree(XnProductionNodeType type, Query* pQuery, ProductionNode& node, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, Query* pQuery, ProductionNode& node, EnumerationErrors* pErrors = NULL)
xn::Context::CreateCodec	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateCodec(XnCodecID codecID, ProductionNode& initializerNode, Codec& codec)$/;"	f	class:xn::Context	access:public	signature:(XnCodecID codecID, ProductionNode& initializerNode, Codec& codec)
xn::Context::CreateMockNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateMockNode(XnProductionNodeType type, const XnChar* strName, ProductionNode& node)$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, const XnChar* strName, ProductionNode& node)
xn::Context::CreateMockNodeBasedOn	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CreateMockNodeBasedOn(ProductionNode& originalNode, const XnChar* strName, ProductionNode& mockNode)$/;"	f	class:xn::Context	access:public	signature:(ProductionNode& originalNode, const XnChar* strName, ProductionNode& mockNode)
xn::Context::CreateProductionTree	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateProductionTree(NodeInfo& Tree)$/;"	f	class:xn::Context	access:public	signature:(NodeInfo& Tree)
xn::Context::EnumerateExistingNodes	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateExistingNodes(NodeInfoList& list) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& list) const
xn::Context::EnumerateExistingNodes	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateExistingNodes(NodeInfoList& list, XnProductionNodeType type) const$/;"	f	class:xn::Context	access:public	signature:(NodeInfoList& list, XnProductionNodeType type) const
xn::Context::EnumerateLicenses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateLicenses(XnLicense*& aLicenses, XnUInt32& nCount) const$/;"	f	class:xn::Context	access:public	signature:(XnLicense*& aLicenses, XnUInt32& nCount) const
xn::Context::EnumerateProductionTrees	/usr/include/ni/XnCppWrapper.h	/^		XnStatus EnumerateProductionTrees(XnProductionNodeType Type, Query* pQuery, NodeInfoList& TreesList, EnumerationErrors* pErrors = NULL) const$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType Type, Query* pQuery, NodeInfoList& TreesList, EnumerationErrors* pErrors = NULL) const
xn::Context::FindExistingNode	/usr/include/ni/XnCppWrapper.h	/^		XnStatus FindExistingNode(XnProductionNodeType type, ProductionNode& node) const$/;"	f	class:xn::Context	access:public	signature:(XnProductionNodeType type, ProductionNode& node) const
xn::Context::FreeImpl	/usr/include/ni/XnCppWrapper.h	/^		void FreeImpl()$/;"	f	class:xn::Context	access:private	signature:()
xn::Context::FreeLicensesList	/usr/include/ni/XnCppWrapper.h	/^		inline static void FreeLicensesList(XnLicense aLicenses[])$/;"	f	class:xn::Context	access:public	signature:(XnLicense aLicenses[])
xn::Context::GetGlobalErrorState	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetGlobalErrorState()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::GetGlobalMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool GetGlobalMirror()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::GetProductionNodeByName	/usr/include/ni/XnCppWrapper.h	/^		XnStatus GetProductionNodeByName(const XnChar* strInstanceName, ProductionNode& node) const$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strInstanceName, ProductionNode& node) const
xn::Context::GetProductionNodeInfoByName	/usr/include/ni/XnCppWrapper.h	/^		XnStatus GetProductionNodeInfoByName(const XnChar* strInstanceName, NodeInfo& nodeInfo) const$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strInstanceName, NodeInfo& nodeInfo) const
xn::Context::GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnContext* GetUnderlyingObject() const { return m_pContext; }$/;"	f	class:xn::Context	access:public	signature:() const
xn::Context::Init	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Init()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::InitFromXmlFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFromXmlFile(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)
xn::Context::OpenFileRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus OpenFileRecording(const XnChar* strFileName)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName)
xn::Context::RegisterToErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToErrorStateChange(XnErrorStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::Context	access:public	signature:(XnErrorStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::Context::RunXmlScript	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RunXmlScript(const XnChar* strScript, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strScript, EnumerationErrors* pErrors = NULL)
xn::Context::RunXmlScriptFromFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RunXmlScriptFromFile(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)$/;"	f	class:xn::Context	access:public	signature:(const XnChar* strFileName, EnumerationErrors* pErrors = NULL)
xn::Context::SetGlobalMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetGlobalMirror(XnBool bMirror)$/;"	f	class:xn::Context	access:public	signature:(XnBool bMirror)
xn::Context::SetHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetHandle(XnContext* pContext)$/;"	f	class:xn::Context	access:public	signature:(XnContext* pContext)
xn::Context::Shutdown	/usr/include/ni/XnCppWrapper.h	/^		inline void Shutdown()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::StartGeneratingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartGeneratingAll()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::StopGeneratingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopGeneratingAll()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::UnregisterFromErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromErrorStateChange(XnCallbackHandle hCallback)$/;"	f	class:xn::Context	access:public	signature:(XnCallbackHandle hCallback)
xn::Context::WaitAndUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAndUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::WaitAnyUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAnyUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::WaitNoneUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitNoneUpdateAll()$/;"	f	class:xn::Context	access:public	signature:()
xn::Context::WaitOneUpdateAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitOneUpdateAll(ProductionNode& node)$/;"	f	class:xn::Context	access:public	signature:(ProductionNode& node)
xn::Context::m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::Context	access:private
xn::Context::m_pContext	/usr/include/ni/XnCppWrapper.h	/^		XnContext* m_pContext;$/;"	m	class:xn::Context	access:private
xn::Context::~Context	/usr/include/ni/XnCppWrapper.h	/^		~Context() $/;"	f	class:xn::Context	access:public	signature:()
xn::CroppingCapability	/usr/include/ni/XnCppWrapper.h	/^	class CroppingCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::CroppingCapability::CroppingCapability	/usr/include/ni/XnCppWrapper.h	/^		inline CroppingCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnNodeHandle hNode)
xn::CroppingCapability::GetCropping	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCropping(XnCropping& Cropping) const$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnCropping& Cropping) const
xn::CroppingCapability::RegisterToCroppingChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToCroppingChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::CroppingCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::CroppingCapability::SetCropping	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetCropping(const XnCropping& Cropping)$/;"	f	class:xn::CroppingCapability	access:public	signature:(const XnCropping& Cropping)
xn::CroppingCapability::UnregisterFromCroppingChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromCroppingChange(XnCallbackHandle hCallback)$/;"	f	class:xn::CroppingCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::DepthGenerator	/usr/include/ni/XnCppWrapper.h	/^	class DepthGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
xn::DepthGenerator::ConvertProjectiveToRealWorld	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ConvertProjectiveToRealWorld(XnUInt32 nCount, const XnPoint3D aProjective[], XnPoint3D aRealWorld[]) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnUInt32 nCount, const XnPoint3D aProjective[], XnPoint3D aRealWorld[]) const
xn::DepthGenerator::ConvertRealWorldToProjective	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ConvertRealWorldToProjective(XnUInt32 nCount, const XnPoint3D aRealWorld[], XnPoint3D aProjective[]) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnUInt32 nCount, const XnPoint3D aRealWorld[], XnPoint3D aProjective[]) const
xn::DepthGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::DepthGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::DepthGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus DepthGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::DepthGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::DepthGenerator::DepthGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline DepthGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::DepthGenerator::GetDepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel* GetDepthMap() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
xn::DepthGenerator::GetDeviceMaxDepth	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel GetDeviceMaxDepth() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
xn::DepthGenerator::GetFieldOfView	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetFieldOfView(XnFieldOfView& FOV) const$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnFieldOfView& FOV) const
xn::DepthGenerator::GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(DepthMetaData& metaData) const $/;"	f	class:xn::DepthGenerator	access:public	signature:(DepthMetaData& metaData) const
xn::DepthGenerator::GetUserPositionCap	/usr/include/ni/XnCppWrapper.h	/^		inline UserPositionCapability GetUserPositionCap()$/;"	f	class:xn::DepthGenerator	access:public	signature:()
xn::DepthGenerator::GetUserPositionCap	/usr/include/ni/XnCppWrapper.h	/^		inline const UserPositionCapability GetUserPositionCap() const$/;"	f	class:xn::DepthGenerator	access:public	signature:() const
xn::DepthGenerator::RegisterToFieldOfViewChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToFieldOfViewChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::DepthGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::DepthGenerator::UnregisterFromFieldOfViewChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromFieldOfViewChange(XnCallbackHandle hCallback)$/;"	f	class:xn::DepthGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^	class DepthMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
xn::DepthMetaData::CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const DepthMetaData& other)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other)
xn::DepthMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel* Data() const { return (const XnDepthPixel*)MapMetaData::Data(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
xn::DepthMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel*& Data() { return (const XnDepthPixel*&)MapMetaData::Data(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::DepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::DepthMap& DepthMap() const { return m_depthMap; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
xn::DepthMetaData::DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^		DepthMetaData(const DepthMetaData& other);$/;"	p	class:xn::DepthMetaData	access:private	signature:(const DepthMetaData& other)
xn::DepthMetaData::DepthMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline DepthMetaData() : $/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthMetaData* GetUnderlying() { return &m_depth; }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthMetaData* GetUnderlying() const { return &m_depth; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
xn::DepthMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const DepthMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer)
xn::DepthMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const DepthMetaData& other)$/;"	f	class:xn::DepthMetaData	access:public	signature:(const DepthMetaData& other)
xn::DepthMetaData::ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer = NULL)$/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnDepthPixel* pExternalBuffer = NULL)
xn::DepthMetaData::WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel* WritableData() { return (XnDepthPixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::WritableDepthMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::DepthMap& WritableDepthMap() $/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::ZRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel ZRes() const { return m_depth.nZRes; }$/;"	f	class:xn::DepthMetaData	access:public	signature:() const
xn::DepthMetaData::ZRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnDepthPixel& ZRes() { return m_depth.nZRes; }$/;"	f	class:xn::DepthMetaData	access:public	signature:()
xn::DepthMetaData::m_depth	/usr/include/ni/XnCppWrapper.h	/^		XnDepthMetaData m_depth;$/;"	m	class:xn::DepthMetaData	access:private
xn::DepthMetaData::m_depthMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::DepthMap m_depthMap;$/;"	m	class:xn::DepthMetaData	access:private
xn::DepthMetaData::m_writableDepthMap	/usr/include/ni/XnCppWrapper.h	/^		xn::DepthMap m_writableDepthMap;$/;"	m	class:xn::DepthMetaData	access:private
xn::DepthMetaData::operator ()	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel& operator()(XnUInt32 x, XnUInt32 y) const $/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 x, XnUInt32 y) const
xn::DepthMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		DepthMetaData& operator=(const DepthMetaData&);$/;"	p	class:xn::DepthMetaData	access:private	signature:(const DepthMetaData&)
xn::DepthMetaData::operator []	/usr/include/ni/XnCppWrapper.h	/^		inline const XnDepthPixel& operator[](XnUInt32 nIndex) const $/;"	f	class:xn::DepthMetaData	access:public	signature:(XnUInt32 nIndex) const
xn::Device	/usr/include/ni/XnCppWrapper.h	/^	class Device : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
xn::Device::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::Device	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::Device::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Device::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::Device	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::Device::Device	/usr/include/ni/XnCppWrapper.h	/^		inline Device(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Device	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Device::GetIdentificationCap	/usr/include/ni/XnCppWrapper.h	/^		inline DeviceIdentificationCapability GetIdentificationCap()$/;"	f	class:xn::Device	access:public	signature:()
xn::DeviceIdentificationCapability	/usr/include/ni/XnCppWrapper.h	/^	class DeviceIdentificationCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::DeviceIdentificationCapability::DeviceIdentificationCapability	/usr/include/ni/XnCppWrapper.h	/^		DeviceIdentificationCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnNodeHandle hNode)
xn::DeviceIdentificationCapability::GetDeviceName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetDeviceName(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
xn::DeviceIdentificationCapability::GetSerialNumber	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSerialNumber(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
xn::DeviceIdentificationCapability::GetVendorSpecificData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetVendorSpecificData(XnChar* strBuffer, XnUInt32 nBufferSize)$/;"	f	class:xn::DeviceIdentificationCapability	access:public	signature:(XnChar* strBuffer, XnUInt32 nBufferSize)
xn::EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^	class EnumerationErrors$/;"	c	namespace:xn
xn::EnumerationErrors::Begin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator Begin() const { return Iterator(xnEnumerationErrorsGetFirst(m_pErrors)); } $/;"	f	class:xn::EnumerationErrors	access:public	signature:() const
xn::EnumerationErrors::End	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator End() const { return Iterator(NULL); } $/;"	f	class:xn::EnumerationErrors	access:public	signature:() const
xn::EnumerationErrors::EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		inline EnumerationErrors() : m_bAllocated(TRUE), m_pErrors(NULL) { xnEnumerationErrorsAllocate(&m_pErrors); }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
xn::EnumerationErrors::EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		inline EnumerationErrors(XnEnumerationErrors* pErrors, XnBool bOwn = FALSE) : m_bAllocated(bOwn), m_pErrors(pErrors) {}$/;"	f	class:xn::EnumerationErrors	access:public	signature:(XnEnumerationErrors* pErrors, XnBool bOwn = FALSE)
xn::EnumerationErrors::Free	/usr/include/ni/XnCppWrapper.h	/^		inline void Free()$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
xn::EnumerationErrors::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnEnumerationErrors* GetUnderlying() { return m_pErrors; }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
xn::EnumerationErrors::Iterator	/usr/include/ni/XnCppWrapper.h	/^		class Iterator$/;"	c	class:xn::EnumerationErrors	access:public
xn::EnumerationErrors::Iterator::Description	/usr/include/ni/XnCppWrapper.h	/^			inline const XnProductionNodeDescription& Description() { return *xnEnumerationErrorsGetCurrentDescription(m_it); }$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
xn::EnumerationErrors::Iterator::Error	/usr/include/ni/XnCppWrapper.h	/^			inline XnStatus Error() { return xnEnumerationErrorsGetCurrentError(m_it); }$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
xn::EnumerationErrors::Iterator::Iterator	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator(XnEnumerationErrorsIterator it) : m_it(it) {}$/;"	f	class:xn::EnumerationErrors::Iterator	access:private	signature:(XnEnumerationErrorsIterator it)
xn::EnumerationErrors::Iterator::m_it	/usr/include/ni/XnCppWrapper.h	/^			XnEnumerationErrorsIterator m_it;$/;"	m	class:xn::EnumerationErrors::Iterator	access:private
xn::EnumerationErrors::Iterator::operator !=	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator!=(const Iterator& other) const$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(const Iterator& other) const
xn::EnumerationErrors::Iterator::operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator++(int)$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(int)
xn::EnumerationErrors::Iterator::operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator++()$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:()
xn::EnumerationErrors::Iterator::operator ==	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator==(const Iterator& other) const$/;"	f	class:xn::EnumerationErrors::Iterator	access:public	signature:(const Iterator& other) const
xn::EnumerationErrors::ToString	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ToString(XnChar* csBuffer, XnUInt32 nSize)$/;"	f	class:xn::EnumerationErrors	access:public	signature:(XnChar* csBuffer, XnUInt32 nSize)
xn::EnumerationErrors::m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::EnumerationErrors	access:private
xn::EnumerationErrors::m_pErrors	/usr/include/ni/XnCppWrapper.h	/^		XnEnumerationErrors* m_pErrors;$/;"	m	class:xn::EnumerationErrors	access:private
xn::EnumerationErrors::~EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		~EnumerationErrors() { Free(); }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
xn::ErrorStateCapability	/usr/include/ni/XnCppWrapper.h	/^	class ErrorStateCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::ErrorStateCapability::ErrorStateCapability	/usr/include/ni/XnCppWrapper.h	/^		ErrorStateCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(XnNodeHandle hNode)
xn::ErrorStateCapability::GetErrorState	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetErrorState() const$/;"	f	class:xn::ErrorStateCapability	access:public	signature:() const
xn::ErrorStateCapability::RegisterToErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToErrorStateChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ErrorStateCapability::UnregisterFromErrorStateChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromErrorStateChange(XnCallbackHandle hCallback)$/;"	f	class:xn::ErrorStateCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::ExtensionModule	/usr/include/ni/XnModuleCppInterface.h	/^	class ExtensionModule : public Module$/;"	c	namespace:xn	inherits:Module
xn::ExtensionModule::Load	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Load()$/;"	f	class:xn::ExtensionModule	access:public	signature:()
xn::ExtensionModule::RegisterNewTypes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterNewTypes() = 0;$/;"	p	class:xn::ExtensionModule	access:protected	signature:()
xn::FrameSyncCapability	/usr/include/ni/XnCppWrapper.h	/^	class FrameSyncCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::FrameSyncCapability::CanFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool CanFrameSyncWith(Generator& other) const;$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other) const
xn::FrameSyncCapability::CanFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnBool FrameSyncCapability::CanFrameSyncWith(Generator& other) const$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other) const
xn::FrameSyncCapability::FrameSyncCapability	/usr/include/ni/XnCppWrapper.h	/^		inline FrameSyncCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(XnNodeHandle hNode)
xn::FrameSyncCapability::FrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus FrameSyncWith(Generator& other);$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other)
xn::FrameSyncCapability::FrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus FrameSyncCapability::FrameSyncWith(Generator& other)$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other)
xn::FrameSyncCapability::IsFrameSyncedWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsFrameSyncedWith(Generator& other) const;$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other) const
xn::FrameSyncCapability::IsFrameSyncedWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnBool FrameSyncCapability::IsFrameSyncedWith(Generator& other) const$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other) const
xn::FrameSyncCapability::RegisterToFrameSyncChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToFrameSyncChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::FrameSyncCapability::StopFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopFrameSyncWith(Generator& other);$/;"	p	class:xn::FrameSyncCapability	access:public	signature:(Generator& other)
xn::FrameSyncCapability::StopFrameSyncWith	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus FrameSyncCapability::StopFrameSyncWith(Generator& other)$/;"	f	class:xn::FrameSyncCapability	signature:(Generator& other)
xn::FrameSyncCapability::UnregisterFromFrameSyncChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromFrameSyncChange(XnCallbackHandle hCallback)$/;"	f	class:xn::FrameSyncCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::GeneralIntCapability	/usr/include/ni/XnCppWrapper.h	/^	class GeneralIntCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::GeneralIntCapability::GeneralIntCapability	/usr/include/ni/XnCppWrapper.h	/^		GeneralIntCapability(XnNodeHandle hNode, const XnChar* strCap) : Capability(hNode), m_strCap(strCap) {}$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnNodeHandle hNode, const XnChar* strCap)
xn::GeneralIntCapability::Get	/usr/include/ni/XnCppWrapper.h	/^		inline XnInt32 Get()$/;"	f	class:xn::GeneralIntCapability	access:public	signature:()
xn::GeneralIntCapability::GetRange	/usr/include/ni/XnCppWrapper.h	/^		inline void GetRange(XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) const$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) const
xn::GeneralIntCapability::RegisterToValueChange	/usr/include/ni/XnCppWrapper.h	/^		XnStatus RegisterToValueChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback);$/;"	p	class:xn::GeneralIntCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::GeneralIntCapability::RegisterToValueChange	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus GeneralIntCapability::RegisterToValueChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GeneralIntCapability	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::GeneralIntCapability::Set	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Set(XnInt32 nValue)$/;"	f	class:xn::GeneralIntCapability	access:public	signature:(XnInt32 nValue)
xn::GeneralIntCapability::UnregisterFromValueChange	/usr/include/ni/XnCppWrapper.h	/^		void UnregisterFromValueChange(XnCallbackHandle hCallback);$/;"	p	class:xn::GeneralIntCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::GeneralIntCapability::UnregisterFromValueChange	/usr/include/ni/XnCppWrapper.h	/^	inline void GeneralIntCapability::UnregisterFromValueChange(XnCallbackHandle hCallback)$/;"	f	class:xn::GeneralIntCapability	signature:(XnCallbackHandle hCallback)
xn::GeneralIntCapability::m_strCap	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* m_strCap;$/;"	m	class:xn::GeneralIntCapability	access:private
xn::Generator	/usr/include/ni/XnCppWrapper.h	/^	class Generator : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
xn::Generator::Generator	/usr/include/ni/XnCppWrapper.h	/^		inline Generator(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Generator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Generator::GetAlternativeViewPointCap	/usr/include/ni/XnCppWrapper.h	/^		inline AlternativeViewPointCapability GetAlternativeViewPointCap()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::GetAlternativeViewPointCap	/usr/include/ni/XnCppWrapper.h	/^		inline const AlternativeViewPointCapability GetAlternativeViewPointCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::GetData	/usr/include/ni/XnCppWrapper.h	/^		inline const void* GetData()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::GetDataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetDataSize() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::GetFrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetFrameID() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::GetFrameSyncCap	/usr/include/ni/XnCppWrapper.h	/^		inline FrameSyncCapability GetFrameSyncCap()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::GetFrameSyncCap	/usr/include/ni/XnCppWrapper.h	/^		inline const FrameSyncCapability GetFrameSyncCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::GetMirrorCap	/usr/include/ni/XnCppWrapper.h	/^		inline MirrorCapability GetMirrorCap()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::GetMirrorCap	/usr/include/ni/XnCppWrapper.h	/^		inline const MirrorCapability GetMirrorCap() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::GetTimestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64 GetTimestamp() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsDataNew() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::IsGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGenerating() const$/;"	f	class:xn::Generator	access:public	signature:() const
xn::Generator::IsNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsNewDataAvailable(XnUInt64* pnTimestamp = NULL) const$/;"	f	class:xn::Generator	access:public	signature:(XnUInt64* pnTimestamp = NULL) const
xn::Generator::RegisterToGenerationRunningChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToGenerationRunningChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)$/;"	f	class:xn::Generator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)
xn::Generator::RegisterToNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToNewDataAvailable(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)$/;"	f	class:xn::Generator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle &hCallback)
xn::Generator::StartGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartGenerating()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::StopGenerating	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopGenerating()$/;"	f	class:xn::Generator	access:public	signature:()
xn::Generator::UnregisterFromGenerationRunningChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromGenerationRunningChange(XnCallbackHandle hCallback)$/;"	f	class:xn::Generator	access:public	signature:(XnCallbackHandle hCallback)
xn::Generator::UnregisterFromNewDataAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromNewDataAvailable(XnCallbackHandle hCallback)$/;"	f	class:xn::Generator	access:public	signature:(XnCallbackHandle hCallback)
xn::Generator::WaitAndUpdateData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus WaitAndUpdateData()$/;"	f	class:xn::Generator	access:public	signature:()
xn::GestureGenerator	/usr/include/ni/XnCppWrapper.h	/^	class GestureGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::GestureGenerator::AddGesture	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddGesture(const XnChar* strGesture, XnBoundingBox3D* pArea)$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture, XnBoundingBox3D* pArea)
xn::GestureGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::GestureGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::GestureGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus GestureGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::GestureGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::GestureGenerator::EnumerateAllGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateAllGestures(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const
xn::GestureGenerator::EnumerateGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateGestures(XnChar*& astrGestures, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar*& astrGestures, XnUInt16& nGestures) const
xn::GestureGenerator::GestureCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct GestureCookie$/;"	s	class:xn::GestureGenerator	access:private
xn::GestureGenerator::GestureCookie	/usr/include/ni/XnCppWrapper.h	/^		} GestureCookie;$/;"	t	class:xn::GestureGenerator	typeref:struct:xn::GestureGenerator::GestureCookie	access:private
xn::GestureGenerator::GestureCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
xn::GestureGenerator::GestureCookie::pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
xn::GestureGenerator::GestureCookie::progressHandler	/usr/include/ni/XnCppWrapper.h	/^			GestureProgress progressHandler;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
xn::GestureGenerator::GestureCookie::recognizedHandler	/usr/include/ni/XnCppWrapper.h	/^			GestureRecognized recognizedHandler;$/;"	m	struct:xn::GestureGenerator::GestureCookie	access:public
xn::GestureGenerator::GestureGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline GestureGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {} $/;"	f	class:xn::GestureGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::GestureGenerator::GestureProgress	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* GestureProgress)(GestureGenerator& generator, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie);$/;"	t	class:xn::GestureGenerator	access:public
xn::GestureGenerator::GestureProgressCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE GestureProgressCallback(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie)$/;"	f	class:xn::GestureGenerator	access:private	signature:(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pPosition, XnFloat fProgress, void* pCookie)
xn::GestureGenerator::GestureRecognized	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* GestureRecognized)(GestureGenerator& generator, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie);$/;"	t	class:xn::GestureGenerator	access:public
xn::GestureGenerator::GestureRecognizedCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE GestureRecognizedCallback(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie)$/;"	f	class:xn::GestureGenerator	access:private	signature:(XnNodeHandle hNode, const XnChar* strGesture, const XnPoint3D* pIDPosition, const XnPoint3D* pEndPosition, void* pCookie)
xn::GestureGenerator::GetActiveGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetActiveGestures(XnChar*& astrGestures, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar*& astrGestures, XnUInt16& nGestures) const
xn::GestureGenerator::GetAllActiveGestures	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAllActiveGestures(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnChar** astrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) const
xn::GestureGenerator::IsGestureAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGestureAvailable(const XnChar* strGesture) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture) const
xn::GestureGenerator::IsGestureProgressSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsGestureProgressSupported(const XnChar* strGesture) const$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture) const
xn::GestureGenerator::RegisterGestureCallbacks	/usr/include/ni/XnCppWrapper.h	/^		XnStatus RegisterGestureCallbacks(GestureRecognized RecognizedCB, GestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(GestureRecognized RecognizedCB, GestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)
xn::GestureGenerator::RegisterToGestureChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToGestureChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::GestureGenerator::RemoveGesture	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveGesture(const XnChar* strGesture)$/;"	f	class:xn::GestureGenerator	access:public	signature:(const XnChar* strGesture)
xn::GestureGenerator::UnregisterFromGestureChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromGestureChange(XnCallbackHandle hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::GestureGenerator::UnregisterGestureCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterGestureCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::GestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::GetVersion	/usr/include/ni/XnCppWrapper.h	/^	inline void GetVersion(XnVersion& Version)$/;"	f	namespace:xn	signature:(XnVersion& Version)
xn::HandsGenerator	/usr/include/ni/XnCppWrapper.h	/^	class HandsGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::HandsGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::HandsGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::HandsGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus HandsGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::HandsGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::HandsGenerator::HandCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct HandCookie$/;"	s	class:xn::HandsGenerator	access:private
xn::HandsGenerator::HandCookie	/usr/include/ni/XnCppWrapper.h	/^		} HandCookie;$/;"	t	class:xn::HandsGenerator	typeref:struct:xn::HandsGenerator::HandCookie	access:private
xn::HandsGenerator::HandCookie::createHandler	/usr/include/ni/XnCppWrapper.h	/^			HandCreate createHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
xn::HandsGenerator::HandCookie::destroyHandler	/usr/include/ni/XnCppWrapper.h	/^			HandDestroy destroyHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
xn::HandsGenerator::HandCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
xn::HandsGenerator::HandCookie::pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
xn::HandsGenerator::HandCookie::updateHandler	/usr/include/ni/XnCppWrapper.h	/^			HandUpdate updateHandler;$/;"	m	struct:xn::HandsGenerator::HandCookie	access:public
xn::HandsGenerator::HandCreate	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandCreate)(HandsGenerator& generator, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
xn::HandsGenerator::HandCreateCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandCreateCB(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)
xn::HandsGenerator::HandDestroy	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandDestroy)(HandsGenerator& generator, XnUserID user, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
xn::HandsGenerator::HandDestroyCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandDestroyCB(XnNodeHandle hNode, XnUserID user, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, XnFloat fTime, void* pCookie)
xn::HandsGenerator::HandUpdate	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* HandUpdate)(HandsGenerator& generator, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie);$/;"	t	class:xn::HandsGenerator	access:public
xn::HandsGenerator::HandUpdateCB	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE HandUpdateCB(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)$/;"	f	class:xn::HandsGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, const XnPoint3D* pPosition, XnFloat fTime, void* pCookie)
xn::HandsGenerator::HandsGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline HandsGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::HandsGenerator::RegisterHandCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterHandCallbacks(HandCreate CreateCB, HandUpdate UpdateCB, HandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::HandsGenerator	access:public	signature:(HandCreate CreateCB, HandUpdate UpdateCB, HandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)
xn::HandsGenerator::SetSmoothing	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSmoothing(XnFloat fSmoothingFactor)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnFloat fSmoothingFactor)
xn::HandsGenerator::StartTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartTracking(const XnPoint3D& ptPosition)$/;"	f	class:xn::HandsGenerator	access:public	signature:(const XnPoint3D& ptPosition)
xn::HandsGenerator::StopTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTracking(XnUserID user)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnUserID user)
xn::HandsGenerator::StopTrackingAll	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTrackingAll()$/;"	f	class:xn::HandsGenerator	access:public	signature:()
xn::HandsGenerator::UnregisterHandCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterHandCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::HandsGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::IRGenerator	/usr/include/ni/XnCppWrapper.h	/^	class IRGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
xn::IRGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::IRGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::IRGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus IRGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::IRGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::IRGenerator::GetIRMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel* GetIRMap() const$/;"	f	class:xn::IRGenerator	access:public	signature:() const
xn::IRGenerator::GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(IRMetaData& metaData) const $/;"	f	class:xn::IRGenerator	access:public	signature:(IRMetaData& metaData) const
xn::IRGenerator::IRGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline IRGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::IRGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::IRMetaData	/usr/include/ni/XnCppWrapper.h	/^	class IRMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
xn::IRMetaData::CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const IRMetaData& other)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other)
xn::IRMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel* Data() const { return (const XnIRPixel*)MapMetaData::Data(); }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
xn::IRMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRPixel*& Data() { return (const XnIRPixel*&)MapMetaData::Data(); }$/;"	f	class:xn::IRMetaData	access:public	signature:()
xn::IRMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnIRMetaData* GetUnderlying() { return &m_ir; }$/;"	f	class:xn::IRMetaData	access:public	signature:()
xn::IRMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnIRMetaData* GetUnderlying() const { return &m_ir; }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
xn::IRMetaData::IRMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::IRMap& IRMap() const { return m_irMap; }$/;"	f	class:xn::IRMetaData	access:public	signature:() const
xn::IRMetaData::IRMetaData	/usr/include/ni/XnCppWrapper.h	/^		IRMetaData(const IRMetaData& other);$/;"	p	class:xn::IRMetaData	access:private	signature:(const IRMetaData& other)
xn::IRMetaData::IRMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline IRMetaData() : $/;"	f	class:xn::IRMetaData	access:public	signature:()
xn::IRMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const IRMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer)
xn::IRMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const IRMetaData& other)$/;"	f	class:xn::IRMetaData	access:public	signature:(const IRMetaData& other)
xn::IRMetaData::ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer = NULL)$/;"	f	class:xn::IRMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnIRPixel* pExternalBuffer = NULL)
xn::IRMetaData::WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnIRPixel* WritableData() { return (XnIRPixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::IRMetaData	access:public	signature:()
xn::IRMetaData::WritableIRMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::IRMap& WritableIRMap() { MakeDataWritable(); return m_writableIRMap; }$/;"	f	class:xn::IRMetaData	access:public	signature:()
xn::IRMetaData::m_ir	/usr/include/ni/XnCppWrapper.h	/^		XnIRMetaData m_ir;$/;"	m	class:xn::IRMetaData	access:private
xn::IRMetaData::m_irMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::IRMap m_irMap;$/;"	m	class:xn::IRMetaData	access:private
xn::IRMetaData::m_writableIRMap	/usr/include/ni/XnCppWrapper.h	/^		xn::IRMap m_writableIRMap;$/;"	m	class:xn::IRMetaData	access:private
xn::IRMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		IRMetaData& operator=(const IRMetaData&);$/;"	p	class:xn::IRMetaData	access:private	signature:(const IRMetaData&)
xn::ImageGenerator	/usr/include/ni/XnCppWrapper.h	/^	class ImageGenerator : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
xn::ImageGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::ImageGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::ImageGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus ImageGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::ImageGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::ImageGenerator::GetGrayscale16ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel* GetGrayscale16ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::GetGrayscale8ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel* GetGrayscale8ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::GetImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8* GetImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(ImageMetaData& metaData) const $/;"	f	class:xn::ImageGenerator	access:public	signature:(ImageMetaData& metaData) const
xn::ImageGenerator::GetPixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat GetPixelFormat() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::GetRGB24ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel* GetRGB24ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::GetYUV422ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel* GetYUV422ImageMap() const$/;"	f	class:xn::ImageGenerator	access:public	signature:() const
xn::ImageGenerator::ImageGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline ImageGenerator(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::ImageGenerator::IsPixelFormatSupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsPixelFormatSupported(XnPixelFormat Format) const$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnPixelFormat Format) const
xn::ImageGenerator::RegisterToPixelFormatChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPixelFormatChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::ImageGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ImageGenerator::SetPixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPixelFormat(XnPixelFormat Format)$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnPixelFormat Format)
xn::ImageGenerator::UnregisterFromPixelFormatChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPixelFormatChange(XnCallbackHandle hCallback)$/;"	f	class:xn::ImageGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^	class ImageMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
xn::ImageMetaData::AllocateData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AllocateData(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format)$/;"	f	class:xn::ImageMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format)
xn::ImageMetaData::CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus CopyFrom(const ImageMetaData& other)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other)
xn::ImageMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnImageMetaData* GetUnderlying() { return &m_image; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnImageMetaData* GetUnderlying() const { return &m_image; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::Grayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel* Grayscale16Data() const { return (const XnGrayscale16Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::Grayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale16Pixel*& Grayscale16Data() { return (const XnGrayscale16Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::Grayscale16Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::Grayscale16Map& Grayscale16Map() const { return m_gray16Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::Grayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel* Grayscale8Data() const { return (const XnGrayscale8Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::Grayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnGrayscale8Pixel*& Grayscale8Data() { return (const XnGrayscale8Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::Grayscale8Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::Grayscale8Map& Grayscale8Map() const { return m_gray8Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::ImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::ImageMap& ImageMap() const { return m_imageMap; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^		ImageMetaData(const ImageMetaData& other);$/;"	p	class:xn::ImageMetaData	access:private	signature:(const ImageMetaData& other)
xn::ImageMetaData::ImageMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline ImageMetaData() : $/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const ImageMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer)
xn::ImageMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const ImageMetaData& other)$/;"	f	class:xn::ImageMetaData	access:public	signature:(const ImageMetaData& other)
xn::ImageMetaData::PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat PixelFormat() const { return MapMetaData::PixelFormat(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat& PixelFormat() { return MapMetaData::PixelFormatImpl(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::RGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel* RGB24Data() const { return (const XnRGB24Pixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::RGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnRGB24Pixel*& RGB24Data() { return (const XnRGB24Pixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::RGB24Map	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::RGB24Map& RGB24Map() const { return m_rgb24Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer = NULL)$/;"	f	class:xn::ImageMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, XnPixelFormat format, const XnUInt8* pExternalBuffer = NULL)
xn::ImageMetaData::WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8* WritableData() { return MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableGrayscale16Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnGrayscale16Pixel* WritableGrayscale16Data() { return (XnGrayscale16Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableGrayscale16Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::Grayscale16Map& WritableGrayscale16Map() { MakeDataWritable(); return m_writableGray16Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableGrayscale8Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnGrayscale8Pixel* WritableGrayscale8Data() { return (XnGrayscale8Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableGrayscale8Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::Grayscale8Map& WritableGrayscale8Map() { MakeDataWritable(); return m_writableGray8Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableImageMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::ImageMap& WritableImageMap() { MakeDataWritable(); return m_writableImageMap; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableRGB24Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnRGB24Pixel* WritableRGB24Data() { return (XnRGB24Pixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableRGB24Map	/usr/include/ni/XnCppWrapper.h	/^		inline xn::RGB24Map& WritableRGB24Map() { MakeDataWritable(); return m_writableRgb24Map; }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::WritableYUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline XnYUV422DoublePixel* WritableYUV422Data() { return (XnYUV422DoublePixel*)MapMetaData::WritableData(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::YUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel* YUV422Data() const { return (const XnYUV422DoublePixel*)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:() const
xn::ImageMetaData::YUV422Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnYUV422DoublePixel*& YUV422Data() { return (const XnYUV422DoublePixel*&)MapMetaData::Data(); }$/;"	f	class:xn::ImageMetaData	access:public	signature:()
xn::ImageMetaData::m_gray16Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::Grayscale16Map m_gray16Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_gray8Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::Grayscale8Map m_gray8Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_image	/usr/include/ni/XnCppWrapper.h	/^		XnImageMetaData m_image;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_imageMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::ImageMap m_imageMap;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_rgb24Map	/usr/include/ni/XnCppWrapper.h	/^		const xn::RGB24Map m_rgb24Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_writableGray16Map	/usr/include/ni/XnCppWrapper.h	/^		xn::Grayscale16Map m_writableGray16Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_writableGray8Map	/usr/include/ni/XnCppWrapper.h	/^		xn::Grayscale8Map m_writableGray8Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_writableImageMap	/usr/include/ni/XnCppWrapper.h	/^		xn::ImageMap m_writableImageMap;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::m_writableRgb24Map	/usr/include/ni/XnCppWrapper.h	/^		xn::RGB24Map m_writableRgb24Map;$/;"	m	class:xn::ImageMetaData	access:private
xn::ImageMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		ImageMetaData& operator=(const ImageMetaData&);$/;"	p	class:xn::ImageMetaData	access:private	signature:(const ImageMetaData&)
xn::MapGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MapGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::MapGenerator::GetAntiFlickerCap	/usr/include/ni/XnCppWrapper.h	/^		inline AntiFlickerCapability GetAntiFlickerCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetBacklightCompensationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetBacklightCompensationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetBrightnessCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetBrightnessCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetBytesPerPixel	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetBytesPerPixel() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
xn::MapGenerator::GetContrastCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetContrastCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetCroppingCap	/usr/include/ni/XnCppWrapper.h	/^		inline CroppingCapability GetCroppingCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetCroppingCap	/usr/include/ni/XnCppWrapper.h	/^		inline const CroppingCapability GetCroppingCap() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
xn::MapGenerator::GetExposureCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetExposureCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetFocusCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetFocusCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetGainCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGainCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetGammaCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGammaCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetHueCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetHueCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetIrisCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetIrisCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetLowLightCompensationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetLowLightCompensationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetMapOutputMode(XnMapOutputMode &OutputMode) const$/;"	f	class:xn::MapGenerator	access:public	signature:(XnMapOutputMode &OutputMode) const
xn::MapGenerator::GetPanCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetPanCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetRollCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetRollCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetSaturationCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetSaturationCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetSharpnessCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetSharpnessCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetSupportedMapOutputModes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSupportedMapOutputModes(XnMapOutputMode* aModes, XnUInt32& nCount) const$/;"	f	class:xn::MapGenerator	access:public	signature:(XnMapOutputMode* aModes, XnUInt32& nCount) const
xn::MapGenerator::GetSupportedMapOutputModesCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedMapOutputModesCount() const$/;"	f	class:xn::MapGenerator	access:public	signature:() const
xn::MapGenerator::GetTiltCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetTiltCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetWhiteBalanceCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetWhiteBalanceCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::GetZoomCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetZoomCap()$/;"	f	class:xn::MapGenerator	access:public	signature:()
xn::MapGenerator::MapGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MapGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::MapGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MapGenerator::RegisterToMapOutputModeChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToMapOutputModeChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::MapGenerator	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::MapGenerator::SetMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMapOutputMode(const XnMapOutputMode& OutputMode)$/;"	f	class:xn::MapGenerator	access:public	signature:(const XnMapOutputMode& OutputMode)
xn::MapGenerator::UnregisterFromMapOutputModeChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromMapOutputModeChange(XnCallbackHandle hCallback)$/;"	f	class:xn::MapGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::MapMetaData	/usr/include/ni/XnCppWrapper.h	/^	class MapMetaData : public OutputMetaData$/;"	c	namespace:xn	inherits:OutputMetaData
xn::MapMetaData::AllocateData	/usr/include/ni/XnCppWrapper.h	/^		XnStatus AllocateData(XnUInt32 nXRes, XnUInt32 nYRes)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes)
xn::MapMetaData::BytesPerPixel	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 BytesPerPixel() const$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::FPS	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FPS() const { return m_map.nFPS; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::FPS	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FPS() { return m_map.nFPS; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::FullXRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FullXRes() const { return m_map.FullRes.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::FullXRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FullXRes() { return m_map.FullRes.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::FullYRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FullYRes() const { return m_map.FullRes.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::FullYRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FullYRes() { return m_map.FullRes.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnMapMetaData* GetUnderlying() { return &m_map; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnMapMetaData* GetUnderlying() const { return &m_map; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::MapMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline MapMetaData(XnPixelFormat format, const XnUInt8** ppData) : OutputMetaData(ppData)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnPixelFormat format, const XnUInt8** ppData)
xn::MapMetaData::MapMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline MapMetaData(const MapMetaData& other);$/;"	p	class:xn::MapMetaData	access:private	signature:(const MapMetaData& other)
xn::MapMetaData::PixelFormat	/usr/include/ni/XnCppWrapper.h	/^		inline XnPixelFormat PixelFormat() const { return m_map.PixelFormat; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::PixelFormatImpl	/usr/include/ni/XnCppWrapper.h	/^		XnPixelFormat& PixelFormatImpl() { return m_map.PixelFormat; }$/;"	f	class:xn::MapMetaData	access:protected	signature:()
xn::MapMetaData::ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnUInt8* pExternalBuffer)$/;"	f	class:xn::MapMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnUInt8* pExternalBuffer)
xn::MapMetaData::XOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 XOffset() const { return m_map.Offset.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::XOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& XOffset() { return m_map.Offset.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::XRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 XRes() const { return m_map.Res.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::XRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& XRes() { return m_map.Res.X; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::YOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 YOffset() const { return m_map.Offset.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::YOffset	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& YOffset() { return m_map.Offset.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::YRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 YRes() const { return m_map.Res.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:() const
xn::MapMetaData::YRes	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& YRes() { return m_map.Res.Y; }$/;"	f	class:xn::MapMetaData	access:public	signature:()
xn::MapMetaData::m_map	/usr/include/ni/XnCppWrapper.h	/^		XnMapMetaData m_map;$/;"	m	class:xn::MapMetaData	access:private
xn::MapMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		MapMetaData& operator=(const MapMetaData&);$/;"	p	class:xn::MapMetaData	access:private	signature:(const MapMetaData&)
xn::MirrorCapability	/usr/include/ni/XnCppWrapper.h	/^	class MirrorCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::MirrorCapability::IsMirrored	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsMirrored() const$/;"	f	class:xn::MirrorCapability	access:public	signature:() const
xn::MirrorCapability::MirrorCapability	/usr/include/ni/XnCppWrapper.h	/^		inline MirrorCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnNodeHandle hNode)
xn::MirrorCapability::RegisterToMirrorChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToMirrorChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::MirrorCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::MirrorCapability::SetMirror	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMirror(XnBool bMirror)$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnBool bMirror)
xn::MirrorCapability::UnregisterFromMirrorChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromMirrorChange(XnCallbackHandle hCallback)$/;"	f	class:xn::MirrorCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::MockAudioGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockAudioGenerator : public AudioGenerator$/;"	c	namespace:xn	inherits:AudioGenerator
xn::MockAudioGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockAudioGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
xn::MockAudioGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockAudioGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockAudioGenerator	signature:(Context& context, const XnChar* strName )
xn::MockAudioGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(AudioGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockAudioGenerator	access:public	signature:(AudioGenerator& other, const XnChar* strName = NULL)
xn::MockAudioGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockAudioGenerator::CreateBasedOn(AudioGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockAudioGenerator	signature:(AudioGenerator& other, const XnChar* strName )
xn::MockAudioGenerator::MockAudioGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockAudioGenerator(XnNodeHandle hNode = NULL) : AudioGenerator(hNode) {}$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MockAudioGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pAudioBuffer)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pAudioBuffer)
xn::MockAudioGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const AudioMetaData& audioMD)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(const AudioMetaData& audioMD)
xn::MockAudioGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const AudioMetaData& audioMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockAudioGenerator	access:public	signature:(const AudioMetaData& audioMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
xn::MockDepthGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockDepthGenerator : public DepthGenerator$/;"	c	namespace:xn	inherits:DepthGenerator
xn::MockDepthGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockDepthGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
xn::MockDepthGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockDepthGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockDepthGenerator	signature:(Context& context, const XnChar* strName )
xn::MockDepthGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(DepthGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockDepthGenerator	access:public	signature:(DepthGenerator& other, const XnChar* strName = NULL)
xn::MockDepthGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockDepthGenerator::CreateBasedOn(DepthGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockDepthGenerator	signature:(DepthGenerator& other, const XnChar* strName )
xn::MockDepthGenerator::MockDepthGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockDepthGenerator(XnNodeHandle hNode = NULL) : DepthGenerator(hNode) {}$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MockDepthGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pDepthMap)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pDepthMap)
xn::MockDepthGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const DepthMetaData& depthMD)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(const DepthMetaData& depthMD)
xn::MockDepthGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const DepthMetaData& depthMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockDepthGenerator	access:public	signature:(const DepthMetaData& depthMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
xn::MockIRGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockIRGenerator : public IRGenerator$/;"	c	namespace:xn	inherits:IRGenerator
xn::MockIRGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockIRGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
xn::MockIRGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockIRGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockIRGenerator	signature:(Context& context, const XnChar* strName )
xn::MockIRGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(IRGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockIRGenerator	access:public	signature:(IRGenerator& other, const XnChar* strName = NULL)
xn::MockIRGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockIRGenerator::CreateBasedOn(IRGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockIRGenerator	signature:(IRGenerator& other, const XnChar* strName )
xn::MockIRGenerator::MockIRGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockIRGenerator(XnNodeHandle hNode = NULL) : IRGenerator(hNode) {}$/;"	f	class:xn::MockIRGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MockIRGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pIRMap)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pIRMap)
xn::MockIRGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const IRMetaData& irMD)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(const IRMetaData& irMD)
xn::MockIRGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const IRMetaData& irMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockIRGenerator	access:public	signature:(const IRMetaData& irMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
xn::MockImageGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockImageGenerator : public ImageGenerator$/;"	c	namespace:xn	inherits:ImageGenerator
xn::MockImageGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockImageGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
xn::MockImageGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockImageGenerator::Create(Context& context, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockImageGenerator	signature:(Context& context, const XnChar* strName )
xn::MockImageGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CreateBasedOn(ImageGenerator& other, const XnChar* strName = NULL);$/;"	p	class:xn::MockImageGenerator	access:public	signature:(ImageGenerator& other, const XnChar* strName = NULL)
xn::MockImageGenerator::CreateBasedOn	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockImageGenerator::CreateBasedOn(ImageGenerator& other, const XnChar* strName \/* = NULL *\/)$/;"	f	class:xn::MockImageGenerator	signature:(ImageGenerator& other, const XnChar* strName )
xn::MockImageGenerator::MockImageGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline MockImageGenerator(XnNodeHandle hNode = NULL) : ImageGenerator(hNode) {}$/;"	f	class:xn::MockImageGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MockImageGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pImageMap)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pImageMap)
xn::MockImageGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const ImageMetaData& imageMD)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(const ImageMetaData& imageMD)
xn::MockImageGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(const ImageMetaData& imageMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)$/;"	f	class:xn::MockImageGenerator	access:public	signature:(const ImageMetaData& imageMD, XnUInt32 nFrameID, XnUInt64 nTimestamp)
xn::MockRawGenerator	/usr/include/ni/XnCppWrapper.h	/^	class MockRawGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::MockRawGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strName = NULL);$/;"	p	class:xn::MockRawGenerator	access:public	signature:(Context& context, const XnChar* strName = NULL)
xn::MockRawGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus MockRawGenerator::Create(Context& context, const XnChar* strName \/*= NULL*\/)$/;"	f	class:xn::MockRawGenerator	signature:(Context& context, const XnChar* strName )
xn::MockRawGenerator::MockRawGenerator	/usr/include/ni/XnCppWrapper.h	/^		MockRawGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::MockRawGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::MockRawGenerator::SetData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetData(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData)$/;"	f	class:xn::MockRawGenerator	access:public	signature:(XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData)
xn::Module	/usr/include/ni/XnModuleCppInterface.h	/^	class Module$/;"	c	namespace:xn
xn::Module::AddExportedNode	/usr/include/ni/XnModuleCppInterface.h	/^		inline XnStatus AddExportedNode(XnModuleGetExportedInterfacePtr pEntryPoint) { return m_ExportedNodes.AddLast(pEntryPoint); }$/;"	f	class:xn::Module	access:public	signature:(XnModuleGetExportedInterfacePtr pEntryPoint)
xn::Module::GetExportedNodes	/usr/include/ni/XnModuleCppInterface.h	/^		XnStatus GetExportedNodes(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)$/;"	f	class:xn::Module	access:public	signature:(XnModuleGetExportedInterfacePtr* aEntryPoints, XnUInt32 nCount)
xn::Module::GetExportedNodesCount	/usr/include/ni/XnModuleCppInterface.h	/^		XnUInt32 GetExportedNodesCount() { return m_ExportedNodes.Size(); }$/;"	f	class:xn::Module	access:public	signature:()
xn::Module::Load	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Load() { return XN_STATUS_OK; }$/;"	f	class:xn::Module	access:public	signature:()
xn::Module::Module	/usr/include/ni/XnModuleCppInterface.h	/^		Module() {}$/;"	f	class:xn::Module	access:public	signature:()
xn::Module::Unload	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void Unload() {}$/;"	f	class:xn::Module	access:public	signature:()
xn::Module::m_ExportedNodes	/usr/include/ni/XnModuleCppInterface.h	/^		ExportedNodesList m_ExportedNodes;$/;"	m	class:xn::Module	access:private
xn::Module::~Module	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~Module() {}$/;"	f	class:xn::Module	access:public	signature:()
xn::ModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAlternativeViewPointInterface$/;"	c	namespace:xn
xn::ModuleAlternativeViewPointInterface::IsViewPointAs	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsViewPointAs(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
xn::ModuleAlternativeViewPointInterface::IsViewPointSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsViewPointSupported(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
xn::ModuleAlternativeViewPointInterface::RegisterToViewPointChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToViewPointChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleAlternativeViewPointInterface::ResetViewPoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ResetViewPoint() = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:()
xn::ModuleAlternativeViewPointInterface::SetViewPoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetViewPoint(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(ProductionNode& other)
xn::ModuleAlternativeViewPointInterface::UnregisterFromViewPointChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromViewPointChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleAlternativeViewPointInterface::~ModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAlternativeViewPointInterface() {}$/;"	f	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:()
xn::ModuleAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAntiFlickerInterface$/;"	c	namespace:xn
xn::ModuleAntiFlickerInterface::GetPowerLineFrequency	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnPowerLineFrequency GetPowerLineFrequency() = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:()
xn::ModuleAntiFlickerInterface::RegisterToPowerLineFrequencyChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPowerLineFrequencyChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleAntiFlickerInterface::SetPowerLineFrequency	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetPowerLineFrequency(XnPowerLineFrequency nFrequency) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnPowerLineFrequency nFrequency)
xn::ModuleAntiFlickerInterface::UnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPowerLineFrequencyChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAntiFlickerInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleAntiFlickerInterface::~ModuleAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAntiFlickerInterface() {}$/;"	f	class:xn::ModuleAntiFlickerInterface	access:public	signature:()
xn::ModuleAudioGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleAudioGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
xn::ModuleAudioGenerator::GetAudioBuffer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUChar* GetAudioBuffer() = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:()
xn::ModuleAudioGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetAudioBuffer(); }$/;"	f	class:xn::ModuleAudioGenerator	access:public	signature:()
xn::ModuleAudioGenerator::GetSupportedWaveOutputModes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSupportedWaveOutputModes(XnWaveOutputMode aSupportedModes[], XnUInt32& nCount) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnWaveOutputMode aSupportedModes[], XnUInt32& nCount)
xn::ModuleAudioGenerator::GetSupportedWaveOutputModesCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedWaveOutputModesCount() = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:()
xn::ModuleAudioGenerator::GetWaveOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetWaveOutputMode(XnWaveOutputMode& OutputMode) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnWaveOutputMode& OutputMode)
xn::ModuleAudioGenerator::RegisterToWaveOutputModeChanges	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToWaveOutputModeChanges(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleAudioGenerator::SetWaveOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetWaveOutputMode(const XnWaveOutputMode& OutputMode) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(const XnWaveOutputMode& OutputMode)
xn::ModuleAudioGenerator::UnregisterFromWaveOutputModeChanges	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromWaveOutputModeChanges(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleAudioGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleAudioGenerator::~ModuleAudioGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAudioGenerator() {}$/;"	f	class:xn::ModuleAudioGenerator	access:public	signature:()
xn::ModuleCodec	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleCodec : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
xn::ModuleCodec::CompressData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus CompressData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
xn::ModuleCodec::DecompressData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus DecompressData(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten) const
xn::ModuleCodec::GetCodecID	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnCodecID GetCodecID() const = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:() const
xn::ModuleCodec::Init	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Init(const ProductionNode& node) = 0;$/;"	p	class:xn::ModuleCodec	access:public	signature:(const ProductionNode& node)
xn::ModuleCodec::~ModuleCodec	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleCodec() {}$/;"	f	class:xn::ModuleCodec	access:public	signature:()
xn::ModuleCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleCroppingInterface$/;"	c	namespace:xn
xn::ModuleCroppingInterface::GetCropping	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCropping(XnCropping &Cropping) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnCropping &Cropping)
xn::ModuleCroppingInterface::RegisterToCroppingChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToCroppingChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleCroppingInterface::SetCropping	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetCropping(const XnCropping &Cropping) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(const XnCropping &Cropping)
xn::ModuleCroppingInterface::UnregisterFromCroppingChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromCroppingChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleCroppingInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleCroppingInterface::~ModuleCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleCroppingInterface() {}$/;"	f	class:xn::ModuleCroppingInterface	access:public	signature:()
xn::ModuleDepthGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDepthGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
xn::ModuleDepthGenerator::GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnDepthPixel); }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDepthGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetDepthMap(); }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDepthGenerator::GetDepthMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnDepthPixel* GetDepthMap() = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDepthGenerator::GetDeviceMaxDepth	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnDepthPixel GetDeviceMaxDepth() = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDepthGenerator::GetFieldOfView	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void GetFieldOfView(XnFieldOfView& FOV) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnFieldOfView& FOV)
xn::ModuleDepthGenerator::GetUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleUserPositionInterface* GetUserPositionInterface() { return NULL; }$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDepthGenerator::RegisterToFieldOfViewChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToFieldOfViewChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleDepthGenerator::UnregisterFromFieldOfViewChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromFieldOfViewChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleDepthGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleDepthGenerator::~ModuleDepthGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDepthGenerator() {}$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
xn::ModuleDevice	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDevice : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
xn::ModuleDevice::GetIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleDeviceIdentificationInterface* GetIdentificationInterface() { return NULL; }$/;"	f	class:xn::ModuleDevice	access:public	signature:()
xn::ModuleDevice::~ModuleDevice	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDevice() {}$/;"	f	class:xn::ModuleDevice	access:public	signature:()
xn::ModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleDeviceIdentificationInterface$/;"	c	namespace:xn
xn::ModuleDeviceIdentificationInterface::GetDeviceName	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetDeviceName(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
xn::ModuleDeviceIdentificationInterface::GetSerialNumber	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSerialNumber(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
xn::ModuleDeviceIdentificationInterface::GetVendorSpecificData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetVendorSpecificData(XnChar* strBuffer, XnUInt32& nBufferSize) = 0;$/;"	p	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:(XnChar* strBuffer, XnUInt32& nBufferSize)
xn::ModuleDeviceIdentificationInterface::~ModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDeviceIdentificationInterface() {}$/;"	f	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:()
xn::ModuleErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleErrorStateInterface$/;"	c	namespace:xn
xn::ModuleErrorStateInterface::GetErrorState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetErrorState() = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:()
xn::ModuleErrorStateInterface::RegisterToErrorStateChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToErrorStateChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleErrorStateInterface::UnregisterFromErrorStateChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromErrorStateChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleErrorStateInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleErrorStateInterface::~ModuleErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleErrorStateInterface() {}$/;"	f	class:xn::ModuleErrorStateInterface	access:public	signature:()
xn::ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleExportedProductionNode$/;"	c	namespace:xn
xn::ModuleExportedProductionNode::Create	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Create(Context& context, const XnChar* strInstanceName, const XnChar* strCreationInfo, NodeInfoList* pNeededTrees, const XnChar* strConfigurationDir, ModuleProductionNode** ppInstance) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(Context& context, const XnChar* strInstanceName, const XnChar* strCreationInfo, NodeInfoList* pNeededTrees, const XnChar* strConfigurationDir, ModuleProductionNode** ppInstance)
xn::ModuleExportedProductionNode::Destroy	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void Destroy(ModuleProductionNode* pInstance) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(ModuleProductionNode* pInstance)
xn::ModuleExportedProductionNode::EnumerateProductionTrees	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateProductionTrees(Context& context, NodeInfoList& TreesList, EnumerationErrors* pErrors) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(Context& context, NodeInfoList& TreesList, EnumerationErrors* pErrors)
xn::ModuleExportedProductionNode::GetDescription	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void GetDescription(XnProductionNodeDescription* pDescription) = 0;$/;"	p	class:xn::ModuleExportedProductionNode	access:public	signature:(XnProductionNodeDescription* pDescription)
xn::ModuleExportedProductionNode::ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		ModuleExportedProductionNode() {}$/;"	f	class:xn::ModuleExportedProductionNode	access:public	signature:()
xn::ModuleExportedProductionNode::~ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleExportedProductionNode() {}$/;"	f	class:xn::ModuleExportedProductionNode	access:public	signature:()
xn::ModuleExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleExtendedSerializationInterface$/;"	c	namespace:xn
xn::ModuleExtendedSerializationInterface::NotifyExState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus NotifyExState(XnNodeNotifications* pNotifications, void* pCookie) = 0;$/;"	p	class:xn::ModuleExtendedSerializationInterface	access:public	signature:(XnNodeNotifications* pNotifications, void* pCookie)
xn::ModuleExtendedSerializationInterface::UnregisterExNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterExNotifications() = 0;$/;"	p	class:xn::ModuleExtendedSerializationInterface	access:public	signature:()
xn::ModuleExtendedSerializationInterface::~ModuleExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleExtendedSerializationInterface() {}$/;"	f	class:xn::ModuleExtendedSerializationInterface	access:public	signature:()
xn::ModuleFrameSyncInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleFrameSyncInterface$/;"	c	namespace:xn
xn::ModuleFrameSyncInterface::CanFrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool CanFrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
xn::ModuleFrameSyncInterface::FrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus FrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
xn::ModuleFrameSyncInterface::IsFrameSyncedWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsFrameSyncedWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
xn::ModuleFrameSyncInterface::RegisterToFrameSyncChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToFrameSyncChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleFrameSyncInterface::StopFrameSyncWith	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopFrameSyncWith(ProductionNode& other) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(ProductionNode& other)
xn::ModuleFrameSyncInterface::UnregisterFromFrameSyncChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromFrameSyncChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleFrameSyncInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleGeneralIntInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGeneralIntInterface$/;"	c	namespace:xn
xn::ModuleGeneralIntInterface::Get	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Get(const XnChar* strCap, XnInt32& nValue) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32& nValue)
xn::ModuleGeneralIntInterface::GetRange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetRange(const XnChar* strCap, XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32& nMin, XnInt32& nMax, XnInt32& nStep, XnInt32& nDefault, XnBool& bIsAutoSupported)
xn::ModuleGeneralIntInterface::RegisterToValueChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToValueChange(const XnChar* strCap, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleGeneralIntInterface::Set	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnInt32 Set(const XnChar* strCap, XnInt32 nValue) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnInt32 nValue)
xn::ModuleGeneralIntInterface::UnregisterFromValueChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromValueChange(const XnChar* strCap, XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGeneralIntInterface	access:public	signature:(const XnChar* strCap, XnCallbackHandle hCallback)
xn::ModuleGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGenerator : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
xn::ModuleGenerator::GetAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleAlternativeViewPointInterface* GetAlternativeViewPointInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetDataSize	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetDataSize() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetFrameID	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetFrameID() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetFrameSyncInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleFrameSyncInterface* GetFrameSyncInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleMirrorInterface* GetMirrorInterface() { return NULL; }$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::GetTimestamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt64 GetTimestamp() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::IsGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::IsNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsNewDataAvailable(XnUInt64& nTimestamp) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnUInt64& nTimestamp)
xn::ModuleGenerator::RegisterToGenerationRunningChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToGenerationRunningChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleGenerator::RegisterToNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToNewDataAvailable(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleGenerator::StartGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::StopGenerating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void StopGenerating() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::UnregisterFromGenerationRunningChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromGenerationRunningChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleGenerator::UnregisterFromNewDataAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromNewDataAvailable(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleGenerator::UpdateData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus UpdateData() = 0;$/;"	p	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGenerator::~ModuleGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleGenerator() {}$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
xn::ModuleGestureGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleGestureGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
xn::ModuleGestureGenerator::AddGesture	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus AddGesture(const XnChar* strGesture, XnBoundingBox3D* pArea) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture, XnBoundingBox3D* pArea)
xn::ModuleGestureGenerator::EnumerateAllGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateAllGestures(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures)
xn::ModuleGestureGenerator::EnumerateGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateGestures(XnChar** pstrGestures, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt16& nGestures)
xn::ModuleGestureGenerator::GetActiveGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetActiveGestures(XnChar** pstrGestures, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt16& nGestures)
xn::ModuleGestureGenerator::GetAllActiveGestures	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAllActiveGestures(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16& nGestures)
xn::ModuleGestureGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleGestureGenerator	access:public	signature:()
xn::ModuleGestureGenerator::IsGestureAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGestureAvailable(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
xn::ModuleGestureGenerator::IsGestureProgressSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsGestureProgressSupported(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
xn::ModuleGestureGenerator::RegisterGestureCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterGestureCallbacks(XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnModuleGestureRecognized RecognizedCB, XnModuleGestureProgress ProgressCB, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleGestureGenerator::RegisterToGestureChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToGestureChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleGestureGenerator::RemoveGesture	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RemoveGesture(const XnChar* strGesture) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(const XnChar* strGesture)
xn::ModuleGestureGenerator::UnregisterFromGestureChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromGestureChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleGestureGenerator::UnregisterGestureCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterGestureCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleGestureGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleGestureGenerator::~ModuleGestureGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleGestureGenerator() {}$/;"	f	class:xn::ModuleGestureGenerator	access:public	signature:()
xn::ModuleHandsGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleHandsGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
xn::ModuleHandsGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleHandsGenerator	access:public	signature:()
xn::ModuleHandsGenerator::RegisterHandCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterHandCallbacks(XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnModuleHandCreate CreateCB, XnModuleHandUpdate UpdateCB, XnModuleHandDestroy DestroyCB, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleHandsGenerator::SetSmoothing	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSmoothing(XnFloat fSmoothingFactor) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnFloat fSmoothingFactor)
xn::ModuleHandsGenerator::StartTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartTracking(const XnPoint3D& ptPosition) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(const XnPoint3D& ptPosition)
xn::ModuleHandsGenerator::StopTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnUserID user)
xn::ModuleHandsGenerator::StopTrackingAll	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTrackingAll() = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:()
xn::ModuleHandsGenerator::UnregisterHandCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterHandCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleHandsGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleHandsGenerator::~ModuleHandsGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleHandsGenerator() {}$/;"	f	class:xn::ModuleHandsGenerator	access:public	signature:()
xn::ModuleIRGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleIRGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
xn::ModuleIRGenerator::GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnIRPixel); }$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
xn::ModuleIRGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetIRMap(); }$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
xn::ModuleIRGenerator::GetIRMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnIRPixel* GetIRMap() = 0;$/;"	p	class:xn::ModuleIRGenerator	access:public	signature:()
xn::ModuleIRGenerator::~ModuleIRGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleIRGenerator() {}$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
xn::ModuleImageGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleImageGenerator : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
xn::ModuleImageGenerator::GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return xnGetBytesPerPixelForPixelFormat(GetPixelFormat()); }$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
xn::ModuleImageGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetImageMap(); }$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
xn::ModuleImageGenerator::GetImageMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt8* GetImageMap() = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:()
xn::ModuleImageGenerator::GetPixelFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnPixelFormat GetPixelFormat() = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:()
xn::ModuleImageGenerator::IsPixelFormatSupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsPixelFormatSupported(XnPixelFormat Format) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnPixelFormat Format)
xn::ModuleImageGenerator::RegisterToPixelFormatChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPixelFormatChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleImageGenerator::SetPixelFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetPixelFormat(XnPixelFormat Format) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnPixelFormat Format)
xn::ModuleImageGenerator::UnregisterFromPixelFormatChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPixelFormatChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleImageGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleImageGenerator::~ModuleImageGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleImageGenerator() {}$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
xn::ModuleLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleLockAwareInterface$/;"	c	namespace:xn
xn::ModuleLockAwareInterface::GetLockState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool GetLockState() = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:()
xn::ModuleLockAwareInterface::RegisterToLockChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToLockChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleLockAwareInterface::SetLockState	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetLockState(XnBool bLocked) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnBool bLocked)
xn::ModuleLockAwareInterface::UnregisterFromLockChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromLockChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleLockAwareInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleLockAwareInterface::~ModuleLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleLockAwareInterface() {}$/;"	f	class:xn::ModuleLockAwareInterface	access:public	signature:()
xn::ModuleMapGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleMapGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
xn::ModuleMapGenerator::GetAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleAntiFlickerInterface* GetAntiFlickerInterface() { return NULL; }$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
xn::ModuleMapGenerator::GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:()
xn::ModuleMapGenerator::GetCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleCroppingInterface* GetCroppingInterface() { return NULL; }$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
xn::ModuleMapGenerator::GetMapOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetMapOutputMode(XnMapOutputMode& Mode) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnMapOutputMode& Mode)
xn::ModuleMapGenerator::GetSupportedMapOutputModes	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSupportedMapOutputModes(XnMapOutputMode aModes[], XnUInt32& nCount) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnMapOutputMode aModes[], XnUInt32& nCount)
xn::ModuleMapGenerator::GetSupportedMapOutputModesCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedMapOutputModesCount() = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:()
xn::ModuleMapGenerator::RegisterToMapOutputModeChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToMapOutputModeChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleMapGenerator::SetMapOutputMode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetMapOutputMode(const XnMapOutputMode& Mode) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(const XnMapOutputMode& Mode)
xn::ModuleMapGenerator::UnregisterFromMapOutputModeChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromMapOutputModeChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleMapGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleMapGenerator::~ModuleMapGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleMapGenerator() {}$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
xn::ModuleMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleMirrorInterface$/;"	c	namespace:xn
xn::ModuleMirrorInterface::IsMirrored	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsMirrored() = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:()
xn::ModuleMirrorInterface::RegisterToMirrorChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToMirrorChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleMirrorInterface::SetMirror	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetMirror(XnBool bMirror) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnBool bMirror)
xn::ModuleMirrorInterface::UnregisterFromMirrorChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromMirrorChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleMirrorInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleMirrorInterface::~ModuleMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleMirrorInterface() {}$/;"	f	class:xn::ModuleMirrorInterface	access:public	signature:()
xn::ModuleNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleNodeNotifications$/;"	c	namespace:xn
xn::ModuleNodeNotifications::OnNodeAdded	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeAdded(const XnChar* strNodeName, XnProductionNodeType type, XnCodecID compression) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, XnProductionNodeType type, XnCodecID compression)
xn::ModuleNodeNotifications::OnNodeGeneralPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeGeneralPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnUInt32 nBufferSize, const void* pBuffer)
xn::ModuleNodeNotifications::OnNodeIntPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeIntPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnUInt64 nValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnUInt64 nValue)
xn::ModuleNodeNotifications::OnNodeNewData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeNewData(const XnChar* strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void* pData, XnUInt32 nSize) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, XnUInt64 nTimeStamp, XnUInt32 nFrame, const void* pData, XnUInt32 nSize)
xn::ModuleNodeNotifications::OnNodeRealPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeRealPropChanged(const XnChar* strNodeName, const XnChar* strPropName, XnDouble dValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, XnDouble dValue)
xn::ModuleNodeNotifications::OnNodeRemoved	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeRemoved(const XnChar* strNodeName) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName)
xn::ModuleNodeNotifications::OnNodeStateReady	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeStateReady(const XnChar* strNodeName) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName)
xn::ModuleNodeNotifications::OnNodeStringPropChanged	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus OnNodeStringPropChanged(const XnChar* strNodeName, const XnChar* strPropName, const XnChar* strValue) = 0;$/;"	p	class:xn::ModuleNodeNotifications	access:public	signature:(const XnChar* strNodeName, const XnChar* strPropName, const XnChar* strValue)
xn::ModuleNodeNotifications::~ModuleNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleNodeNotifications() {}$/;"	f	class:xn::ModuleNodeNotifications	access:public	signature:()
xn::ModulePlayer	/usr/include/ni/XnModuleCppInterface.h	/^	class ModulePlayer : virtual public ModuleProductionNode$/;"	c	namespace:xn	inherits:ModuleProductionNode
xn::ModulePlayer::GetNumFrames	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetNumFrames(const XnChar* strNodeName, XnUInt32& nFrames) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrames)
xn::ModulePlayer::GetSupportedFormat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const XnChar* GetSupportedFormat() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
xn::ModulePlayer::IsEOF	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsEOF() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
xn::ModulePlayer::ReadNext	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ReadNext() = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:()
xn::ModulePlayer::RegisterToEndOfFileReached	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToEndOfFileReached(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModulePlayer::SeekToFrame	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SeekToFrame(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
xn::ModulePlayer::SeekToTimeStamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SeekToTimeStamp(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
xn::ModulePlayer::SetInputStream	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetInputStream(void* pStreamCookie, XnPlayerInputStreamInterface* pStream) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(void* pStreamCookie, XnPlayerInputStreamInterface* pStream)
xn::ModulePlayer::SetNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetNodeNotifications(void* pNodeNotificationsCookie, XnNodeNotifications* pNodeNotifications) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(void* pNodeNotificationsCookie, XnNodeNotifications* pNodeNotifications)
xn::ModulePlayer::SetRepeat	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetRepeat(XnBool bRepeat) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnBool bRepeat)
xn::ModulePlayer::TellFrame	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus TellFrame(const XnChar* strNodeName, XnUInt32& nFrame) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrame)
xn::ModulePlayer::TellTimestamp	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus TellTimestamp(XnUInt64& nTimestamp) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnUInt64& nTimestamp)
xn::ModulePlayer::UnregisterFromEndOfFileReached	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromEndOfFileReached(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModulePlayer	access:public	signature:(XnCallbackHandle hCallback)
xn::ModulePlayer::~ModulePlayer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModulePlayer() {}$/;"	f	class:xn::ModulePlayer	access:public	signature:()
xn::ModulePoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModulePoseDetectionInteface$/;"	c	namespace:xn
xn::ModulePoseDetectionInteface::GetAllAvailablePoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAllAvailablePoses(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses)
xn::ModulePoseDetectionInteface::GetAvailablePoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetAvailablePoses(XnChar** pstrPoses, XnUInt32& nPoses) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnChar** pstrPoses, XnUInt32& nPoses)
xn::ModulePoseDetectionInteface::GetNumberOfPoses	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetNumberOfPoses() = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:()
xn::ModulePoseDetectionInteface::RegisterToPoseDetectionCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToPoseDetectionCallbacks(XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndPoseCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnModulePoseDetectionCallback StartPoseCB, XnModulePoseDetectionCallback EndPoseCB, void* pCookie, XnCallbackHandle& hCallback)
xn::ModulePoseDetectionInteface::StartPoseDetection	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartPoseDetection(const XnChar* strPose, XnUserID user) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(const XnChar* strPose, XnUserID user)
xn::ModulePoseDetectionInteface::StopPoseDetection	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopPoseDetection(XnUserID user) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnUserID user)
xn::ModulePoseDetectionInteface::UnregisterFromPoseDetectionCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromPoseDetectionCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModulePoseDetectionInteface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModulePoseDetectionInteface::~ModulePoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModulePoseDetectionInteface() {}$/;"	f	class:xn::ModulePoseDetectionInteface	access:public	signature:()
xn::ModuleProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleProductionNode$/;"	c	namespace:xn
xn::ModuleProductionNode::GetErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleErrorStateInterface* GetErrorStateInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
xn::ModuleProductionNode::GetExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleExtendedSerializationInterface* GetExtendedSerializationInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
xn::ModuleProductionNode::GetGeneralIntInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleGeneralIntInterface* GetGeneralIntInterface(const XnChar* \/*strCap*\/) { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* )
xn::ModuleProductionNode::GetGeneralProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetGeneralProperty(const XnChar* \/*strName*\/, XnUInt32 \/*nBufferSize*\/, void* \/*pBuffer*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt32 , void* ) const
xn::ModuleProductionNode::GetIntProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetIntProperty(const XnChar* \/*strName*\/, XnUInt64& \/*nValue*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt64& ) const
xn::ModuleProductionNode::GetLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleLockAwareInterface* GetLockAwareInterface() { return NULL; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
xn::ModuleProductionNode::GetRealProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetRealProperty(const XnChar* \/*strName*\/, XnDouble& \/*dValue*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnDouble& ) const
xn::ModuleProductionNode::GetStringProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetStringProperty(const XnChar* \/*strName*\/, XnChar* \/*csValue*\/, XnUInt32 \/*nBufSize*\/) const { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnChar* , XnUInt32 ) const
xn::ModuleProductionNode::IsCapabilitySupported	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCapabilitySupported(const XnChar* \/*strCapabilityName*\/) { return FALSE; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* )
xn::ModuleProductionNode::SetGeneralProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetGeneralProperty(const XnChar* \/*strName*\/, XnUInt32 \/*nBufferSize*\/, const void* \/*pBuffer*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt32 , const void* )
xn::ModuleProductionNode::SetIntProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetIntProperty(const XnChar* \/*strName*\/, XnUInt64 \/*nValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnUInt64 )
xn::ModuleProductionNode::SetRealProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetRealProperty(const XnChar* \/*strName*\/, XnDouble \/*dValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , XnDouble )
xn::ModuleProductionNode::SetStringProperty	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetStringProperty(const XnChar* \/*strName*\/, const XnChar* \/*strValue*\/) { return XN_STATUS_ERROR; }$/;"	f	class:xn::ModuleProductionNode	access:public	signature:(const XnChar* , const XnChar* )
xn::ModuleProductionNode::~ModuleProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleProductionNode() {}$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
xn::ModuleRecorder	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleRecorder : $/;"	c	namespace:xn	inherits:ModuleProductionNode,ModuleNodeNotifications
xn::ModuleRecorder::SetOutputStream	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetOutputStream(void* pCookie, XnRecorderOutputStreamInterface* pStream) = 0;$/;"	p	class:xn::ModuleRecorder	access:public	signature:(void* pCookie, XnRecorderOutputStreamInterface* pStream)
xn::ModuleRecorder::~ModuleRecorder	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleRecorder() {}$/;"	f	class:xn::ModuleRecorder	access:public	signature:()
xn::ModuleSceneAnalyzer	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleSceneAnalyzer : virtual public ModuleMapGenerator$/;"	c	namespace:xn	inherits:ModuleMapGenerator
xn::ModuleSceneAnalyzer::GetBytesPerPixel	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetBytesPerPixel() { return sizeof(XnLabel); }$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
xn::ModuleSceneAnalyzer::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return GetLabelMap(); }$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
xn::ModuleSceneAnalyzer::GetFloor	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetFloor(XnPlane3D& pPlane) = 0;$/;"	p	class:xn::ModuleSceneAnalyzer	access:public	signature:(XnPlane3D& pPlane)
xn::ModuleSceneAnalyzer::GetLabelMap	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const XnLabel* GetLabelMap() = 0;$/;"	p	class:xn::ModuleSceneAnalyzer	access:public	signature:()
xn::ModuleSceneAnalyzer::~ModuleSceneAnalyzer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleSceneAnalyzer() {}$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
xn::ModuleSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleSkeletonInterface$/;"	c	namespace:xn
xn::ModuleSkeletonInterface::AbortCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus AbortCalibration(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::ClearCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus ClearCalibrationData(XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUInt32 nSlot)
xn::ModuleSkeletonInterface::EnumerateActiveJoints	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus EnumerateActiveJoints(XnSkeletonJoint* pJoints, XnUInt16& nJoints) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint* pJoints, XnUInt16& nJoints)
xn::ModuleSkeletonInterface::GetCalibrationPose	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCalibrationPose(XnChar* strPose) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnChar* strPose)
xn::ModuleSkeletonInterface::GetSkeletonJoint	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJoint(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& jointTransformation) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& jointTransformation)
xn::ModuleSkeletonInterface::GetSkeletonJointOrientation	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJointOrientation(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& pJointOrientation) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& pJointOrientation)
xn::ModuleSkeletonInterface::GetSkeletonJointPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetSkeletonJointPosition(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& pJointPosition) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& pJointPosition)
xn::ModuleSkeletonInterface::IsCalibrated	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrated(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::IsCalibrating	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrating(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::IsCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsCalibrationData(XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUInt32 nSlot)
xn::ModuleSkeletonInterface::IsJointActive	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsJointActive(XnSkeletonJoint eJoint) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint)
xn::ModuleSkeletonInterface::IsJointAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsJointAvailable(XnSkeletonJoint eJoint) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint)
xn::ModuleSkeletonInterface::IsProfileAvailable	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsProfileAvailable(XnSkeletonProfile eProfile) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonProfile eProfile)
xn::ModuleSkeletonInterface::IsTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool IsTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::LoadCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus LoadCalibrationData(XnUserID user, XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnUInt32 nSlot)
xn::ModuleSkeletonInterface::LoadCalibrationDataFromFile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus LoadCalibrationDataFromFile(XnUserID user, const XnChar* strFileName) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, const XnChar* strFileName)
xn::ModuleSkeletonInterface::NeedPoseForCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnBool NeedPoseForCalibration() = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:()
xn::ModuleSkeletonInterface::RegisterCalibrationCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterCalibrationCallbacks(XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnModuleCalibrationStart CalibrationStartCB, XnModuleCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleSkeletonInterface::RegisterToJointConfigurationChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToJointConfigurationChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleSkeletonInterface::RequestCalibration	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RequestCalibration(XnUserID user, XnBool bForce) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnBool bForce)
xn::ModuleSkeletonInterface::Reset	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus Reset(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::SaveCalibrationData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SaveCalibrationData(XnUserID user, XnUInt32 nSlot) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, XnUInt32 nSlot)
xn::ModuleSkeletonInterface::SaveCalibrationDataToFile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SaveCalibrationDataToFile(XnUserID user, const XnChar* strFileName) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user, const XnChar* strFileName)
xn::ModuleSkeletonInterface::SetJointActive	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetJointActive(XnSkeletonJoint eJoint, XnBool bState) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonJoint eJoint, XnBool bState)
xn::ModuleSkeletonInterface::SetSkeletonProfile	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSkeletonProfile(XnSkeletonProfile eProfile) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnSkeletonProfile eProfile)
xn::ModuleSkeletonInterface::SetSmoothing	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetSmoothing(XnFloat fSmoothingFactor) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnFloat fSmoothingFactor)
xn::ModuleSkeletonInterface::StartTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StartTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::StopTracking	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus StopTracking(XnUserID user) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnUserID user)
xn::ModuleSkeletonInterface::UnregisterCalibrationCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterCalibrationCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleSkeletonInterface::UnregisterFromJointConfigurationChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromJointConfigurationChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleSkeletonInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleSkeletonInterface::~ModuleSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleSkeletonInterface() {}$/;"	f	class:xn::ModuleSkeletonInterface	access:public	signature:()
xn::ModuleUserGenerator	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleUserGenerator : virtual public ModuleGenerator$/;"	c	namespace:xn	inherits:ModuleGenerator
xn::ModuleUserGenerator::GetCoM	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetCoM(XnUserID user, XnPoint3D& com) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID user, XnPoint3D& com)
xn::ModuleUserGenerator::GetData	/usr/include/ni/XnModuleCppInterface.h	/^		virtual const void* GetData() { return NULL; }$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
xn::ModuleUserGenerator::GetNumberOfUsers	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt16 GetNumberOfUsers() = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:()
xn::ModuleUserGenerator::GetPoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModulePoseDetectionInteface* GetPoseDetectionInteface() {return NULL;}$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
xn::ModuleUserGenerator::GetSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ModuleSkeletonInterface* GetSkeletonInterface() { return NULL; }$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
xn::ModuleUserGenerator::GetUserPixels	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUserPixels(XnUserID user, XnSceneMetaData *pScene) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID user, XnSceneMetaData *pScene)
xn::ModuleUserGenerator::GetUsers	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUsers(XnUserID* pUsers, XnUInt16& nUsers) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnUserID* pUsers, XnUInt16& nUsers)
xn::ModuleUserGenerator::RegisterUserCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterUserCallbacks(XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnModuleUserHandler NewUserCB, XnModuleUserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleUserGenerator::UnregisterUserCallbacks	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterUserCallbacks(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleUserGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleUserGenerator::~ModuleUserGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleUserGenerator() {}$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
xn::ModuleUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^	class ModuleUserPositionInterface$/;"	c	namespace:xn
xn::ModuleUserPositionInterface::GetSupportedUserPositionsCount	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnUInt32 GetSupportedUserPositionsCount() = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:()
xn::ModuleUserPositionInterface::GetUserPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus GetUserPosition(XnUInt32 nIndex, XnBoundingBox3D& Position) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnUInt32 nIndex, XnBoundingBox3D& Position)
xn::ModuleUserPositionInterface::RegisterToUserPositionChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus RegisterToUserPositionChange(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnModuleStateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::ModuleUserPositionInterface::SetUserPosition	/usr/include/ni/XnModuleCppInterface.h	/^		virtual XnStatus SetUserPosition(XnUInt32 nIndex, const XnBoundingBox3D& Position) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnUInt32 nIndex, const XnBoundingBox3D& Position)
xn::ModuleUserPositionInterface::UnregisterFromUserPositionChange	/usr/include/ni/XnModuleCppInterface.h	/^		virtual void UnregisterFromUserPositionChange(XnCallbackHandle hCallback) = 0;$/;"	p	class:xn::ModuleUserPositionInterface	access:public	signature:(XnCallbackHandle hCallback)
xn::ModuleUserPositionInterface::~ModuleUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleUserPositionInterface() {}$/;"	f	class:xn::ModuleUserPositionInterface	access:public	signature:()
xn::NodeInfo	/usr/include/ni/XnCppWrapper.h	/^	class NodeInfo$/;"	c	namespace:xn
xn::NodeInfo::GetAdditionalData	/usr/include/ni/XnCppWrapper.h	/^		inline const void* GetAdditionalData() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
xn::NodeInfo::GetCreationInfo	/usr/include/ni/XnCppWrapper.h	/^		 *\/		inline const XnChar* GetCreationInfo() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
xn::NodeInfo::GetDescription	/usr/include/ni/XnCppWrapper.h	/^		inline const XnProductionNodeDescription& GetDescription() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
xn::NodeInfo::GetInstance	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetInstance(ProductionNode& node) const;$/;"	p	class:xn::NodeInfo	access:public	signature:(ProductionNode& node) const
xn::NodeInfo::GetInstance	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus NodeInfo::GetInstance(ProductionNode& node) const$/;"	f	class:xn::NodeInfo	signature:(ProductionNode& node) const
xn::NodeInfo::GetInstanceName	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetInstanceName() const$/;"	f	class:xn::NodeInfo	access:public	signature:() const
xn::NodeInfo::GetNeededNodes	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList& GetNeededNodes() const;$/;"	p	class:xn::NodeInfo	access:public	signature:() const
xn::NodeInfo::GetNeededNodes	/usr/include/ni/XnCppWrapper.h	/^	inline NodeInfoList& NodeInfo::GetNeededNodes() const$/;"	f	class:xn::NodeInfo	signature:() const
xn::NodeInfo::NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		NodeInfo(XnNodeInfo* pInfo) : m_pNeededNodes(NULL)$/;"	f	class:xn::NodeInfo	access:public	signature:(XnNodeInfo* pInfo)
xn::NodeInfo::NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		NodeInfo(const NodeInfo& other) : m_pNeededNodes(NULL)$/;"	f	class:xn::NodeInfo	access:public	signature:(const NodeInfo& other)
xn::NodeInfo::SetInstanceName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetInstanceName(const XnChar* strName)$/;"	f	class:xn::NodeInfo	access:public	signature:(const XnChar* strName)
xn::NodeInfo::SetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline void SetUnderlyingObject(XnNodeInfo* pInfo);$/;"	p	class:xn::NodeInfo	access:private	signature:(XnNodeInfo* pInfo)
xn::NodeInfo::SetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^	inline void NodeInfo::SetUnderlyingObject(XnNodeInfo* pInfo)$/;"	f	class:xn::NodeInfo	signature:(XnNodeInfo* pInfo)
xn::NodeInfo::m_pInfo	/usr/include/ni/XnCppWrapper.h	/^		XnNodeInfo* m_pInfo;$/;"	m	class:xn::NodeInfo	access:private
xn::NodeInfo::m_pNeededNodes	/usr/include/ni/XnCppWrapper.h	/^		mutable NodeInfoList* m_pNeededNodes;$/;"	m	class:xn::NodeInfo	access:private
xn::NodeInfo::operator =	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfo& operator=(const NodeInfo& other)$/;"	f	class:xn::NodeInfo	access:public	signature:(const NodeInfo& other)
xn::NodeInfo::operator XnNodeInfo*	/usr/include/ni/XnCppWrapper.h	/^		inline operator XnNodeInfo*()$/;"	f	class:xn::NodeInfo	access:public	signature:()
xn::NodeInfo::~NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		~NodeInfo()$/;"	f	class:xn::NodeInfo	access:public	signature:()
xn::NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^	class NodeInfoList$/;"	c	namespace:xn
xn::NodeInfoList::Add	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Add(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes)$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes)
xn::NodeInfoList::AddEx	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddEx(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler)$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnProductionNodeDescription& description, const XnChar* strCreationInfo, NodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler)
xn::NodeInfoList::AddNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNode(NodeInfo& info)$/;"	f	class:xn::NodeInfoList	access:public	signature:(NodeInfo& info)
xn::NodeInfoList::AddNodeFromAnotherList	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNodeFromAnotherList(Iterator& it)$/;"	f	class:xn::NodeInfoList	access:public	signature:(Iterator& it)
xn::NodeInfoList::Append	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Append(NodeInfoList& other)$/;"	f	class:xn::NodeInfoList	access:public	signature:(NodeInfoList& other)
xn::NodeInfoList::Begin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator Begin() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
xn::NodeInfoList::Clear	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Clear()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
xn::NodeInfoList::End	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator End() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
xn::NodeInfoList::FilterList	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus FilterList(Context& context, Query& query);$/;"	p	class:xn::NodeInfoList	access:public	signature:(Context& context, Query& query)
xn::NodeInfoList::FilterList	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus NodeInfoList::FilterList(Context& context, Query& query)$/;"	f	class:xn::NodeInfoList	signature:(Context& context, Query& query)
xn::NodeInfoList::FreeImpl	/usr/include/ni/XnCppWrapper.h	/^		inline void FreeImpl()$/;"	f	class:xn::NodeInfoList	access:private	signature:()
xn::NodeInfoList::GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnNodeInfoList* GetUnderlyingObject() const { return m_pList; }$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
xn::NodeInfoList::IsEmpty	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsEmpty()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
xn::NodeInfoList::Iterator	/usr/include/ni/XnCppWrapper.h	/^		class Iterator$/;"	c	class:xn::NodeInfoList	access:public
xn::NodeInfoList::Iterator::Iterator	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator(XnNodeInfoListIterator it) : m_Info(NULL)$/;"	f	class:xn::NodeInfoList::Iterator	access:private	signature:(XnNodeInfoListIterator it)
xn::NodeInfoList::Iterator::UpdateInternalObject	/usr/include/ni/XnCppWrapper.h	/^			inline void UpdateInternalObject(XnNodeInfoListIterator it)$/;"	f	class:xn::NodeInfoList::Iterator	access:private	signature:(XnNodeInfoListIterator it)
xn::NodeInfoList::Iterator::m_Info	/usr/include/ni/XnCppWrapper.h	/^			NodeInfo m_Info;$/;"	m	class:xn::NodeInfoList::Iterator	access:private
xn::NodeInfoList::Iterator::m_it	/usr/include/ni/XnCppWrapper.h	/^			XnNodeInfoListIterator m_it;$/;"	m	class:xn::NodeInfoList::Iterator	access:private
xn::NodeInfoList::Iterator::operator !=	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator!=(const Iterator& other) const$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(const Iterator& other) const
xn::NodeInfoList::Iterator::operator *	/usr/include/ni/XnCppWrapper.h	/^			inline NodeInfo operator*()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
xn::NodeInfoList::Iterator::operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator++(int)$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(int)
xn::NodeInfoList::Iterator::operator ++	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator++()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
xn::NodeInfoList::Iterator::operator --	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator operator--(int)$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(int)
xn::NodeInfoList::Iterator::operator --	/usr/include/ni/XnCppWrapper.h	/^			inline Iterator& operator--()$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:()
xn::NodeInfoList::Iterator::operator ==	/usr/include/ni/XnCppWrapper.h	/^			XnBool operator==(const Iterator& other) const$/;"	f	class:xn::NodeInfoList::Iterator	access:public	signature:(const Iterator& other) const
xn::NodeInfoList::NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList() $/;"	f	class:xn::NodeInfoList	access:public	signature:()
xn::NodeInfoList::NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfoList(XnNodeInfoList* pList) : m_pList(pList), m_bAllocated(FALSE) {}$/;"	f	class:xn::NodeInfoList	access:public	signature:(XnNodeInfoList* pList)
xn::NodeInfoList::RBegin	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator RBegin() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
xn::NodeInfoList::REnd	/usr/include/ni/XnCppWrapper.h	/^		inline Iterator REnd() const$/;"	f	class:xn::NodeInfoList	access:public	signature:() const
xn::NodeInfoList::Remove	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Remove(Iterator& it)$/;"	f	class:xn::NodeInfoList	access:public	signature:(Iterator& it)
xn::NodeInfoList::ReplaceUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline void ReplaceUnderlyingObject(XnNodeInfoList* pList) $/;"	f	class:xn::NodeInfoList	access:public	signature:(XnNodeInfoList* pList)
xn::NodeInfoList::m_bAllocated	/usr/include/ni/XnCppWrapper.h	/^		XnBool m_bAllocated;$/;"	m	class:xn::NodeInfoList	access:private
xn::NodeInfoList::m_pList	/usr/include/ni/XnCppWrapper.h	/^		XnNodeInfoList* m_pList;$/;"	m	class:xn::NodeInfoList	access:private
xn::NodeInfoList::~NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline ~NodeInfoList()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
xn::NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^	class NodeWrapper$/;"	c	namespace:xn
xn::NodeWrapper::AddRef	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddRef() { return xnProductionNodeAddRef(m_hNode); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
xn::NodeWrapper::GetName	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* GetName() const {return xnGetNodeName(m_hNode); }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
xn::NodeWrapper::IsValid	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsValid() const { return (m_hNode != NULL); }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
xn::NodeWrapper::NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^		inline NodeWrapper(XnNodeHandle hNode) : m_hNode(NULL)$/;"	f	class:xn::NodeWrapper	access:public	signature:(XnNodeHandle hNode)
xn::NodeWrapper::Ref	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus XN_API_DEPRECATED("Please use AddRef() instead.") Ref() { return AddRef(); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
xn::NodeWrapper::Release	/usr/include/ni/XnCppWrapper.h	/^		inline void Release() $/;"	f	class:xn::NodeWrapper	access:public	signature:()
xn::NodeWrapper::SetHandle	/usr/include/ni/XnCppWrapper.h	/^		inline void SetHandle(XnNodeHandle hNode) { m_hNode = hNode; }$/;"	f	class:xn::NodeWrapper	access:public	signature:(XnNodeHandle hNode)
xn::NodeWrapper::Unref	/usr/include/ni/XnCppWrapper.h	/^		inline void XN_API_DEPRECATED("Please use Release() instead.") Unref() { Release(); }$/;"	f	class:xn::NodeWrapper	access:public	signature:()
xn::NodeWrapper::m_hNode	/usr/include/ni/XnCppWrapper.h	/^		XnNodeHandle m_hNode;$/;"	m	class:xn::NodeWrapper	access:protected
xn::NodeWrapper::operator !=	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool operator!=(const NodeWrapper& other)$/;"	f	class:xn::NodeWrapper	access:public	signature:(const NodeWrapper& other)
xn::NodeWrapper::operator ==	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool operator==(const NodeWrapper& other)$/;"	f	class:xn::NodeWrapper	access:public	signature:(const NodeWrapper& other)
xn::NodeWrapper::operator XnNodeHandle	/usr/include/ni/XnCppWrapper.h	/^		inline operator XnNodeHandle() const { return m_hNode; }$/;"	f	class:xn::NodeWrapper	access:public	signature:() const
xn::NodeWrapper::~NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^		inline ~NodeWrapper()$/;"	f	class:xn::NodeWrapper	access:public	signature:()
xn::OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^	class OutputMetaData$/;"	c	namespace:xn
xn::OutputMetaData::AllocateData	/usr/include/ni/XnCppWrapper.h	/^		XnStatus AllocateData(XnUInt32 nBytes)$/;"	f	class:xn::OutputMetaData	access:public	signature:(XnUInt32 nBytes)
xn::OutputMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8* Data() const { return *m_ppData; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnUInt8*& Data() { return *m_ppData; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::DataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 DataSize() const { return m_output.nDataSize; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::DataSize	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& DataSize() { return m_output.nDataSize; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::FrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 FrameID() const { return m_output.nFrameID; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::FrameID	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32& FrameID() { return m_output.nFrameID; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::Free	/usr/include/ni/XnCppWrapper.h	/^		void Free()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnOutputMetaData* GetUnderlying() { return &m_output; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnOutputMetaData* GetUnderlying() const { return &m_output; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsDataNew() const { return m_output.bIsNew; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::IsDataNew	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool& IsDataNew() { return m_output.bIsNew; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::MakeDataWritable	/usr/include/ni/XnCppWrapper.h	/^		XnStatus MakeDataWritable()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline OutputMetaData(const XnUInt8** ppData) : m_ppData(ppData), m_nAllocatedSize(0), m_pAllocatedData(NULL)$/;"	f	class:xn::OutputMetaData	access:public	signature:(const XnUInt8** ppData)
xn::OutputMetaData::Timestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64 Timestamp() const { return m_output.nTimestamp; }$/;"	f	class:xn::OutputMetaData	access:public	signature:() const
xn::OutputMetaData::Timestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt64& Timestamp() { return m_output.nTimestamp; }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt8* WritableData()$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::OutputMetaData::m_nAllocatedSize	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nAllocatedSize;$/;"	m	class:xn::OutputMetaData	access:private
xn::OutputMetaData::m_output	/usr/include/ni/XnCppWrapper.h	/^		XnOutputMetaData m_output;$/;"	m	class:xn::OutputMetaData	access:private
xn::OutputMetaData::m_pAllocatedData	/usr/include/ni/XnCppWrapper.h	/^		XnUInt8* m_pAllocatedData;$/;"	m	class:xn::OutputMetaData	access:protected
xn::OutputMetaData::m_ppData	/usr/include/ni/XnCppWrapper.h	/^		const XnUInt8** m_ppData;$/;"	m	class:xn::OutputMetaData	access:private
xn::OutputMetaData::~OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^		virtual ~OutputMetaData() { Free(); }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
xn::Player	/usr/include/ni/XnCppWrapper.h	/^	class Player : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
xn::Player::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strFormatName);$/;"	p	class:xn::Player	access:public	signature:(Context& context, const XnChar* strFormatName)
xn::Player::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Player::Create(Context& context, const XnChar* strFormatName)$/;"	f	class:xn::Player	signature:(Context& context, const XnChar* strFormatName)
xn::Player::EnumerateNodes	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateNodes(NodeInfoList& list) const$/;"	f	class:xn::Player	access:public	signature:(NodeInfoList& list) const
xn::Player::GetNumFrames	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetNumFrames(const XnChar* strNodeName, XnUInt32& nFrames) const$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrames) const
xn::Player::GetPlaybackSpeed	/usr/include/ni/XnCppWrapper.h	/^		inline XnDouble GetPlaybackSpeed() const$/;"	f	class:xn::Player	access:public	signature:() const
xn::Player::GetSource	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSource(XnRecordMedium &sourceType, XnChar* strSource, XnUInt32 nBufSize) const$/;"	f	class:xn::Player	access:public	signature:(XnRecordMedium &sourceType, XnChar* strSource, XnUInt32 nBufSize) const
xn::Player::GetSupportedFormat	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetSupportedFormat() const$/;"	f	class:xn::Player	access:public	signature:() const
xn::Player::IsEOF	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsEOF() const$/;"	f	class:xn::Player	access:public	signature:() const
xn::Player::Player	/usr/include/ni/XnCppWrapper.h	/^		inline Player(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Player	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Player::ReadNext	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ReadNext()$/;"	f	class:xn::Player	access:public	signature:()
xn::Player::RegisterToEndOfFileReached	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToEndOfFileReached(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::Player	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::Player::SeekToFrame	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SeekToFrame(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
xn::Player::SeekToTimeStamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SeekToTimeStamp(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)$/;"	f	class:xn::Player	access:public	signature:(XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
xn::Player::SetPlaybackSpeed	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetPlaybackSpeed(XnDouble dSpeed)$/;"	f	class:xn::Player	access:public	signature:(XnDouble dSpeed)
xn::Player::SetRepeat	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetRepeat(XnBool bRepeat)$/;"	f	class:xn::Player	access:public	signature:(XnBool bRepeat)
xn::Player::SetSource	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSource(XnRecordMedium sourceType, const XnChar* strSource)$/;"	f	class:xn::Player	access:public	signature:(XnRecordMedium sourceType, const XnChar* strSource)
xn::Player::TellFrame	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus TellFrame(const XnChar* strNodeName, XnUInt32& nFrame) const$/;"	f	class:xn::Player	access:public	signature:(const XnChar* strNodeName, XnUInt32& nFrame) const
xn::Player::TellTimestamp	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus TellTimestamp(XnUInt64& nTimestamp) const$/;"	f	class:xn::Player	access:public	signature:(XnUInt64& nTimestamp) const
xn::Player::UnregisterFromEndOfFileReached	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromEndOfFileReached(XnCallbackHandle hCallback)$/;"	f	class:xn::Player	access:public	signature:(XnCallbackHandle hCallback)
xn::PoseDetectionCapability	/usr/include/ni/XnCppWrapper.h	/^	class PoseDetectionCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::PoseDetectionCapability::GetAllAvailablePoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAllAvailablePoses(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32& nPoses) const
xn::PoseDetectionCapability::GetAvailablePoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetAvailablePoses(XnChar** pstrPoses, XnUInt32& nPoses) const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnChar** pstrPoses, XnUInt32& nPoses) const
xn::PoseDetectionCapability::GetNumberOfPoses	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetNumberOfPoses() const$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:() const
xn::PoseDetectionCapability::PoseCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct PoseCookie$/;"	s	class:xn::PoseDetectionCapability	access:private
xn::PoseDetectionCapability::PoseCookie	/usr/include/ni/XnCppWrapper.h	/^		} PoseCookie;$/;"	t	class:xn::PoseDetectionCapability	typeref:struct:xn::PoseDetectionCapability::PoseCookie	access:private
xn::PoseDetectionCapability::PoseCookie::endHandler	/usr/include/ni/XnCppWrapper.h	/^			PoseDetection endHandler;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
xn::PoseDetectionCapability::PoseCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
xn::PoseDetectionCapability::PoseCookie::pPoseCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pPoseCookie;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
xn::PoseDetectionCapability::PoseCookie::startHandler	/usr/include/ni/XnCppWrapper.h	/^			PoseDetection startHandler;$/;"	m	struct:xn::PoseDetectionCapability::PoseCookie	access:public
xn::PoseDetectionCapability::PoseDetection	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* PoseDetection)(PoseDetectionCapability& pose, const XnChar* strPose, XnUserID user, void* pCookie);$/;"	t	class:xn::PoseDetectionCapability	access:public
xn::PoseDetectionCapability::PoseDetectionCapability	/usr/include/ni/XnCppWrapper.h	/^		inline PoseDetectionCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnNodeHandle hNode)
xn::PoseDetectionCapability::PoseDetectionStartCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE PoseDetectionStartCallback(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)$/;"	f	class:xn::PoseDetectionCapability	access:private	signature:(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)
xn::PoseDetectionCapability::PoseDetectionStartEndCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE PoseDetectionStartEndCallback(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)$/;"	f	class:xn::PoseDetectionCapability	access:private	signature:(XnNodeHandle hNode, const XnChar* strPose, XnUserID user, void* pCookie)
xn::PoseDetectionCapability::RegisterToPoseCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToPoseCallbacks(PoseDetection PoseStartCB, PoseDetection PoseEndCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(PoseDetection PoseStartCB, PoseDetection PoseEndCB, void* pCookie, XnCallbackHandle& hCallback)
xn::PoseDetectionCapability::StartPoseDetection	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartPoseDetection(const XnChar* strPose, XnUserID user)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(const XnChar* strPose, XnUserID user)
xn::PoseDetectionCapability::StopPoseDetection	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopPoseDetection(XnUserID user)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnUserID user)
xn::PoseDetectionCapability::UnregisterFromPoseCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromPoseCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::PoseDetectionCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::ProductionNode	/usr/include/ni/XnCppWrapper.h	/^	class ProductionNode : public NodeWrapper$/;"	c	namespace:xn	inherits:NodeWrapper
xn::ProductionNode::AddNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNeededNode(ProductionNode& needed)$/;"	f	class:xn::ProductionNode	access:public	signature:(ProductionNode& needed)
xn::ProductionNode::GetContext	/usr/include/ni/XnCppWrapper.h	/^		inline void GetContext(Context& context) const;$/;"	p	class:xn::ProductionNode	access:public	signature:(Context& context) const
xn::ProductionNode::GetContext	/usr/include/ni/XnCppWrapper.h	/^	inline void ProductionNode::GetContext(Context& context) const$/;"	f	class:xn::ProductionNode	signature:(Context& context) const
xn::ProductionNode::GetErrorStateCap	/usr/include/ni/XnCppWrapper.h	/^		inline ErrorStateCapability GetErrorStateCap()$/;"	f	class:xn::ProductionNode	access:public	signature:()
xn::ProductionNode::GetErrorStateCap	/usr/include/ni/XnCppWrapper.h	/^		inline const ErrorStateCapability GetErrorStateCap() const$/;"	f	class:xn::ProductionNode	access:public	signature:() const
xn::ProductionNode::GetGeneralIntCap	/usr/include/ni/XnCppWrapper.h	/^		inline GeneralIntCapability GetGeneralIntCap(const XnChar* strCapability)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strCapability)
xn::ProductionNode::GetGeneralProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetGeneralProperty(const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer) const
xn::ProductionNode::GetInfo	/usr/include/ni/XnCppWrapper.h	/^		inline NodeInfo GetInfo() const { return NodeInfo(xnGetNodeInfo(m_hNode)); }$/;"	f	class:xn::ProductionNode	access:public	signature:() const
xn::ProductionNode::GetIntProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetIntProperty(const XnChar* strName, XnUInt64& nValue) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt64& nValue) const
xn::ProductionNode::GetRealProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetRealProperty(const XnChar* strName, XnDouble &dValue) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnDouble &dValue) const
xn::ProductionNode::GetStringProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetStringProperty(const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize) const
xn::ProductionNode::IsCapabilitySupported	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCapabilitySupported(const XnChar* strCapabilityName) const$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strCapabilityName) const
xn::ProductionNode::LockForChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LockForChanges(XnLockHandle* phLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle* phLock)
xn::ProductionNode::LockedNodeEndChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void LockedNodeEndChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
xn::ProductionNode::LockedNodeStartChanges	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LockedNodeStartChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
xn::ProductionNode::ProductionNode	/usr/include/ni/XnCppWrapper.h	/^		inline ProductionNode(XnNodeHandle hNode = NULL) : NodeWrapper(hNode) {}$/;"	f	class:xn::ProductionNode	access:public	signature:(XnNodeHandle hNode = NULL)
xn::ProductionNode::RemoveNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveNeededNode(ProductionNode& needed)$/;"	f	class:xn::ProductionNode	access:public	signature:(ProductionNode& needed)
xn::ProductionNode::SetGeneralProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetGeneralProperty(const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)
xn::ProductionNode::SetIntProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetIntProperty(const XnChar* strName, XnUInt64 nValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnUInt64 nValue)
xn::ProductionNode::SetRealProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetRealProperty(const XnChar* strName, XnDouble dValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, XnDouble dValue)
xn::ProductionNode::SetStringProperty	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetStringProperty(const XnChar* strName, const XnChar* strValue)$/;"	f	class:xn::ProductionNode	access:public	signature:(const XnChar* strName, const XnChar* strValue)
xn::ProductionNode::UnlockForChanges	/usr/include/ni/XnCppWrapper.h	/^		inline void UnlockForChanges(XnLockHandle hLock)$/;"	f	class:xn::ProductionNode	access:public	signature:(XnLockHandle hLock)
xn::Query	/usr/include/ni/XnCppWrapper.h	/^	class Query$/;"	c	namespace:xn
xn::Query::AddNeededNode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNeededNode(const XnChar* strInstanceName)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strInstanceName)
xn::Query::AddSupportedCapability	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddSupportedCapability(const XnChar* strNeededCapability)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strNeededCapability)
xn::Query::AddSupportedMapOutputMode	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddSupportedMapOutputMode(const XnMapOutputMode& MapOutputMode)$/;"	f	class:xn::Query	access:public	signature:(const XnMapOutputMode& MapOutputMode)
xn::Query::GetUnderlyingObject	/usr/include/ni/XnCppWrapper.h	/^		inline XnNodeQuery* GetUnderlyingObject() const { return m_pQuery; }$/;"	f	class:xn::Query	access:public	signature:() const
xn::Query::Query	/usr/include/ni/XnCppWrapper.h	/^		inline Query()$/;"	f	class:xn::Query	access:public	signature:()
xn::Query::SetCreationInfo	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetCreationInfo(const XnChar* strCreationInfo)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strCreationInfo)
xn::Query::SetExistingNodeOnly	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetExistingNodeOnly(XnBool bExistingNode)$/;"	f	class:xn::Query	access:public	signature:(XnBool bExistingNode)
xn::Query::SetMaxVersion	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMaxVersion(const XnVersion& maxVersion)$/;"	f	class:xn::Query	access:public	signature:(const XnVersion& maxVersion)
xn::Query::SetMinVersion	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetMinVersion(const XnVersion& minVersion)$/;"	f	class:xn::Query	access:public	signature:(const XnVersion& minVersion)
xn::Query::SetName	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetName(const XnChar* strName)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strName)
xn::Query::SetSupportedMinUserPositions	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSupportedMinUserPositions(const XnUInt32 nCount)$/;"	f	class:xn::Query	access:public	signature:(const XnUInt32 nCount)
xn::Query::SetVendor	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetVendor(const XnChar* strVendor)$/;"	f	class:xn::Query	access:public	signature:(const XnChar* strVendor)
xn::Query::m_pQuery	/usr/include/ni/XnCppWrapper.h	/^		XnNodeQuery* m_pQuery;$/;"	m	class:xn::Query	access:private
xn::Query::~Query	/usr/include/ni/XnCppWrapper.h	/^		~Query()$/;"	f	class:xn::Query	access:public	signature:()
xn::Recorder	/usr/include/ni/XnCppWrapper.h	/^	class Recorder : public ProductionNode$/;"	c	namespace:xn	inherits:ProductionNode
xn::Recorder::AddNodeToRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AddNodeToRecording(ProductionNode& Node, XnCodecID compression = XN_CODEC_NULL)$/;"	f	class:xn::Recorder	access:public	signature:(ProductionNode& Node, XnCodecID compression = XN_CODEC_NULL)
xn::Recorder::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, const XnChar* strFormatName = NULL);$/;"	p	class:xn::Recorder	access:public	signature:(Context& context, const XnChar* strFormatName = NULL)
xn::Recorder::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus Recorder::Create(Context& context, const XnChar* strFormatName \/*= NULL*\/)$/;"	f	class:xn::Recorder	signature:(Context& context, const XnChar* strFormatName )
xn::Recorder::Record	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Record()$/;"	f	class:xn::Recorder	access:public	signature:()
xn::Recorder::Recorder	/usr/include/ni/XnCppWrapper.h	/^		inline Recorder(XnNodeHandle hNode = NULL) : ProductionNode(hNode) {}$/;"	f	class:xn::Recorder	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Recorder::RemoveNodeFromRecording	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RemoveNodeFromRecording(ProductionNode& Node)$/;"	f	class:xn::Recorder	access:public	signature:(ProductionNode& Node)
xn::Recorder::SetDestination	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetDestination(XnRecordMedium destType, const XnChar* strDest)$/;"	f	class:xn::Recorder	access:public	signature:(XnRecordMedium destType, const XnChar* strDest)
xn::Resolution	/usr/include/ni/XnCppWrapper.h	/^	class Resolution$/;"	c	namespace:xn
xn::Resolution::GetName	/usr/include/ni/XnCppWrapper.h	/^		inline const XnChar* GetName() const { return m_strName; }$/;"	f	class:xn::Resolution	access:public	signature:() const
xn::Resolution::GetResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnResolution GetResolution() const { return m_Res; }$/;"	f	class:xn::Resolution	access:public	signature:() const
xn::Resolution::GetXResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetXResolution() const { return m_nXRes; }$/;"	f	class:xn::Resolution	access:public	signature:() const
xn::Resolution::GetYResolution	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetYResolution() const { return m_nYRes; }$/;"	f	class:xn::Resolution	access:public	signature:() const
xn::Resolution::Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(XnResolution res) : m_Res(res)$/;"	f	class:xn::Resolution	access:public	signature:(XnResolution res)
xn::Resolution::Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(XnUInt32 xRes, XnUInt32 yRes) : m_nXRes(xRes), m_nYRes(yRes)$/;"	f	class:xn::Resolution	access:public	signature:(XnUInt32 xRes, XnUInt32 yRes)
xn::Resolution::Resolution	/usr/include/ni/XnCppWrapper.h	/^		inline Resolution(const XnChar* strName)$/;"	f	class:xn::Resolution	access:public	signature:(const XnChar* strName)
xn::Resolution::m_Res	/usr/include/ni/XnCppWrapper.h	/^		XnResolution m_Res;$/;"	m	class:xn::Resolution	access:private
xn::Resolution::m_nXRes	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nXRes;$/;"	m	class:xn::Resolution	access:private
xn::Resolution::m_nYRes	/usr/include/ni/XnCppWrapper.h	/^		XnUInt32 m_nYRes;$/;"	m	class:xn::Resolution	access:private
xn::Resolution::m_strName	/usr/include/ni/XnCppWrapper.h	/^		const XnChar* m_strName;$/;"	m	class:xn::Resolution	access:private
xn::SceneAnalyzer	/usr/include/ni/XnCppWrapper.h	/^	class SceneAnalyzer : public MapGenerator$/;"	c	namespace:xn	inherits:MapGenerator
xn::SceneAnalyzer::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::SceneAnalyzer	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::SceneAnalyzer::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus SceneAnalyzer::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::SceneAnalyzer	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::SceneAnalyzer::GetFloor	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetFloor(XnPlane3D& Plane) const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(XnPlane3D& Plane) const
xn::SceneAnalyzer::GetLabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel* GetLabelMap() const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:() const
xn::SceneAnalyzer::GetMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline void GetMetaData(SceneMetaData& metaData) const$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(SceneMetaData& metaData) const
xn::SceneAnalyzer::SceneAnalyzer	/usr/include/ni/XnCppWrapper.h	/^		inline SceneAnalyzer(XnNodeHandle hNode = NULL) : MapGenerator(hNode) {}$/;"	f	class:xn::SceneAnalyzer	access:public	signature:(XnNodeHandle hNode = NULL)
xn::SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^	class SceneMetaData : public MapMetaData$/;"	c	namespace:xn	inherits:MapMetaData
xn::SceneMetaData::CopyFrom	/usr/include/ni/XnCppWrapper.h	/^		XnStatus CopyFrom(const SceneMetaData& other)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other)
xn::SceneMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel* Data() const { return (const XnLabel*)MapMetaData::Data(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
xn::SceneMetaData::Data	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel*& Data() { return (const XnLabel*&)MapMetaData::Data(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
xn::SceneMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline XnSceneMetaData* GetUnderlying() { return &m_scene; }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
xn::SceneMetaData::GetUnderlying	/usr/include/ni/XnCppWrapper.h	/^		inline const XnSceneMetaData* GetUnderlying() const { return &m_scene; }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
xn::SceneMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus InitFrom(const SceneMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other, XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer)
xn::SceneMetaData::InitFrom	/usr/include/ni/XnCppWrapper.h	/^		inline void InitFrom(const SceneMetaData& other)$/;"	f	class:xn::SceneMetaData	access:public	signature:(const SceneMetaData& other)
xn::SceneMetaData::LabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline const xn::LabelMap& LabelMap() const { return m_labelMap; }$/;"	f	class:xn::SceneMetaData	access:public	signature:() const
xn::SceneMetaData::ReAdjust	/usr/include/ni/XnCppWrapper.h	/^		XnStatus ReAdjust(XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer = NULL)$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 nXRes, XnUInt32 nYRes, const XnLabel* pExternalBuffer = NULL)
xn::SceneMetaData::SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^		SceneMetaData(const SceneMetaData& other);$/;"	p	class:xn::SceneMetaData	access:private	signature:(const SceneMetaData& other)
xn::SceneMetaData::SceneMetaData	/usr/include/ni/XnCppWrapper.h	/^		inline SceneMetaData() : $/;"	f	class:xn::SceneMetaData	access:public	signature:()
xn::SceneMetaData::WritableData	/usr/include/ni/XnCppWrapper.h	/^		inline XnLabel* WritableData() { return (XnLabel*)MapMetaData::WritableData(); }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
xn::SceneMetaData::WritableLabelMap	/usr/include/ni/XnCppWrapper.h	/^		inline xn::LabelMap& WritableLabelMap() { MakeDataWritable(); return m_writableLabelMap; }$/;"	f	class:xn::SceneMetaData	access:public	signature:()
xn::SceneMetaData::m_labelMap	/usr/include/ni/XnCppWrapper.h	/^		const xn::LabelMap m_labelMap;$/;"	m	class:xn::SceneMetaData	access:private
xn::SceneMetaData::m_scene	/usr/include/ni/XnCppWrapper.h	/^		XnSceneMetaData m_scene;$/;"	m	class:xn::SceneMetaData	access:private
xn::SceneMetaData::m_writableLabelMap	/usr/include/ni/XnCppWrapper.h	/^		xn::LabelMap m_writableLabelMap;$/;"	m	class:xn::SceneMetaData	access:private
xn::SceneMetaData::operator ()	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel& operator()(XnUInt32 x, XnUInt32 y) const$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 x, XnUInt32 y) const
xn::SceneMetaData::operator =	/usr/include/ni/XnCppWrapper.h	/^		SceneMetaData& operator=(const SceneMetaData&);$/;"	p	class:xn::SceneMetaData	access:private	signature:(const SceneMetaData&)
xn::SceneMetaData::operator []	/usr/include/ni/XnCppWrapper.h	/^		inline const XnLabel& operator[](XnUInt32 nIndex) const$/;"	f	class:xn::SceneMetaData	access:public	signature:(XnUInt32 nIndex) const
xn::SkeletonCapability	/usr/include/ni/XnCppWrapper.h	/^	class SkeletonCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::SkeletonCapability::AbortCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus AbortCalibration(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
xn::SkeletonCapability::CalibrationEnd	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* CalibrationEnd)(SkeletonCapability& skeleton, XnUserID user, XnBool bSuccess, void* pCookie);$/;"	t	class:xn::SkeletonCapability	access:public
xn::SkeletonCapability::CalibrationEndCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE CalibrationEndCallback(XnNodeHandle hNode, XnUserID user, XnBool bSuccess, void* pCookie)$/;"	f	class:xn::SkeletonCapability	access:private	signature:(XnNodeHandle hNode, XnUserID user, XnBool bSuccess, void* pCookie)
xn::SkeletonCapability::CalibrationStart	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* CalibrationStart)(SkeletonCapability& skeleton, XnUserID user, void* pCookie);$/;"	t	class:xn::SkeletonCapability	access:public
xn::SkeletonCapability::CalibrationStartCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE CalibrationStartCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::SkeletonCapability	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
xn::SkeletonCapability::ClearCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus ClearCalibrationData(XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUInt32 nSlot)
xn::SkeletonCapability::EnumerateActiveJoints	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus EnumerateActiveJoints(XnSkeletonJoint* pJoints, XnUInt16& nJoints) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint* pJoints, XnUInt16& nJoints) const
xn::SkeletonCapability::GetCalibrationPose	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCalibrationPose(XnChar* strPose) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnChar* strPose) const
xn::SkeletonCapability::GetSkeletonJoint	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJoint(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation& Joint) const
xn::SkeletonCapability::GetSkeletonJointOrientation	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJointOrientation(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation& Joint) const
xn::SkeletonCapability::GetSkeletonJointPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetSkeletonJointPosition(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& Joint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition& Joint) const
xn::SkeletonCapability::IsCalibrated	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrated(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
xn::SkeletonCapability::IsCalibrating	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrating(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
xn::SkeletonCapability::IsCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsCalibrationData(XnUInt32 nSlot) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUInt32 nSlot) const
xn::SkeletonCapability::IsJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointActive(XnSkeletonJoint eJoint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint) const
xn::SkeletonCapability::IsJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointActive(XnSkeletonJoint eJoint, XnBool \/*bState*\/) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint, XnBool ) const
xn::SkeletonCapability::IsJointAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsJointAvailable(XnSkeletonJoint eJoint) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint) const
xn::SkeletonCapability::IsProfileAvailable	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsProfileAvailable(XnSkeletonProfile eProfile) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonProfile eProfile) const
xn::SkeletonCapability::IsTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool IsTracking(XnUserID user) const$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user) const
xn::SkeletonCapability::LoadCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LoadCalibrationData(XnUserID user, XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnUInt32 nSlot)
xn::SkeletonCapability::LoadCalibrationDataFromFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus LoadCalibrationDataFromFile(XnUserID user, const XnChar* strFileName)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, const XnChar* strFileName)
xn::SkeletonCapability::NeedPoseForCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnBool NeedPoseForCalibration() const$/;"	f	class:xn::SkeletonCapability	access:public	signature:() const
xn::SkeletonCapability::RegisterCalibrationCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterCalibrationCallbacks(CalibrationStart CalibrationStartCB, CalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(CalibrationStart CalibrationStartCB, CalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle& hCallback)
xn::SkeletonCapability::RegisterToJointConfigurationChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToJointConfigurationChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::SkeletonCapability::RequestCalibration	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RequestCalibration(XnUserID user, XnBool bForce)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnBool bForce)
xn::SkeletonCapability::Reset	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Reset(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
xn::SkeletonCapability::SaveCalibrationData	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SaveCalibrationData(XnUserID user, XnUInt32 nSlot)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, XnUInt32 nSlot)
xn::SkeletonCapability::SaveCalibrationDataToFile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SaveCalibrationDataToFile(XnUserID user, const XnChar* strFileName)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user, const XnChar* strFileName)
xn::SkeletonCapability::SetJointActive	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetJointActive(XnSkeletonJoint eJoint, XnBool bState)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonJoint eJoint, XnBool bState)
xn::SkeletonCapability::SetSkeletonProfile	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSkeletonProfile(XnSkeletonProfile eProfile)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnSkeletonProfile eProfile)
xn::SkeletonCapability::SetSmoothing	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetSmoothing(XnFloat fSmoothingFactor)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnFloat fSmoothingFactor)
xn::SkeletonCapability::SkeletonCapability	/usr/include/ni/XnCppWrapper.h	/^		inline SkeletonCapability(XnNodeHandle hNode) : Capability(hNode) {}$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnNodeHandle hNode)
xn::SkeletonCapability::SkeletonCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct SkeletonCookie$/;"	s	class:xn::SkeletonCapability	access:private
xn::SkeletonCapability::SkeletonCookie	/usr/include/ni/XnCppWrapper.h	/^		} SkeletonCookie;$/;"	t	class:xn::SkeletonCapability	typeref:struct:xn::SkeletonCapability::SkeletonCookie	access:private
xn::SkeletonCapability::SkeletonCookie::endHandler	/usr/include/ni/XnCppWrapper.h	/^			CalibrationEnd endHandler;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
xn::SkeletonCapability::SkeletonCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
xn::SkeletonCapability::SkeletonCookie::pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
xn::SkeletonCapability::SkeletonCookie::startHandler	/usr/include/ni/XnCppWrapper.h	/^			CalibrationStart startHandler;$/;"	m	struct:xn::SkeletonCapability::SkeletonCookie	access:public
xn::SkeletonCapability::StartTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StartTracking(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
xn::SkeletonCapability::StopTracking	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus StopTracking(XnUserID user)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnUserID user)
xn::SkeletonCapability::UnregisterCalibrationCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterCalibrationCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::SkeletonCapability::UnregisterFromJointConfigurationChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromJointConfigurationChange(XnCallbackHandle hCallback)$/;"	f	class:xn::SkeletonCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::StateChangedCallbackTranslator	/usr/include/ni/XnCppWrapper.h	/^	class StateChangedCallbackTranslator$/;"	c	namespace:xn
xn::StateChangedCallbackTranslator::Register	/usr/include/ni/XnCppWrapper.h	/^		XnStatus Register(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)
xn::StateChangedCallbackTranslator::RegisterToUnderlying	/usr/include/ni/XnCppWrapper.h	/^		static XnStatus RegisterToUnderlying(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::StateChangedCallbackTranslator::StateChangeCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct StateChangeCookie$/;"	s	class:xn::StateChangedCallbackTranslator	access:private
xn::StateChangedCallbackTranslator::StateChangeCookie	/usr/include/ni/XnCppWrapper.h	/^		} StateChangeCookie;$/;"	t	class:xn::StateChangedCallbackTranslator	typeref:struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:private
xn::StateChangedCallbackTranslator::StateChangeCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
xn::StateChangedCallbackTranslator::StateChangeCookie::pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
xn::StateChangedCallbackTranslator::StateChangeCookie::userHandler	/usr/include/ni/XnCppWrapper.h	/^			StateChangedHandler userHandler;$/;"	m	struct:xn::StateChangedCallbackTranslator::StateChangeCookie	access:public
xn::StateChangedCallbackTranslator::StateChangedCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE StateChangedCallback(XnNodeHandle hNode, void* pCookie)$/;"	f	class:xn::StateChangedCallbackTranslator	access:private	signature:(XnNodeHandle hNode, void* pCookie)
xn::StateChangedCallbackTranslator::StateChangedCallbackTranslator	/usr/include/ni/XnCppWrapper.h	/^		StateChangedCallbackTranslator(StateChangedHandler handler, void* pCookie) : m_UserHandler(handler), m_pUserCookie(pCookie), m_hCallback(NULL) {}$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(StateChangedHandler handler, void* pCookie)
xn::StateChangedCallbackTranslator::Unregister	/usr/include/ni/XnCppWrapper.h	/^		void Unregister(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode)
xn::StateChangedCallbackTranslator::UnregisterFromUnderlying	/usr/include/ni/XnCppWrapper.h	/^		static XnStatus UnregisterFromUnderlying(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)$/;"	f	class:xn::StateChangedCallbackTranslator	access:public	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
xn::StateChangedCallbackTranslator::m_UserHandler	/usr/include/ni/XnCppWrapper.h	/^		StateChangedHandler m_UserHandler;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
xn::StateChangedCallbackTranslator::m_hCallback	/usr/include/ni/XnCppWrapper.h	/^		XnCallbackHandle m_hCallback;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
xn::StateChangedCallbackTranslator::m_pUserCookie	/usr/include/ni/XnCppWrapper.h	/^		void* m_pUserCookie;$/;"	m	class:xn::StateChangedCallbackTranslator	access:private
xn::StateChangedHandler	/usr/include/ni/XnCppWrapper.h	/^	typedef void (XN_CALLBACK_TYPE* StateChangedHandler)(ProductionNode& node, void* pCookie);$/;"	t	namespace:xn
xn::UserGenerator	/usr/include/ni/XnCppWrapper.h	/^	class UserGenerator : public Generator$/;"	c	namespace:xn	inherits:Generator
xn::UserGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus Create(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL);$/;"	p	class:xn::UserGenerator	access:public	signature:(Context& context, Query* pQuery = NULL, EnumerationErrors* pErrors = NULL)
xn::UserGenerator::Create	/usr/include/ni/XnCppWrapper.h	/^	inline XnStatus UserGenerator::Create(Context& context, Query* pQuery\/*=NULL*\/, EnumerationErrors* pErrors\/*=NULL*\/)$/;"	f	class:xn::UserGenerator	signature:(Context& context, Query* pQuery , EnumerationErrors* pErrors )
xn::UserGenerator::GetCoM	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetCoM(XnUserID user, XnPoint3D& com) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID user, XnPoint3D& com) const
xn::UserGenerator::GetNumberOfUsers	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt16 GetNumberOfUsers() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
xn::UserGenerator::GetPoseDetectionCap	/usr/include/ni/XnCppWrapper.h	/^		inline PoseDetectionCapability GetPoseDetectionCap()$/;"	f	class:xn::UserGenerator	access:public	signature:()
xn::UserGenerator::GetPoseDetectionCap	/usr/include/ni/XnCppWrapper.h	/^		inline const PoseDetectionCapability GetPoseDetectionCap() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
xn::UserGenerator::GetSkeletonCap	/usr/include/ni/XnCppWrapper.h	/^		inline SkeletonCapability GetSkeletonCap()$/;"	f	class:xn::UserGenerator	access:public	signature:()
xn::UserGenerator::GetSkeletonCap	/usr/include/ni/XnCppWrapper.h	/^		inline const SkeletonCapability GetSkeletonCap() const$/;"	f	class:xn::UserGenerator	access:public	signature:() const
xn::UserGenerator::GetUserPixels	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUserPixels(XnUserID user, SceneMetaData& smd) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID user, SceneMetaData& smd) const
xn::UserGenerator::GetUsers	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUsers(XnUserID aUsers[], XnUInt16& nUsers) const$/;"	f	class:xn::UserGenerator	access:public	signature:(XnUserID aUsers[], XnUInt16& nUsers) const
xn::UserGenerator::LostUserCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE LostUserCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::UserGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
xn::UserGenerator::NewUserCallback	/usr/include/ni/XnCppWrapper.h	/^		static void XN_CALLBACK_TYPE NewUserCallback(XnNodeHandle hNode, XnUserID user, void* pCookie)$/;"	f	class:xn::UserGenerator	access:private	signature:(XnNodeHandle hNode, XnUserID user, void* pCookie)
xn::UserGenerator::RegisterUserCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterUserCallbacks(UserHandler NewUserCB, UserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::UserGenerator	access:public	signature:(UserHandler NewUserCB, UserHandler LostUserCB, void* pCookie, XnCallbackHandle& hCallback)
xn::UserGenerator::UnregisterUserCallbacks	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterUserCallbacks(XnCallbackHandle hCallback)$/;"	f	class:xn::UserGenerator	access:public	signature:(XnCallbackHandle hCallback)
xn::UserGenerator::UserCookie	/usr/include/ni/XnCppWrapper.h	/^		typedef struct UserCookie$/;"	s	class:xn::UserGenerator	access:private
xn::UserGenerator::UserCookie	/usr/include/ni/XnCppWrapper.h	/^		} UserCookie;$/;"	t	class:xn::UserGenerator	typeref:struct:xn::UserGenerator::UserCookie	access:private
xn::UserGenerator::UserCookie::hCallback	/usr/include/ni/XnCppWrapper.h	/^			XnCallbackHandle hCallback;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
xn::UserGenerator::UserCookie::lostHandler	/usr/include/ni/XnCppWrapper.h	/^			UserHandler lostHandler;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
xn::UserGenerator::UserCookie::newHandler	/usr/include/ni/XnCppWrapper.h	/^			UserHandler newHandler;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
xn::UserGenerator::UserCookie::pUserCookie	/usr/include/ni/XnCppWrapper.h	/^			void* pUserCookie;$/;"	m	struct:xn::UserGenerator::UserCookie	access:public
xn::UserGenerator::UserGenerator	/usr/include/ni/XnCppWrapper.h	/^		inline UserGenerator(XnNodeHandle hNode = NULL) : Generator(hNode) {}$/;"	f	class:xn::UserGenerator	access:public	signature:(XnNodeHandle hNode = NULL)
xn::UserGenerator::UserHandler	/usr/include/ni/XnCppWrapper.h	/^		typedef void (XN_CALLBACK_TYPE* UserHandler)(UserGenerator& generator, XnUserID user, void* pCookie);$/;"	t	class:xn::UserGenerator	access:public
xn::UserPositionCapability	/usr/include/ni/XnCppWrapper.h	/^	class UserPositionCapability : public Capability$/;"	c	namespace:xn	inherits:Capability
xn::UserPositionCapability::GetSupportedUserPositionsCount	/usr/include/ni/XnCppWrapper.h	/^		inline XnUInt32 GetSupportedUserPositionsCount() const$/;"	f	class:xn::UserPositionCapability	access:public	signature:() const
xn::UserPositionCapability::GetUserPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus GetUserPosition(XnUInt32 nIndex, XnBoundingBox3D& Position) const$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnUInt32 nIndex, XnBoundingBox3D& Position) const
xn::UserPositionCapability::RegisterToUserPositionChange	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus RegisterToUserPositionChange(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::UserPositionCapability::SetUserPosition	/usr/include/ni/XnCppWrapper.h	/^		inline XnStatus SetUserPosition(XnUInt32 nIndex, const XnBoundingBox3D& Position)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnUInt32 nIndex, const XnBoundingBox3D& Position)
xn::UserPositionCapability::UnregisterFromUserPositionChange	/usr/include/ni/XnCppWrapper.h	/^		inline void UnregisterFromUserPositionChange(XnCallbackHandle hCallback)$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnCallbackHandle hCallback)
xn::UserPositionCapability::UserPositionCapability	/usr/include/ni/XnCppWrapper.h	/^		inline UserPositionCapability(XnNodeHandle hNode = NULL) : Capability(hNode) {}$/;"	f	class:xn::UserPositionCapability	access:public	signature:(XnNodeHandle hNode = NULL)
xn::Version	/usr/include/ni/XnCppWrapper.h	/^	class Version$/;"	c	namespace:xn
xn::Version::Version	/usr/include/ni/XnCppWrapper.h	/^		Version(XnUInt8 nMajor, XnUInt8 nMinor, XnUInt16 nMaintenance, XnUInt32 nBuild)$/;"	f	class:xn::Version	access:public	signature:(XnUInt8 nMajor, XnUInt8 nMinor, XnUInt16 nMaintenance, XnUInt32 nBuild)
xn::Version::Version	/usr/include/ni/XnCppWrapper.h	/^		Version(const XnVersion& version) : m_version(version) {}$/;"	f	class:xn::Version	access:public	signature:(const XnVersion& version)
xn::Version::m_version	/usr/include/ni/XnCppWrapper.h	/^		XnVersion m_version;$/;"	m	class:xn::Version	access:private
xn::Version::operator !=	/usr/include/ni/XnCppWrapper.h	/^		bool operator!=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::Version::operator <	/usr/include/ni/XnCppWrapper.h	/^		bool operator<(const Version& other) const $/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::Version::operator <=	/usr/include/ni/XnCppWrapper.h	/^		bool operator<=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::Version::operator ==	/usr/include/ni/XnCppWrapper.h	/^		bool operator==(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::Version::operator >	/usr/include/ni/XnCppWrapper.h	/^		bool operator>(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::Version::operator >=	/usr/include/ni/XnCppWrapper.h	/^		bool operator>=(const Version& other) const$/;"	f	class:xn::Version	access:public	signature:(const Version& other) const
xn::XN_DECLARE_LIST	/usr/include/ni/XnModuleCppInterface.h	/^	XN_DECLARE_LIST(XnModuleGetExportedInterfacePtr, ExportedNodesList);$/;"	p	namespace:xn	signature:(XnModuleGetExportedInterfacePtr, ExportedNodesList)
xn::_RegisterToStateChange	/usr/include/ni/XnCppWrapper.h	/^	static XnStatus _RegisterToStateChange(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)$/;"	f	namespace:xn	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::_RegisterToStateChange	/usr/include/ni/XnCppWrapper.h	/^	static XnStatus _RegisterToStateChange(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback);$/;"	p	namespace:xn	signature:(_XnRegisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, StateChangedHandler handler, void* pCookie, XnCallbackHandle& hCallback)
xn::_UnregisterFromStateChange	/usr/include/ni/XnCppWrapper.h	/^	static void _UnregisterFromStateChange(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)$/;"	f	namespace:xn	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
xn::_UnregisterFromStateChange	/usr/include/ni/XnCppWrapper.h	/^	static void _UnregisterFromStateChange(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback);$/;"	p	namespace:xn	signature:(_XnUnregisterStateChangeFuncPtr xnFunc, XnNodeHandle hNode, XnCallbackHandle hCallback)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(DepthMap, XnDepthPixel);$/;"	p	namespace:xn	signature:(DepthMap, XnDepthPixel)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(Grayscale16Map, XnGrayscale16Pixel);$/;"	p	namespace:xn	signature:(Grayscale16Map, XnGrayscale16Pixel)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(Grayscale8Map, XnGrayscale8Pixel);$/;"	p	namespace:xn	signature:(Grayscale8Map, XnGrayscale8Pixel)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(IRMap, XnIRPixel);$/;"	p	namespace:xn	signature:(IRMap, XnIRPixel)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(ImageMap, XnUInt8);$/;"	p	namespace:xn	signature:(ImageMap, XnUInt8)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(LabelMap, XnLabel);$/;"	p	namespace:xn	signature:(LabelMap, XnLabel)
xn::_XN_DECLARE_MAP_DATA_CLASS	/usr/include/ni/XnCppWrapper.h	/^	_XN_DECLARE_MAP_DATA_CLASS(RGB24Map, XnRGB24Pixel);$/;"	p	namespace:xn	signature:(RGB24Map, XnRGB24Pixel)
xn::_XnRegisterStateChangeFuncPtr	/usr/include/ni/XnCppWrapper.h	/^	typedef XnStatus (*_XnRegisterStateChangeFuncPtr)(XnNodeHandle hNode, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	t	namespace:xn
xn::_XnUnregisterStateChangeFuncPtr	/usr/include/ni/XnCppWrapper.h	/^	typedef void (*_XnUnregisterStateChangeFuncPtr)(XnNodeHandle hNode, XnCallbackHandle hCallback);$/;"	t	namespace:xn
xnAbortSkeletonCalibration	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnAbortSkeletonCalibration(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnAddGesture	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnAddGesture(XnNodeHandle hInstance, const XnChar* strGesture, XnBoundingBox3D* pArea);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strGesture, XnBoundingBox3D* pArea)
xnAddLicense	/usr/include/ni/XnLicensing.h	/^XN_C_API XnStatus xnAddLicense(XnContext* pContext, const XnLicense* pLicense);$/;"	p	signature:(XnContext* pContext, const XnLicense* pLicense)
xnAddNeededNode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnAddNeededNode(XnNodeHandle hInstance, XnNodeHandle hNeededNode);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hNeededNode)
xnAddNodeToRecording	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnAddNodeToRecording(XnNodeHandle hRecorder, XnNodeHandle hNode, XnCodecID compression);$/;"	p	signature:(XnNodeHandle hRecorder, XnNodeHandle hNode, XnCodecID compression)
xnAllocateAudioMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnAudioMetaData* xnAllocateAudioMetaData();$/;"	p	signature:()
xnAllocateBaseNode	/usr/include/ni/XnBaseNode.h	/^XN_C_API XnBaseNode* xnAllocateBaseNode();$/;"	p	signature:()
xnAllocateDepthMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnDepthMetaData* xnAllocateDepthMetaData();$/;"	p	signature:()
xnAllocateIRMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnIRMetaData* xnAllocateIRMetaData();$/;"	p	signature:()
xnAllocateImageMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnImageMetaData* xnAllocateImageMetaData();$/;"	p	signature:()
xnAllocateMapMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnMapMetaData* xnAllocateMapMetaData();$/;"	p	signature:()
xnAllocateOutputMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnOutputMetaData* xnAllocateOutputMetaData();$/;"	p	signature:()
xnAllocateSceneMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnSceneMetaData* xnAllocateSceneMetaData();$/;"	p	signature:()
xnAutoEnumerateOverSingleInput	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnAutoEnumerateOverSingleInput(XnContext* pContext, XnNodeInfoList* pList, XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnProductionNodeType InputType, XnEnumerationErrors* pErrors, XnNodeQuery* pQuery);$/;"	p	signature:(XnContext* pContext, XnNodeInfoList* pList, XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnProductionNodeType InputType, XnEnumerationErrors* pErrors, XnNodeQuery* pQuery)
xnCanFrameSyncWith	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnCanFrameSyncWith(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnClearSkeletonCalibrationData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnClearSkeletonCalibrationData(XnNodeHandle hInstance, XnUInt32 nSlot);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nSlot)
xnContextOpenFileRecording	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnContextOpenFileRecording(XnContext* pContext, const XnChar* strFileName);$/;"	p	signature:(XnContext* pContext, const XnChar* strFileName)
xnContextRunXmlScript	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnContextRunXmlScript(XnContext* pContext, const XnChar* xmlScript, XnEnumerationErrors* pErrors);$/;"	p	signature:(XnContext* pContext, const XnChar* xmlScript, XnEnumerationErrors* pErrors)
xnContextRunXmlScriptFromFile	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnContextRunXmlScriptFromFile(XnContext* pContext, const XnChar* strFileName, XnEnumerationErrors* pErrors);$/;"	p	signature:(XnContext* pContext, const XnChar* strFileName, XnEnumerationErrors* pErrors)
xnConvertProjectiveToRealWorld	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnConvertProjectiveToRealWorld($/;"	p	signature:( XnNodeHandle hInstance, XnUInt32 nCount, const XnPoint3D* aProjective, XnPoint3D* aRealWorld)
xnConvertRealWorldToProjective	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnConvertRealWorldToProjective($/;"	p	signature:( XnNodeHandle hInstance, XnUInt32 nCount, const XnPoint3D* aRealWorld, XnPoint3D* aProjective)
xnCopyAudioMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyAudioMetaData(XnAudioMetaData* pDestination, const XnAudioMetaData* pSource);$/;"	p	signature:(XnAudioMetaData* pDestination, const XnAudioMetaData* pSource)
xnCopyDepthMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyDepthMetaData(XnDepthMetaData* pDestination, const XnDepthMetaData* pSource);$/;"	p	signature:(XnDepthMetaData* pDestination, const XnDepthMetaData* pSource)
xnCopyIRMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyIRMetaData(XnIRMetaData* pDestination, const XnIRMetaData* pSource);$/;"	p	signature:(XnIRMetaData* pDestination, const XnIRMetaData* pSource)
xnCopyImageMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyImageMetaData(XnImageMetaData* pDestination, const XnImageMetaData* pSource);$/;"	p	signature:(XnImageMetaData* pDestination, const XnImageMetaData* pSource)
xnCopyMapMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyMapMetaData(XnMapMetaData* pDestination, const XnMapMetaData* pSource);$/;"	p	signature:(XnMapMetaData* pDestination, const XnMapMetaData* pSource)
xnCopyOutputMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopyOutputMetaData(XnOutputMetaData* pDestination, const XnOutputMetaData* pSource);$/;"	p	signature:(XnOutputMetaData* pDestination, const XnOutputMetaData* pSource)
xnCopySceneMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnCopySceneMetaData(XnSceneMetaData* pDestination, const XnSceneMetaData* pSource);$/;"	p	signature:(XnSceneMetaData* pDestination, const XnSceneMetaData* pSource)
xnCreateAnyProductionTree	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnCreateAnyProductionTree($/;"	p	signature:( XnContext* pContext, XnProductionNodeType type, XnNodeQuery* pQuery, XnNodeHandle* phNode, XnEnumerationErrors* pErrors )
xnCreateAudioGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateAudioGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phAudioGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateCodec	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateCodec(XnContext* pContext, XnCodecID codecID, XnNodeHandle hInitializerNode, XnNodeHandle* phCodec);$/;"	p	signature:(XnContext* pContext, XnCodecID codecID, XnNodeHandle hInitializerNode, XnNodeHandle* phCodec)
xnCreateDepthGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateDepthGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phDepthGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors)
xnCreateDevice	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateDevice(XnContext* pContext, XnNodeHandle* phDevice, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors);$/;"	p	signature:(XnContext* pContext, XnNodeHandle* phDevice, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors)
xnCreateGestureGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateGestureGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phGestureGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateHandsGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateHandsGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phHandsGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateIRGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateIRGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phIRGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateImageGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateImageGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phImageGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateMockNode	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnCreateMockNode($/;"	p	signature:( XnContext* pContext, XnProductionNodeType type, const XnChar* strName, XnNodeHandle* phNode )
xnCreateMockNodeBasedOn	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnCreateMockNodeBasedOn($/;"	p	signature:( XnContext* pContext, XnNodeHandle hOriginalNode, const XnChar* strName, XnNodeHandle* phMockNode )
xnCreatePlane3D	/usr/include/ni/XnUtils.h	/^XN_C_API XnPlane3D xnCreatePlane3D(XnPoint3D ptPoint, XnVector3D vNormal);$/;"	p	signature:(XnPoint3D ptPoint, XnVector3D vNormal)
xnCreatePlayer	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreatePlayer(XnContext* pContext, const XnChar* strFormatName, XnNodeHandle* phPlayer);$/;"	p	signature:(XnContext* pContext, const XnChar* strFormatName, XnNodeHandle* phPlayer)
xnCreatePoint3D	/usr/include/ni/XnUtils.h	/^XN_C_API XnPoint3D xnCreatePoint3D(XnFloat x, XnFloat y, XnFloat z);$/;"	p	signature:(XnFloat x, XnFloat y, XnFloat z)
xnCreateProductionTree	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnCreateProductionTree($/;"	p	signature:( XnContext* pContext, XnNodeInfo* pTree, XnNodeHandle* phNode )
xnCreateRecorder	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateRecorder(XnContext* pContext, const XnChar* strFormatName, XnNodeHandle* phRecorder);$/;"	p	signature:(XnContext* pContext, const XnChar* strFormatName, XnNodeHandle* phRecorder)
xnCreateSceneAnalyzer	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateSceneAnalyzer($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phSceneAnalyzer, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnCreateUserGenerator	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnCreateUserGenerator($/;"	p	signature:( XnContext* pContext, XnNodeHandle* phUserGenerator, XnNodeQuery* pQuery, XnEnumerationErrors* pErrors )
xnDeallocateBaseNode	/usr/include/ni/XnBaseNode.h	/^XN_C_API void xnDeallocateBaseNode(XnBaseNode* pNode);$/;"	p	signature:(XnBaseNode* pNode)
xnDecodeData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnDecodeData(XnNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, $/;"	p	signature:(XnNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)
xnDumpClose	/usr/include/ni/XnLog.h	/^	#define xnDumpClose$/;"	d
xnDumpClose	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpClose(XnDump* pDump);$/;"	p	signature:(XnDump* pDump)
xnDumpFlush	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpFlush(XnDump dump);$/;"	p	signature:(XnDump dump)
xnDumpForceInit	/usr/include/ni/XnLog.h	/^	#define xnDumpForceInit(/;"	d
xnDumpForceInit	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpForceInit(XnDump* pDump, const XnChar* csHeader, const XnChar* csFileNameFormat, ...);$/;"	p	signature:(XnDump* pDump, const XnChar* csHeader, const XnChar* csFileNameFormat, ...)
xnDumpInit	/usr/include/ni/XnLog.h	/^	#define xnDumpInit(/;"	d
xnDumpInit	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpInit(XnDump* pDump, const XnChar* csDumpMask, const XnChar* csHeader, const XnChar* csFileNameFormat, ...);$/;"	p	signature:(XnDump* pDump, const XnChar* csDumpMask, const XnChar* csHeader, const XnChar* csFileNameFormat, ...)
xnDumpSetMaskState	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnDumpSetMaskState(const XnChar* csMask, XnBool bEnabled);$/;"	p	signature:(const XnChar* csMask, XnBool bEnabled)
xnDumpWriteBuffer	/usr/include/ni/XnLog.h	/^	#define xnDumpWriteBuffer$/;"	d
xnDumpWriteBuffer	/usr/include/ni/XnLog.h	/^	#undef xnDumpWriteBuffer$/;"	d
xnDumpWriteBuffer	/usr/include/ni/XnLog.h	/^inline void xnDumpWriteBuffer(XnDump dump, const void* pBuffer, XnUInt32 nBufferSize)$/;"	f	signature:(XnDump dump, const void* pBuffer, XnUInt32 nBufferSize)
xnDumpWriteBufferImpl	/usr/include/ni/XnLog.h	/^	#define xnDumpWriteBufferImpl$/;"	d
xnDumpWriteBufferImpl	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpWriteBufferImpl(XnDump dump, const void* pBuffer, XnUInt32 nBufferSize);$/;"	p	signature:(XnDump dump, const void* pBuffer, XnUInt32 nBufferSize)
xnDumpWriteString	/usr/include/ni/XnLog.h	/^	#define xnDumpWriteString$/;"	d
xnDumpWriteString	/usr/include/ni/XnLog.h	/^	#define xnDumpWriteString(/;"	d
xnDumpWriteString	/usr/include/ni/XnLog.h	/^	#undef xnDumpWriteString$/;"	d
xnDumpWriteStringImpl	/usr/include/ni/XnLog.h	/^	#define xnDumpWriteStringImpl$/;"	d
xnDumpWriteStringImpl	/usr/include/ni/XnLog.h	/^XN_C_API void xnDumpWriteStringImpl(XnDump dump, const XnChar* csFormat, ...);$/;"	p	signature:(XnDump dump, const XnChar* csFormat, ...)
xnEncodeData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnEncodeData(XnNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, $/;"	p	signature:(XnNodeHandle hCodec, const void* pSrc, XnUInt32 nSrcSize, void* pDst, XnUInt32 nDstSize, XnUInt* pnBytesWritten)
xnEnumerateActiveJoints	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnEnumerateActiveJoints(XnNodeHandle hInstance, XnSkeletonJoint* pJoints, XnUInt16* pnJoints);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonJoint* pJoints, XnUInt16* pnJoints)
xnEnumerateAllGestures	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnEnumerateAllGestures(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures)
xnEnumerateExistingNodes	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnEnumerateExistingNodes(XnContext* pContext, XnNodeInfoList** ppList);$/;"	p	signature:(XnContext* pContext, XnNodeInfoList** ppList)
xnEnumerateExistingNodesByType	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnEnumerateExistingNodesByType(XnContext* pContext, XnProductionNodeType type, XnNodeInfoList** ppList);$/;"	p	signature:(XnContext* pContext, XnProductionNodeType type, XnNodeInfoList** ppList)
xnEnumerateGestures	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnEnumerateGestures(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt16* nGestures)
xnEnumerateLicenses	/usr/include/ni/XnLicensing.h	/^XN_C_API XnStatus xnEnumerateLicenses($/;"	p	signature:( XnContext* pContext, XnLicense** paLicenses, XnUInt32* pnCount )
xnEnumeratePlayerNodes	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnEnumeratePlayerNodes(XnNodeHandle hPlayer, XnNodeInfoList** ppList);$/;"	p	signature:(XnNodeHandle hPlayer, XnNodeInfoList** ppList)
xnEnumerateProductionTrees	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnEnumerateProductionTrees($/;"	p	signature:( XnContext* pContext, XnProductionNodeType Type, const XnNodeQuery* pQuery, XnNodeInfoList** ppTreesList, XnEnumerationErrors* pErrors )
xnEnumerationErrorsAdd	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnStatus xnEnumerationErrorsAdd(XnEnumerationErrors* pErrors, const XnProductionNodeDescription* pDesc, XnStatus nError);$/;"	p	signature:(XnEnumerationErrors* pErrors, const XnProductionNodeDescription* pDesc, XnStatus nError)
xnEnumerationErrorsAllocate	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnStatus xnEnumerationErrorsAllocate(XnEnumerationErrors** ppErrors);$/;"	p	signature:(XnEnumerationErrors** ppErrors)
xnEnumerationErrorsClear	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnStatus xnEnumerationErrorsClear(XnEnumerationErrors* pErrors);$/;"	p	signature:(XnEnumerationErrors* pErrors)
xnEnumerationErrorsFree	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API void xnEnumerationErrorsFree(const XnEnumerationErrors* pErrors);$/;"	p	signature:(const XnEnumerationErrors* pErrors)
xnEnumerationErrorsGetCurrentDescription	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API const XnProductionNodeDescription* xnEnumerationErrorsGetCurrentDescription(XnEnumerationErrorsIterator it);$/;"	p	signature:(XnEnumerationErrorsIterator it)
xnEnumerationErrorsGetCurrentError	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnStatus xnEnumerationErrorsGetCurrentError(XnEnumerationErrorsIterator it);$/;"	p	signature:(XnEnumerationErrorsIterator it)
xnEnumerationErrorsGetFirst	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnEnumerationErrorsIterator xnEnumerationErrorsGetFirst(const XnEnumerationErrors* pErrors);$/;"	p	signature:(const XnEnumerationErrors* pErrors)
xnEnumerationErrorsGetNext	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnEnumerationErrorsIterator xnEnumerationErrorsGetNext(XnEnumerationErrorsIterator it);$/;"	p	signature:(XnEnumerationErrorsIterator it)
xnEnumerationErrorsIteratorIsValid	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnBool xnEnumerationErrorsIteratorIsValid(XnEnumerationErrorsIterator it);$/;"	p	signature:(XnEnumerationErrorsIterator it)
xnEnumerationErrorsToString	/usr/include/ni/XnEnumerationErrors.h	/^XN_C_API XnStatus xnEnumerationErrorsToString(const XnEnumerationErrors* pErrors, XnChar* csBuffer, XnUInt32 nSize);$/;"	p	signature:(const XnEnumerationErrors* pErrors, XnChar* csBuffer, XnUInt32 nSize)
xnFPSCalc	/usr/include/ni/XnFPSCalculator.h	/^XN_C_API XnDouble xnFPSCalc(XnFPSData* pFPS, XnUInt32 nAverageOver = 3000, XnUInt64 nNow = 0);$/;"	p	signature:(XnFPSData* pFPS, XnUInt32 nAverageOver = 3000, XnUInt64 nNow = 0)
xnFPSFree	/usr/include/ni/XnFPSCalculator.h	/^XN_C_API XnStatus xnFPSFree(XnFPSData* pFPS);$/;"	p	signature:(XnFPSData* pFPS)
xnFPSInit	/usr/include/ni/XnFPSCalculator.h	/^XN_C_API XnStatus xnFPSInit(XnFPSData* pFPS, XnUInt32 nSamplesCount);$/;"	p	signature:(XnFPSData* pFPS, XnUInt32 nSamplesCount)
xnFPSMarkFrame	/usr/include/ni/XnFPSCalculator.h	/^XN_C_API XnStatus xnFPSMarkFrame(XnFPSData* pFPS, XnUInt64 nNow = 0);$/;"	p	signature:(XnFPSData* pFPS, XnUInt64 nNow = 0)
xnFindExistingNodeByType	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnFindExistingNodeByType($/;"	p	signature:( XnContext* pContext, XnProductionNodeType type, XnNodeHandle* phNode )
xnFrameSyncWith	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnFrameSyncWith(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnFreeAudioMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeAudioMetaData(const XnAudioMetaData* pMetaData);$/;"	p	signature:(const XnAudioMetaData* pMetaData)
xnFreeDepthMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeDepthMetaData(const XnDepthMetaData* pMetaData);$/;"	p	signature:(const XnDepthMetaData* pMetaData)
xnFreeIRMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeIRMetaData(const XnIRMetaData* pMetaData);$/;"	p	signature:(const XnIRMetaData* pMetaData)
xnFreeImageMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeImageMetaData(const XnImageMetaData* pMetaData);$/;"	p	signature:(const XnImageMetaData* pMetaData)
xnFreeLicensesList	/usr/include/ni/XnLicensing.h	/^XN_C_API void xnFreeLicensesList(XnLicense* aLicenses);$/;"	p	signature:(XnLicense* aLicenses)
xnFreeMapMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeMapMetaData(const XnMapMetaData* pMetaData);$/;"	p	signature:(const XnMapMetaData* pMetaData)
xnFreeOutputMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeOutputMetaData(const XnOutputMetaData* pMetaData);$/;"	p	signature:(const XnOutputMetaData* pMetaData)
xnFreeSceneMetaData	/usr/include/ni/XnUtils.h	/^XN_C_API void xnFreeSceneMetaData(const XnSceneMetaData* pMetaData);$/;"	p	signature:(const XnSceneMetaData* pMetaData)
xnGetActiveGestures	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetActiveGestures(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt16* nGestures);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt16* nGestures)
xnGetAllActiveGestures	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetAllActiveGestures(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrGestures, XnUInt32 nNameLength, XnUInt16* nGestures)
xnGetAllAvailablePoses	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetAllAvailablePoses(XnNodeHandle hInstance, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrPoses, XnUInt32 nNameLength, XnUInt32* pnPoses)
xnGetAudioBuffer	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUChar* xnGetAudioBuffer(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetAudioMetaData	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnGetAudioMetaData(XnNodeHandle hInstance, XnAudioMetaData* pMetaData);$/;"	p	signature:(XnNodeHandle hInstance, XnAudioMetaData* pMetaData)
xnGetAvailablePoses	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetAvailablePoses(XnNodeHandle hInstance, XnChar** pstrPoses, XnUInt32* pnPoses);$/;"	p	signature:(XnNodeHandle hInstance, XnChar** pstrPoses, XnUInt32* pnPoses)
xnGetBytesPerPixel	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetBytesPerPixel(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetBytesPerPixelForPixelFormat	/usr/include/ni/XnUtils.h	/^XN_C_API XnUInt32 xnGetBytesPerPixelForPixelFormat(XnPixelFormat format);$/;"	p	signature:(XnPixelFormat format)
xnGetCodecID	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnCodecID xnGetCodecID(XnNodeHandle hCodec);$/;"	p	signature:(XnNodeHandle hCodec)
xnGetContextFromNodeHandle	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnContext* xnGetContextFromNodeHandle(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnGetCropping	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetCropping(XnNodeHandle hInstance, XnCropping* pCropping);$/;"	p	signature:(XnNodeHandle hInstance, XnCropping* pCropping)
xnGetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API const void* xnGetData(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetDataSize	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetDataSize(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetDepthFieldOfView	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetDepthFieldOfView(XnNodeHandle hInstance, XnFieldOfView* pFOV);$/;"	p	signature:(XnNodeHandle hInstance, XnFieldOfView* pFOV)
xnGetDepthMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnDepthPixel* xnGetDepthMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetDepthMetaData	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnGetDepthMetaData(XnNodeHandle hInstance, XnDepthMetaData* pMetaData);$/;"	p	signature:(XnNodeHandle hInstance, XnDepthMetaData* pMetaData)
xnGetDeviceMaxDepth	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnDepthPixel xnGetDeviceMaxDepth(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetDeviceName	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetDeviceName(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	p	signature:(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
xnGetFloor	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetFloor(XnNodeHandle hInstance, XnPlane3D* pPlane);$/;"	p	signature:(XnNodeHandle hInstance, XnPlane3D* pPlane)
xnGetFrameID	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetFrameID(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetGeneralIntRange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetGeneralIntRange(XnNodeHandle hNode, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported);$/;"	p	signature:(XnNodeHandle hNode, const XnChar* strCap, XnInt32* pnMin, XnInt32* pnMax, XnInt32* pnStep, XnInt32* pnDefault, XnBool* pbIsAutoSupported)
xnGetGeneralIntValue	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetGeneralIntValue(XnNodeHandle hNode, const XnChar* strCap, XnInt32* pnValue);$/;"	p	signature:(XnNodeHandle hNode, const XnChar* strCap, XnInt32* pnValue)
xnGetGeneralProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetGeneralProperty(XnNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, void* pBuffer)
xnGetGlobalErrorState	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnGetGlobalErrorState(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnGetGlobalMirror	/usr/include/ni/XnContext.h	/^XN_C_API XnBool xnGetGlobalMirror(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnGetGrayscale16ImageMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnGrayscale16Pixel* xnGetGrayscale16ImageMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetGrayscale8ImageMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnGrayscale8Pixel* xnGetGrayscale8ImageMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetIRMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnIRPixel* xnGetIRMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetIRMetaData	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnGetIRMetaData(XnNodeHandle hInstance, XnIRMetaData* pMetaData);$/;"	p	signature:(XnNodeHandle hInstance, XnIRMetaData* pMetaData)
xnGetImageMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt8* xnGetImageMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetImageMetaData	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnGetImageMetaData(XnNodeHandle hInstance, XnImageMetaData* pMetaData);$/;"	p	signature:(XnNodeHandle hInstance, XnImageMetaData* pMetaData)
xnGetIntProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetIntProperty(XnNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnUInt64* pnValue)
xnGetLabelMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API const XnLabel* xnGetLabelMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetMapOutputMode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetMapOutputMode(XnNodeHandle hInstance, XnMapOutputMode* pOutputMode);$/;"	p	signature:(XnNodeHandle hInstance, XnMapOutputMode* pOutputMode)
xnGetModuleNodeHandle	/usr/include/ni/XnUtils.h	/^XN_C_API XnModuleNodeHandle xnGetModuleNodeHandle(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnGetNodeErrorState	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetNodeErrorState(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetNodeHandleByName	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnGetNodeHandleByName($/;"	p	signature:( XnContext* pContext, const XnChar* strInstanceName, XnNodeHandle* phNode )
xnGetNodeInfo	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnNodeInfo* xnGetNodeInfo(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnGetNodeName	/usr/include/ni/XnPrdNode.h	/^XN_C_API const XnChar* xnGetNodeName(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnGetNumberOfPoses	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetNumberOfPoses(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetNumberOfUsers	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt16 xnGetNumberOfUsers(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetPixelFormat	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnPixelFormat xnGetPixelFormat(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetPlaybackSpeed	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnDouble xnGetPlaybackSpeed(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetPlayerNumFrames	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetPlayerNumFrames(XnNodeHandle hPlayer, const XnChar* strNodeName, XnUInt32* pnFrames);$/;"	p	signature:(XnNodeHandle hPlayer, const XnChar* strNodeName, XnUInt32* pnFrames)
xnGetPlayerSource	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetPlayerSource(XnNodeHandle hPlayer, XnRecordMedium* pSourceType, XnChar* strSource, XnUInt32 nBufSize);$/;"	p	signature:(XnNodeHandle hPlayer, XnRecordMedium* pSourceType, XnChar* strSource, XnUInt32 nBufSize)
xnGetPlayerSupportedFormat	/usr/include/ni/XnPrdNode.h	/^XN_C_API const XnChar* xnGetPlayerSupportedFormat(XnNodeHandle hPlayer);$/;"	p	signature:(XnNodeHandle hPlayer)
xnGetPowerLineFrequency	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnPowerLineFrequency xnGetPowerLineFrequency(XnNodeHandle hGenerator);$/;"	p	signature:(XnNodeHandle hGenerator)
xnGetRGB24ImageMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnRGB24Pixel* xnGetRGB24ImageMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetRealProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetRealProperty(XnNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnDouble* pdValue)
xnGetRecorderFormat	/usr/include/ni/XnPrdNode.h	/^XN_C_API const XnChar* xnGetRecorderFormat(XnNodeHandle hRecorder);$/;"	p	signature:(XnNodeHandle hRecorder)
xnGetSceneMetaData	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnGetSceneMetaData(XnNodeHandle hInstance, XnSceneMetaData* pMetaData);$/;"	p	signature:(XnNodeHandle hInstance, XnSceneMetaData* pMetaData)
xnGetSerialNumber	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSerialNumber(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	p	signature:(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
xnGetSkeletonCalibrationPose	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSkeletonCalibrationPose(XnNodeHandle hInstance, XnChar* strPose);$/;"	p	signature:(XnNodeHandle hInstance, XnChar* strPose)
xnGetSkeletonJoint	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSkeletonJoint(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointTransformation* pJoint)
xnGetSkeletonJointOrientation	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSkeletonJointOrientation(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointOrientation* pJoint)
xnGetSkeletonJointPosition	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSkeletonJointPosition(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnSkeletonJoint eJoint, XnSkeletonJointPosition* pJoint)
xnGetStatusName	/usr/include/ni/XnStatus.h	/^XN_C_API const XnChar* xnGetStatusName(const XnStatus Status);$/;"	p	signature:(const XnStatus Status)
xnGetStatusString	/usr/include/ni/XnStatus.h	/^XN_C_API const XnChar* xnGetStatusString(const XnStatus Status);$/;"	p	signature:(const XnStatus Status)
xnGetStringProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetStringProperty(XnNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnChar* csValue, XnUInt32 nBufSize)
xnGetSupportedMapOutputModes	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSupportedMapOutputModes(XnNodeHandle hInstance, XnMapOutputMode* aModes, XnUInt32* pnCount);$/;"	p	signature:(XnNodeHandle hInstance, XnMapOutputMode* aModes, XnUInt32* pnCount)
xnGetSupportedMapOutputModesCount	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetSupportedMapOutputModesCount(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetSupportedUserPositionsCount	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetSupportedUserPositionsCount(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetSupportedWaveOutputModes	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetSupportedWaveOutputModes(XnNodeHandle hInstance, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount);$/;"	p	signature:(XnNodeHandle hInstance, XnWaveOutputMode* aSupportedModes, XnUInt32* pnCount)
xnGetSupportedWaveOutputModesCount	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt32 xnGetSupportedWaveOutputModesCount(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetTimestamp	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnUInt64 xnGetTimestamp(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnGetUserCoM	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetUserCoM(XnNodeHandle hInstance, XnUserID user, XnPoint3D* pCoM);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnPoint3D* pCoM)
xnGetUserPixels	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetUserPixels(XnNodeHandle hInstance, XnUserID user, XnSceneMetaData* pScene);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnSceneMetaData* pScene)
xnGetUserPosition	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetUserPosition(XnNodeHandle hInstance, XnUInt32 nIndex, XnBoundingBox3D* pPosition);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nIndex, XnBoundingBox3D* pPosition)
xnGetUsers	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetUsers(XnNodeHandle hInstance, XnUserID* pUsers, XnUInt16* pnUsers);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID* pUsers, XnUInt16* pnUsers)
xnGetVendorSpecificData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetVendorSpecificData(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize);$/;"	p	signature:(XnNodeHandle hInstance, XnChar* strBuffer, XnUInt32* pnBufferSize)
xnGetVersion	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnGetVersion(XnVersion* pVersion);$/;"	p	signature:(XnVersion* pVersion)
xnGetWaveOutputMode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnGetWaveOutputMode(XnNodeHandle hInstance, XnWaveOutputMode* OutputMode);$/;"	p	signature:(XnNodeHandle hInstance, XnWaveOutputMode* OutputMode)
xnGetYUV422ImageMap	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnYUV422DoublePixel* xnGetYUV422ImageMap(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnInit	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnInit(XnContext** ppContext);$/;"	p	signature:(XnContext** ppContext)
xnInitFromXmlFile	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnInitFromXmlFile(const XnChar* strFileName, XnContext** ppContext, XnEnumerationErrors* pErrors);$/;"	p	signature:(const XnChar* strFileName, XnContext** ppContext, XnEnumerationErrors* pErrors)
xnIsCapabilitySupported	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsCapabilitySupported(XnNodeHandle hInstance, const XnChar* strCapabilityName);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strCapabilityName)
xnIsDataNew	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsDataNew(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnIsFrameSyncedWith	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsFrameSyncedWith(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnIsGenerating	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsGenerating(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnIsGestureAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsGestureAvailable(XnNodeHandle hInstance, const XnChar* strGesture);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strGesture)
xnIsGestureProgressSupported	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsGestureProgressSupported(XnNodeHandle hInstance, const XnChar* strGesture);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strGesture)
xnIsJointActive	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsJointActive(XnNodeHandle hInstance, XnSkeletonJoint eJoint);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonJoint eJoint)
xnIsJointAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsJointAvailable(XnNodeHandle hInstance, XnSkeletonJoint eJoint);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonJoint eJoint)
xnIsMirrored	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsMirrored(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnIsNewDataAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsNewDataAvailable(XnNodeHandle hInstance, XnUInt64* pnTimestamp);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt64* pnTimestamp)
xnIsPixelFormatSupported	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsPixelFormatSupported(XnNodeHandle hInstance, XnPixelFormat Format);$/;"	p	signature:(XnNodeHandle hInstance, XnPixelFormat Format)
xnIsPlayerAtEOF	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsPlayerAtEOF(XnNodeHandle hPlayer);$/;"	p	signature:(XnNodeHandle hPlayer)
xnIsProfileAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsProfileAvailable(XnNodeHandle hInstance, XnSkeletonProfile eProfile);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonProfile eProfile)
xnIsSkeletonCalibrated	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsSkeletonCalibrated(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnIsSkeletonCalibrating	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsSkeletonCalibrating(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnIsSkeletonCalibrationData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsSkeletonCalibrationData(XnNodeHandle hInstance, XnUInt32 nSlot);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nSlot)
xnIsSkeletonTracking	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsSkeletonTracking(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnIsTypeDerivedFrom	/usr/include/ni/XnUtils.h	/^XN_C_API XnBool xnIsTypeDerivedFrom(XnProductionNodeType type, XnProductionNodeType base);$/;"	p	signature:(XnProductionNodeType type, XnProductionNodeType base)
xnIsTypeGenerator	/usr/include/ni/XnUtils.h	/^XN_C_API XnBool xnIsTypeGenerator(XnProductionNodeType type);$/;"	p	signature:(XnProductionNodeType type)
xnIsViewPointAs	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsViewPointAs(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnIsViewPointSupported	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnIsViewPointSupported(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnLoadSkeletonCalibrationData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnLoadSkeletonCalibrationData(XnNodeHandle hInstance, XnUserID user, XnUInt32 nSlot);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnUInt32 nSlot)
xnLoadSkeletonCalibrationDataFromFile	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnLoadSkeletonCalibrationDataFromFile(XnNodeHandle hInstance, XnUserID user, const XnChar* strFileName);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, const XnChar* strFileName)
xnLockNodeForChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnLockNodeForChanges(XnNodeHandle hInstance, XnLockHandle* phLock);$/;"	p	signature:(XnNodeHandle hInstance, XnLockHandle* phLock)
xnLockedNodeEndChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnLockedNodeEndChanges(XnNodeHandle hInstance, XnLockHandle hLock);$/;"	p	signature:(XnNodeHandle hInstance, XnLockHandle hLock)
xnLockedNodeStartChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnLockedNodeStartChanges(XnNodeHandle hInstance, XnLockHandle hLock);$/;"	p	signature:(XnNodeHandle hInstance, XnLockHandle hLock)
xnLogClose	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogClose();$/;"	p	signature:()
xnLogError	/usr/include/ni/XnLog.h	/^	#define xnLogError$/;"	d
xnLogError	/usr/include/ni/XnLog.h	/^	#define xnLogError(/;"	d
xnLogError	/usr/include/ni/XnLog.h	/^	#undef xnLogError$/;"	d
xnLogInfo	/usr/include/ni/XnLog.h	/^	#define xnLogInfo$/;"	d
xnLogInfo	/usr/include/ni/XnLog.h	/^	#define xnLogInfo(/;"	d
xnLogInfo	/usr/include/ni/XnLog.h	/^	#undef xnLogInfo$/;"	d
xnLogInitFromINIFile	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogInitFromINIFile(const XnChar* csINIFile, const XnChar* csSectionName);$/;"	p	signature:(const XnChar* csINIFile, const XnChar* csSectionName)
xnLogInitFromXmlFile	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogInitFromXmlFile(const XnChar* strFileName);$/;"	p	signature:(const XnChar* strFileName)
xnLogInitSystem	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogInitSystem();$/;"	p	signature:()
xnLogIsDumpMaskEnabled	/usr/include/ni/XnLog.h	/^	#define xnLogIsDumpMaskEnabled(/;"	d
xnLogIsDumpMaskEnabled	/usr/include/ni/XnLog.h	/^XN_C_API XnBool xnLogIsDumpMaskEnabled(const XnChar* csDumpMask);$/;"	p	signature:(const XnChar* csDumpMask)
xnLogIsEnabled	/usr/include/ni/XnLog.h	/^XN_C_API XnBool xnLogIsEnabled(const XnChar* csLogMask, XnLogSeverity nSeverity);$/;"	p	signature:(const XnChar* csLogMask, XnLogSeverity nSeverity)
xnLogSetConsoleOutput	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetConsoleOutput(XnBool bConsoleOutput);$/;"	p	signature:(XnBool bConsoleOutput)
xnLogSetFileOutput	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetFileOutput(XnBool bFileOutput);$/;"	p	signature:(XnBool bFileOutput)
xnLogSetLineInfo	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetLineInfo(XnBool bLineInfo);$/;"	p	signature:(XnBool bLineInfo)
xnLogSetMaskState	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetMaskState(const XnChar* csMask, XnBool bEnabled);$/;"	p	signature:(const XnChar* csMask, XnBool bEnabled)
xnLogSetOutputFolder	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetOutputFolder(const XnChar* strOutputFolder);$/;"	p	signature:(const XnChar* strOutputFolder)
xnLogSetSeverityFilter	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogSetSeverityFilter(XnLogSeverity nMinSeverity);$/;"	p	signature:(XnLogSeverity nMinSeverity)
xnLogStartNewFile	/usr/include/ni/XnLog.h	/^XN_C_API XnStatus xnLogStartNewFile();$/;"	p	signature:()
xnLogVerbose	/usr/include/ni/XnLog.h	/^	#define xnLogVerbose$/;"	d
xnLogVerbose	/usr/include/ni/XnLog.h	/^	#define xnLogVerbose(/;"	d
xnLogVerbose	/usr/include/ni/XnLog.h	/^	#undef xnLogVerbose$/;"	d
xnLogWarning	/usr/include/ni/XnLog.h	/^	#define xnLogWarning$/;"	d
xnLogWarning	/usr/include/ni/XnLog.h	/^	#define xnLogWarning(/;"	d
xnLogWarning	/usr/include/ni/XnLog.h	/^	#undef xnLogWarning$/;"	d
xnLogWrite	/usr/include/ni/XnLog.h	/^	#define xnLogWrite$/;"	d
xnLogWrite	/usr/include/ni/XnLog.h	/^XN_C_API void xnLogWrite(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFile, XnUInt32 nLine, const XnChar* csFormat, ...);$/;"	p	signature:(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFile, XnUInt32 nLine, const XnChar* csFormat, ...)
xnLogWriteBinaryData	/usr/include/ni/XnLog.h	/^	#define xnLogWriteBinaryData$/;"	d
xnLogWriteBinaryData	/usr/include/ni/XnLog.h	/^XN_C_API void xnLogWriteBinaryData(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFile, XnUInt32 nLine, XnUChar* pBinData, XnUInt32 nDataSize, const XnChar* csFormat, ...);$/;"	p	signature:(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFile, XnUInt32 nLine, XnUChar* pBinData, XnUInt32 nDataSize, const XnChar* csFormat, ...)
xnLogWriteNoEntry	/usr/include/ni/XnLog.h	/^XN_C_API void xnLogWriteNoEntry(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFormat, ...);$/;"	p	signature:(const XnChar* csLogMask, XnLogSeverity nSeverity, const XnChar* csFormat, ...)
xnMockAudioSetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnMockAudioSetData(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pData);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pData)
xnMockDepthSetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnMockDepthSetData(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pData);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnDepthPixel* pData)
xnMockIRSetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnMockIRSetData(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pData);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnIRPixel* pData)
xnMockImageSetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnMockImageSetData(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pData);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const XnUInt8* pData)
xnMockRawSetData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnMockRawSetData(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nFrameID, XnUInt64 nTimestamp, XnUInt32 nDataSize, const void* pData)
xnNeedPoseForSkeletonCalibration	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnBool xnNeedPoseForSkeletonCalibration(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnNodeInfoGetAdditionalData	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API const void* xnNodeInfoGetAdditionalData(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetCreationInfo	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API const XnChar* xnNodeInfoGetCreationInfo(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetDescription	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API const XnProductionNodeDescription* xnNodeInfoGetDescription(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetHandle	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API XnNodeHandle xnNodeInfoGetHandle(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetInstanceName	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API const XnChar* xnNodeInfoGetInstanceName(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetNeededNodes	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API XnNodeInfoList* xnNodeInfoGetNeededNodes(XnNodeInfo* pNodeInfo);$/;"	p	signature:(XnNodeInfo* pNodeInfo)
xnNodeInfoGetTreeStringRepresentation	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API XnStatus xnNodeInfoGetTreeStringRepresentation(XnNodeInfo* pNodeInfo, XnChar* csResult, XnUInt32 nSize);$/;"	p	signature:(XnNodeInfo* pNodeInfo, XnChar* csResult, XnUInt32 nSize)
xnNodeInfoListAdd	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAdd(XnNodeInfoList* pList, const XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnNodeInfoList* pNeededNodes);$/;"	p	signature:(XnNodeInfoList* pList, const XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnNodeInfoList* pNeededNodes)
xnNodeInfoListAddEx	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAddEx(XnNodeInfoList* pList, const XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnNodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler);$/;"	p	signature:(XnNodeInfoList* pList, const XnProductionNodeDescription* pDescription, const XnChar* strCreationInfo, XnNodeInfoList* pNeededNodes, const void* pAdditionalData, XnFreeHandler pFreeHandler)
xnNodeInfoListAddNode	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAddNode(XnNodeInfoList* pList, XnNodeInfo* pNode);$/;"	p	signature:(XnNodeInfoList* pList, XnNodeInfo* pNode)
xnNodeInfoListAddNodeFromList	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAddNodeFromList(XnNodeInfoList* pList, XnNodeInfoListIterator otherListIt);$/;"	p	signature:(XnNodeInfoList* pList, XnNodeInfoListIterator otherListIt)
xnNodeInfoListAllocate	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAllocate(XnNodeInfoList** ppList);$/;"	p	signature:(XnNodeInfoList** ppList)
xnNodeInfoListAppend	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListAppend(XnNodeInfoList* pList, XnNodeInfoList* pOther);$/;"	p	signature:(XnNodeInfoList* pList, XnNodeInfoList* pOther)
xnNodeInfoListClear	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListClear(XnNodeInfoList* pList);$/;"	p	signature:(XnNodeInfoList* pList)
xnNodeInfoListFree	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API void xnNodeInfoListFree(XnNodeInfoList* pList);$/;"	p	signature:(XnNodeInfoList* pList)
xnNodeInfoListGetCurrent	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnNodeInfo* xnNodeInfoListGetCurrent(XnNodeInfoListIterator it);$/;"	p	signature:(XnNodeInfoListIterator it)
xnNodeInfoListGetFirst	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnNodeInfoListIterator xnNodeInfoListGetFirst(XnNodeInfoList* pList);$/;"	p	signature:(XnNodeInfoList* pList)
xnNodeInfoListGetLast	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnNodeInfoListIterator xnNodeInfoListGetLast(XnNodeInfoList* pList);$/;"	p	signature:(XnNodeInfoList* pList)
xnNodeInfoListGetNext	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnNodeInfoListIterator xnNodeInfoListGetNext(XnNodeInfoListIterator it);$/;"	p	signature:(XnNodeInfoListIterator it)
xnNodeInfoListGetPrevious	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnNodeInfoListIterator xnNodeInfoListGetPrevious(XnNodeInfoListIterator it);$/;"	p	signature:(XnNodeInfoListIterator it)
xnNodeInfoListIsEmpty	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnBool xnNodeInfoListIsEmpty(XnNodeInfoList* pList);$/;"	p	signature:(XnNodeInfoList* pList)
xnNodeInfoListIteratorIsValid	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnBool xnNodeInfoListIteratorIsValid(XnNodeInfoListIterator it);$/;"	p	signature:(XnNodeInfoListIterator it)
xnNodeInfoListRemove	/usr/include/ni/XnPrdNodeInfoList.h	/^XN_C_API XnStatus xnNodeInfoListRemove(XnNodeInfoList* pList, XnNodeInfoListIterator it);$/;"	p	signature:(XnNodeInfoList* pList, XnNodeInfoListIterator it)
xnNodeInfoSetInstanceName	/usr/include/ni/XnPrdNodeInfo.h	/^XN_C_API XnStatus xnNodeInfoSetInstanceName(XnNodeInfo* pNodeInfo, const XnChar* strInstanceName);$/;"	p	signature:(XnNodeInfo* pNodeInfo, const XnChar* strInstanceName)
xnNodeQueryAddNeededNode	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQueryAddNeededNode(XnNodeQuery* pQuery, const XnChar* strInstanceName);$/;"	p	signature:(XnNodeQuery* pQuery, const XnChar* strInstanceName)
xnNodeQueryAddSupportedCapability	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQueryAddSupportedCapability(XnNodeQuery* pQuery, const XnChar* strNeededCapability);$/;"	p	signature:(XnNodeQuery* pQuery, const XnChar* strNeededCapability)
xnNodeQueryAddSupportedMapOutputMode	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQueryAddSupportedMapOutputMode(XnNodeQuery* pQuery, const XnMapOutputMode* pMapOutputMode);$/;"	p	signature:(XnNodeQuery* pQuery, const XnMapOutputMode* pMapOutputMode)
xnNodeQueryAllocate	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQueryAllocate(XnNodeQuery** ppQuery);$/;"	p	signature:(XnNodeQuery** ppQuery)
xnNodeQueryFilterList	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQueryFilterList(XnContext* pContext, const XnNodeQuery* pQuery, XnNodeInfoList* pList);$/;"	p	signature:(XnContext* pContext, const XnNodeQuery* pQuery, XnNodeInfoList* pList)
xnNodeQueryFree	/usr/include/ni/XnQueries.h	/^XN_C_API void xnNodeQueryFree(XnNodeQuery* pQuery);$/;"	p	signature:(XnNodeQuery* pQuery)
xnNodeQuerySetCreationInfo	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetCreationInfo(XnNodeQuery* pQuery, const XnChar* strCreationInfo);$/;"	p	signature:(XnNodeQuery* pQuery, const XnChar* strCreationInfo)
xnNodeQuerySetExistingNodeOnly	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetExistingNodeOnly(XnNodeQuery* pQuery, XnBool bExistingNode);$/;"	p	signature:(XnNodeQuery* pQuery, XnBool bExistingNode)
xnNodeQuerySetMaxVersion	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetMaxVersion(XnNodeQuery* pQuery, const XnVersion* pMaxVersion);$/;"	p	signature:(XnNodeQuery* pQuery, const XnVersion* pMaxVersion)
xnNodeQuerySetMinVersion	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetMinVersion(XnNodeQuery* pQuery, const XnVersion* pMinVersion);$/;"	p	signature:(XnNodeQuery* pQuery, const XnVersion* pMinVersion)
xnNodeQuerySetName	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetName(XnNodeQuery* pQuery, const XnChar* strName);$/;"	p	signature:(XnNodeQuery* pQuery, const XnChar* strName)
xnNodeQuerySetSupportedMinUserPositions	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetSupportedMinUserPositions(XnNodeQuery* pQuery, const XnUInt32 nCount);$/;"	p	signature:(XnNodeQuery* pQuery, const XnUInt32 nCount)
xnNodeQuerySetVendor	/usr/include/ni/XnQueries.h	/^XN_C_API XnStatus xnNodeQuerySetVendor(XnNodeQuery* pQuery, const XnChar* strVendor);$/;"	p	signature:(XnNodeQuery* pQuery, const XnChar* strVendor)
xnOSAcceptSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSAcceptSocket(XN_SOCKET_HANDLE ListenSocket, XN_SOCKET_HANDLE* AcceptSocketPtr, XnUInt32 nMillisecsTimeout);$/;"	p	signature:(XN_SOCKET_HANDLE ListenSocket, XN_SOCKET_HANDLE* AcceptSocketPtr, XnUInt32 nMillisecsTimeout)
xnOSAppendFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSAppendFile(const XnChar* cpFileName, const void* pBuffer, const XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* cpFileName, const void* pBuffer, const XnUInt32 nBufferSize)
xnOSBindSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSBindSocket(XN_SOCKET_HANDLE Socket);$/;"	p	signature:(XN_SOCKET_HANDLE Socket)
xnOSCalloc	/usr/include/ni/XnOS.h	/^		#define xnOSCalloc(/;"	d
xnOSCalloc	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSCalloc(const XnSizeT nAllocNum, const XnSizeT nAllocSize);$/;"	p	signature:(const XnSizeT nAllocNum, const XnSizeT nAllocSize)
xnOSCallocAligned	/usr/include/ni/XnOS.h	/^		#define xnOSCallocAligned(/;"	d
xnOSCallocAligned	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSCallocAligned(const XnSizeT nAllocNum, const XnSizeT nAllocSize, const XnSizeT nAlignment);$/;"	p	signature:(const XnSizeT nAllocNum, const XnSizeT nAllocSize, const XnSizeT nAlignment)
xnOSCloseCriticalSection	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseCriticalSection(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle);$/;"	p	signature:(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle)
xnOSCloseEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseEvent(XN_EVENT_HANDLE* pEventHandle);$/;"	p	signature:(XN_EVENT_HANDLE* pEventHandle)
xnOSCloseFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseFile(XN_FILE_HANDLE* pFile);$/;"	p	signature:(XN_FILE_HANDLE* pFile)
xnOSCloseMutex	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseMutex(XN_MUTEX_HANDLE* pMutexHandle);$/;"	p	signature:(XN_MUTEX_HANDLE* pMutexHandle)
xnOSCloseSemaphore	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseSemaphore(XN_SEMAPHORE_HANDLE* pSemaphoreHandle);$/;"	p	signature:(XN_SEMAPHORE_HANDLE* pSemaphoreHandle)
xnOSCloseSharedMemory	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseSharedMemory(XN_SHARED_MEMORY_HANDLE hSharedMem);$/;"	p	signature:(XN_SHARED_MEMORY_HANDLE hSharedMem)
xnOSCloseSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseSocket(XN_SOCKET_HANDLE Socket);$/;"	p	signature:(XN_SOCKET_HANDLE Socket)
xnOSCloseThread	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCloseThread(XN_THREAD_HANDLE* pThreadHandle);$/;"	p	signature:(XN_THREAD_HANDLE* pThreadHandle)
xnOSConnectSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSConnectSocket(XN_SOCKET_HANDLE Socket, XnUInt32 nMillisecsTimeout);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, XnUInt32 nMillisecsTimeout)
xnOSCreateCriticalSection	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateCriticalSection(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle);$/;"	p	signature:(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle)
xnOSCreateDirectory	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateDirectory(const XnChar* cpDirName);$/;"	p	signature:(const XnChar* cpDirName)
xnOSCreateEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateEvent(XN_EVENT_HANDLE* pEventHandle, XnBool bManualReset);$/;"	p	signature:(XN_EVENT_HANDLE* pEventHandle, XnBool bManualReset)
xnOSCreateMutex	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateMutex(XN_MUTEX_HANDLE* pMutexHandle);$/;"	p	signature:(XN_MUTEX_HANDLE* pMutexHandle)
xnOSCreateNamedEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateNamedEvent(XN_EVENT_HANDLE* pEventHandle, const XnChar* cpEventName, XnBool bManualReset);$/;"	p	signature:(XN_EVENT_HANDLE* pEventHandle, const XnChar* cpEventName, XnBool bManualReset)
xnOSCreateNamedMutex	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateNamedMutex(XN_MUTEX_HANDLE* pMutexHandle, const XnChar* cpMutexName);$/;"	p	signature:(XN_MUTEX_HANDLE* pMutexHandle, const XnChar* cpMutexName)
xnOSCreateProcess	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateProcess(const XnChar* strExecutable, XnUInt32 nArgs, const XnChar** pstrArgs, XN_PROCESS_ID* pProcID);$/;"	p	signature:(const XnChar* strExecutable, XnUInt32 nArgs, const XnChar** pstrArgs, XN_PROCESS_ID* pProcID)
xnOSCreateSemaphore	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateSemaphore(XN_SEMAPHORE_HANDLE* pSemaphoreHandle, XnUInt32 nInitialCount);$/;"	p	signature:(XN_SEMAPHORE_HANDLE* pSemaphoreHandle, XnUInt32 nInitialCount)
xnOSCreateSharedMemory	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateSharedMemory(const XnChar* strName, XnUInt32 nSize, XnUInt32 nAccessFlags, XN_SHARED_MEMORY_HANDLE* phSharedMem);$/;"	p	signature:(const XnChar* strName, XnUInt32 nSize, XnUInt32 nAccessFlags, XN_SHARED_MEMORY_HANDLE* phSharedMem)
xnOSCreateSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateSocket(const XnOSSocketType SocketType, const XnChar* cpIPAddress, const XnUInt16 nPort, XN_SOCKET_HANDLE* SocketPtr);$/;"	p	signature:(const XnOSSocketType SocketType, const XnChar* cpIPAddress, const XnUInt16 nPort, XN_SOCKET_HANDLE* SocketPtr)
xnOSCreateThread	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSCreateThread(XN_THREAD_PROC_PROTO pThreadProc, const XN_THREAD_PARAM pThreadParam, XN_THREAD_HANDLE* pThreadHandle);$/;"	p	signature:(XN_THREAD_PROC_PROTO pThreadProc, const XN_THREAD_PARAM pThreadParam, XN_THREAD_HANDLE* pThreadHandle)
xnOSDeleteFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSDeleteFile(const XnChar* cpFileName);$/;"	p	signature:(const XnChar* cpFileName)
xnOSDoesDirecotyExist	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSDoesDirecotyExist(const XnChar* cpDirName, XnBool* pbResult);$/;"	p	signature:(const XnChar* cpDirName, XnBool* pbResult)
xnOSDoesFileExist	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSDoesFileExist(const XnChar* cpFileName, XnBool* pbResult);$/;"	p	signature:(const XnChar* cpFileName, XnBool* pbResult)
xnOSEndianSwapFLOAT	/usr/include/ni/XnOSMemory.h	/^XN_C_API XnFloat xnOSEndianSwapFLOAT(XnFloat fValue);$/;"	p	signature:(XnFloat fValue)
xnOSEndianSwapUINT16	/usr/include/ni/XnOSMemory.h	/^XN_C_API XnUInt16 xnOSEndianSwapUINT16(XnUInt16 nValue);$/;"	p	signature:(XnUInt16 nValue)
xnOSEndianSwapUINT32	/usr/include/ni/XnOSMemory.h	/^XN_C_API XnUInt32 xnOSEndianSwapUINT32(XnUInt32 nValue);$/;"	p	signature:(XnUInt32 nValue)
xnOSEndianSwapUINT64	/usr/include/ni/XnOSMemory.h	/^XN_C_API XnUInt64 xnOSEndianSwapUINT64(XnUInt64 nValue);$/;"	p	signature:(XnUInt64 nValue)
xnOSEnterCriticalSection	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSEnterCriticalSection(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle);$/;"	p	signature:(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle)
xnOSExpandEnvironmentStrings	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSExpandEnvironmentStrings(const XnChar* strSrc, XnChar* strDest, XnUInt32 nDestSize);$/;"	p	signature:(const XnChar* strSrc, XnChar* strDest, XnUInt32 nDestSize)
xnOSFlushFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSFlushFile(const XN_FILE_HANDLE File);$/;"	p	signature:(const XN_FILE_HANDLE File)
xnOSFree	/usr/include/ni/XnOS.h	/^		#define xnOSFree(/;"	d
xnOSFree	/usr/include/ni/XnOSMemory.h	/^XN_C_API void xnOSFree(const void* pMemBlock);$/;"	p	signature:(const void* pMemBlock)
xnOSFreeAligned	/usr/include/ni/XnOS.h	/^		#define xnOSFreeAligned(/;"	d
xnOSFreeAligned	/usr/include/ni/XnOSMemory.h	/^XN_C_API void xnOSFreeAligned(const void* pMemBlock);$/;"	p	signature:(const void* pMemBlock)
xnOSFreeLibrary	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSFreeLibrary(const XN_LIB_HANDLE LibHandle);$/;"	p	signature:(const XN_LIB_HANDLE LibHandle)
xnOSGetAbsTimeout	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetAbsTimeout(struct timespec* pTime, XnUInt32 nMilliseconds);$/;"	p	signature:(struct timespec* pTime, XnUInt32 nMilliseconds)
xnOSGetCurrentCallStack	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetCurrentCallStack(XnUInt32 nFramesToSkip, XnChar** astrFrames, XnUInt32 nMaxNameLength, XnUInt32* pnFrames);$/;"	p	signature:(XnUInt32 nFramesToSkip, XnChar** astrFrames, XnUInt32 nMaxNameLength, XnUInt32* pnFrames)
xnOSGetCurrentDir	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetCurrentDir(XnChar* cpDirName, const XnUInt32 nBufferSize);$/;"	p	signature:(XnChar* cpDirName, const XnUInt32 nBufferSize)
xnOSGetCurrentProcessID	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetCurrentProcessID(XN_PROCESS_ID* pProcID);$/;"	p	signature:(XN_PROCESS_ID* pProcID)
xnOSGetCurrentThreadID	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetCurrentThreadID(XN_THREAD_ID* pThreadID);$/;"	p	signature:(XN_THREAD_ID* pThreadID)
xnOSGetDirName	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetDirName(const XnChar* cpFilePath, XnChar* cpDirName, const XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* cpFilePath, XnChar* cpDirName, const XnUInt32 nBufferSize)
xnOSGetEpochTime	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetEpochTime(XnUInt32* nEpochTime);$/;"	p	signature:(XnUInt32* nEpochTime)
xnOSGetFileList	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetFileList(const XnChar* cpSearchPattern, const XnChar* cpPrefixPath, XnChar cpFileList[][XN_FILE_MAX_PATH], const XnUInt32 nMaxFiles, XnUInt32* pnFoundFiles);$/;"	p	signature:(const XnChar* cpSearchPattern, const XnChar* cpPrefixPath, XnChar cpFileList[][XN_FILE_MAX_PATH], const XnUInt32 nMaxFiles, XnUInt32* pnFoundFiles)
xnOSGetFileName	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetFileName(const XnChar* cpFilePath, XnChar* cpFileName, const XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* cpFilePath, XnChar* cpFileName, const XnUInt32 nBufferSize)
xnOSGetFileSize	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetFileSize(const XnChar* cpFileName, XnUInt32* pnFileSize);$/;"	p	signature:(const XnChar* cpFileName, XnUInt32* pnFileSize)
xnOSGetFullPathName	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetFullPathName(const XnChar* strFilePath, XnChar* strFullPath, XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* strFilePath, XnChar* strFullPath, XnUInt32 nBufferSize)
xnOSGetHighResTimeStamp	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetHighResTimeStamp(XnUInt64* nTimeStamp);$/;"	p	signature:(XnUInt64* nTimeStamp)
xnOSGetInfo	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetInfo(xnOSInfo* pOSInfo);$/;"	p	signature:(xnOSInfo* pOSInfo)
xnOSGetMonoTime	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetMonoTime(struct timespec* pTime);$/;"	p	signature:(struct timespec* pTime)
xnOSGetProcAddress	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetProcAddress(const XN_LIB_HANDLE LibHandle, const XnChar* cpProcName, XnFarProc* pProcAddr);$/;"	p	signature:(const XN_LIB_HANDLE LibHandle, const XnChar* cpProcName, XnFarProc* pProcAddr)
xnOSGetTimeStamp	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetTimeStamp(XnUInt64* nTimeStamp);$/;"	p	signature:(XnUInt64* nTimeStamp)
xnOSGetTimeout	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSGetTimeout(struct timespec* pTime, XnUInt32 nMilliseconds);$/;"	p	signature:(struct timespec* pTime, XnUInt32 nMilliseconds)
xnOSInfo	/usr/include/ni/XnOS.h	/^typedef struct xnOSInfo$/;"	s
xnOSInfo	/usr/include/ni/XnOS.h	/^} xnOSInfo;$/;"	t	typeref:struct:xnOSInfo
xnOSInfo::csCPUName	/usr/include/ni/XnOS.h	/^	XnChar csCPUName[XN_MAX_OS_NAME_LENGTH];$/;"	m	struct:xnOSInfo	access:public
xnOSInfo::csOSName	/usr/include/ni/XnOS.h	/^	XnChar csOSName[XN_MAX_OS_NAME_LENGTH];$/;"	m	struct:xnOSInfo	access:public
xnOSInfo::nProcessorsCount	/usr/include/ni/XnOS.h	/^	XnUInt32 nProcessorsCount;$/;"	m	struct:xnOSInfo	access:public
xnOSInfo::nTotalMemory	/usr/include/ni/XnOS.h	/^	XnUInt64 nTotalMemory;$/;"	m	struct:xnOSInfo	access:public
xnOSInit	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSInit();$/;"	p	signature:()
xnOSInitNetwork	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSInitNetwork();$/;"	p	signature:()
xnOSIsEventSet	/usr/include/ni/XnOS.h	/^XN_C_API XnBool xnOSIsEventSet(const XN_EVENT_HANDLE EventHandle);$/;"	p	signature:(const XN_EVENT_HANDLE EventHandle)
xnOSItoA	/usr/include/ni/XnOSStrings.h	/^XN_C_API void     xnOSItoA(XnInt32 nValue, XnChar* cpStr, XnInt32 nBase);$/;"	p	signature:(XnInt32 nValue, XnChar* cpStr, XnInt32 nBase)
xnOSLeaveCriticalSection	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSLeaveCriticalSection(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle);$/;"	p	signature:(XN_CRITICAL_SECTION_HANDLE* pCriticalSectionHandle)
xnOSListenSocket	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSListenSocket(XN_SOCKET_HANDLE Socket);$/;"	p	signature:(XN_SOCKET_HANDLE Socket)
xnOSLoadFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSLoadFile(const XnChar* cpFileName, void* pBuffer, const XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* cpFileName, void* pBuffer, const XnUInt32 nBufferSize)
xnOSLoadLibrary	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSLoadLibrary(const XnChar* cpFileName, XN_LIB_HANDLE* pLibHandle);$/;"	p	signature:(const XnChar* cpFileName, XN_LIB_HANDLE* pLibHandle)
xnOSLockMutex	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSLockMutex(const XN_MUTEX_HANDLE MutexHandle, XnUInt32 nMilliseconds);$/;"	p	signature:(const XN_MUTEX_HANDLE MutexHandle, XnUInt32 nMilliseconds)
xnOSLockSemaphore	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSLockSemaphore(XN_SEMAPHORE_HANDLE hSemaphore, XnUInt32 nMilliseconds);$/;"	p	signature:(XN_SEMAPHORE_HANDLE hSemaphore, XnUInt32 nMilliseconds)
xnOSLogMemAlloc	/usr/include/ni/XnOS.h	/^XN_C_API void* xnOSLogMemAlloc(void* pMemBlock, XnAllocationType nAllocType, XnUInt32 nBytes, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional);$/;"	p	signature:(void* pMemBlock, XnAllocationType nAllocType, XnUInt32 nBytes, const XnChar* csFunction, const XnChar* csFile, XnUInt32 nLine, const XnChar* csAdditional)
xnOSLogMemFree	/usr/include/ni/XnOS.h	/^XN_C_API void xnOSLogMemFree(const void* pMemBlock);$/;"	p	signature:(const void* pMemBlock)
xnOSMalloc	/usr/include/ni/XnOS.h	/^		#define xnOSMalloc(/;"	d
xnOSMalloc	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSMalloc(const XnSizeT nAllocSize);$/;"	p	signature:(const XnSizeT nAllocSize)
xnOSMallocAligned	/usr/include/ni/XnOS.h	/^		#define xnOSMallocAligned(/;"	d
xnOSMallocAligned	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSMallocAligned(const XnSizeT nAllocSize, const XnSizeT nAlignment);$/;"	p	signature:(const XnSizeT nAllocSize, const XnSizeT nAlignment)
xnOSMemCmp	/usr/include/ni/XnOSMemory.h	/^XN_C_API XnInt32 xnOSMemCmp(const void *pBuf1, const void *pBuf2, XnSizeT nCount);$/;"	p	signature:(const void *pBuf1, const void *pBuf2, XnSizeT nCount)
xnOSMemCopy	/usr/include/ni/XnOSMemory.h	/^XN_C_API void xnOSMemCopy(void* pDest, const void* pSource, XnSizeT nCount);$/;"	p	signature:(void* pDest, const void* pSource, XnSizeT nCount)
xnOSMemMove	/usr/include/ni/XnOSMemory.h	/^XN_C_API void xnOSMemMove(void* pDest, const void* pSource, XnSizeT nCount);$/;"	p	signature:(void* pDest, const void* pSource, XnSizeT nCount)
xnOSMemSet	/usr/include/ni/XnOSMemory.h	/^XN_C_API void xnOSMemSet(void* pDest, XnUInt8 nValue, XnSizeT nCount);$/;"	p	signature:(void* pDest, XnUInt8 nValue, XnSizeT nCount)
xnOSOpenFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSOpenFile(const XnChar* cpFileName, const XnUInt32 nFlags, XN_FILE_HANDLE* pFile);$/;"	p	signature:(const XnChar* cpFileName, const XnUInt32 nFlags, XN_FILE_HANDLE* pFile)
xnOSOpenNamedEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSOpenNamedEvent(XN_EVENT_HANDLE* pEventHandle, const XnChar* cpEventName);$/;"	p	signature:(XN_EVENT_HANDLE* pEventHandle, const XnChar* cpEventName)
xnOSOpenSharedMemory	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSOpenSharedMemory(const XnChar* strName, XnUInt32 nAccessFlags, XN_SHARED_MEMORY_HANDLE* phSharedMem);$/;"	p	signature:(const XnChar* strName, XnUInt32 nAccessFlags, XN_SHARED_MEMORY_HANDLE* phSharedMem)
xnOSQueryTimer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSQueryTimer(XnOSTimer Timer, XnUInt64* pnTimeSinceStart);$/;"	p	signature:(XnOSTimer Timer, XnUInt64* pnTimeSinceStart)
xnOSReadCharFromInput	/usr/include/ni/XnOS.h	/^XN_C_API XnChar xnOSReadCharFromInput();$/;"	p	signature:()
xnOSReadDoubleFromINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReadDoubleFromINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnDouble* fDest);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnDouble* fDest)
xnOSReadFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReadFile(const XN_FILE_HANDLE File, void* pBuffer, XnUInt32* pnBufferSize);$/;"	p	signature:(const XN_FILE_HANDLE File, void* pBuffer, XnUInt32* pnBufferSize)
xnOSReadFloatFromINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReadFloatFromINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnFloat* fDest);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnFloat* fDest)
xnOSReadIntFromINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReadIntFromINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnUInt32* nDest);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnUInt32* nDest)
xnOSReadStringFromINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReadStringFromINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnChar* cpDest, const XnUInt32 nDestLength);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, XnChar* cpDest, const XnUInt32 nDestLength)
xnOSRealloc	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSRealloc(void* pMemory, const XnSizeT nAllocSize);$/;"	p	signature:(void* pMemory, const XnSizeT nAllocSize)
xnOSReallocAligned	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSReallocAligned(void* pMemory, const XnSizeT nAllocSize, const XnSizeT nAlignment);$/;"	p	signature:(void* pMemory, const XnSizeT nAllocSize, const XnSizeT nAlignment)
xnOSRecalloc	/usr/include/ni/XnOSMemory.h	/^XN_C_API void* xnOSRecalloc(void* pMemory, const XnSizeT nAllocNum, const XnSizeT nAllocSize);$/;"	p	signature:(void* pMemory, const XnSizeT nAllocNum, const XnSizeT nAllocSize)
xnOSReceiveFromNetworkBuffer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReceiveFromNetworkBuffer(XN_SOCKET_HANDLE Socket, XnChar* cpBuffer, XnUInt32* pnBufferSize, XN_SOCKET_HANDLE* SocketFrom);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, XnChar* cpBuffer, XnUInt32* pnBufferSize, XN_SOCKET_HANDLE* SocketFrom)
xnOSReceiveNetworkBuffer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSReceiveNetworkBuffer(XN_SOCKET_HANDLE Socket, XnChar* cpBuffer, XnUInt32* pnBufferSize, XnUInt32 nMillisecsTimeout);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, XnChar* cpBuffer, XnUInt32* pnBufferSize, XnUInt32 nMillisecsTimeout)
xnOSResetEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSResetEvent(const XN_EVENT_HANDLE EventHandle);$/;"	p	signature:(const XN_EVENT_HANDLE EventHandle)
xnOSSaveFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSaveFile(const XnChar* cpFileName, const void* pBuffer, const XnUInt32 nBufferSize);$/;"	p	signature:(const XnChar* cpFileName, const void* pBuffer, const XnUInt32 nBufferSize)
xnOSSeekFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSeekFile(const XN_FILE_HANDLE File, const XnOSSeekType SeekType, const XnInt32 nOffset);$/;"	p	signature:(const XN_FILE_HANDLE File, const XnOSSeekType SeekType, const XnInt32 nOffset)
xnOSSendNetworkBuffer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSendNetworkBuffer(XN_SOCKET_HANDLE Socket, const XnChar* cpBuffer, const XnUInt32 nBufferSize);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, const XnChar* cpBuffer, const XnUInt32 nBufferSize)
xnOSSendToNetworkBuffer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSendToNetworkBuffer(XN_SOCKET_HANDLE Socket, const XnChar* cpBuffer, const XnUInt32 nBufferSize, XN_SOCKET_HANDLE SocketTo);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, const XnChar* cpBuffer, const XnUInt32 nBufferSize, XN_SOCKET_HANDLE SocketTo)
xnOSSetCurrentDir	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSetCurrentDir(const XnChar* cpDirName);$/;"	p	signature:(const XnChar* cpDirName)
xnOSSetEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSetEvent(const XN_EVENT_HANDLE EventHandle);$/;"	p	signature:(const XN_EVENT_HANDLE EventHandle)
xnOSSetSocketBufferSize	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSetSocketBufferSize(XN_SOCKET_HANDLE Socket, const XnUInt32 nSocketBufferSize);$/;"	p	signature:(XN_SOCKET_HANDLE Socket, const XnUInt32 nSocketBufferSize)
xnOSSetThreadPriority	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSetThreadPriority(XN_THREAD_HANDLE ThreadHandle, XnThreadPriority nPriority);$/;"	p	signature:(XN_THREAD_HANDLE ThreadHandle, XnThreadPriority nPriority)
xnOSSharedMemoryGetAddress	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSharedMemoryGetAddress(XN_SHARED_MEMORY_HANDLE hSharedMem, void** ppAddress);$/;"	p	signature:(XN_SHARED_MEMORY_HANDLE hSharedMem, void** ppAddress)
xnOSShutdown	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSShutdown();$/;"	p	signature:()
xnOSShutdownNetwork	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSShutdownNetwork();$/;"	p	signature:()
xnOSSleep	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSSleep(XnUInt32 nMilliseconds);$/;"	p	signature:(XnUInt32 nMilliseconds)
xnOSStartHighResTimer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSStartHighResTimer(XnOSTimer* pTimer);$/;"	p	signature:(XnOSTimer* pTimer)
xnOSStartTimer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSStartTimer(XnOSTimer* pTimer);$/;"	p	signature:(XnOSTimer* pTimer)
xnOSStopTimer	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSStopTimer(XnOSTimer* pTimer);$/;"	p	signature:(XnOSTimer* pTimer)
xnOSStrAppend	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrAppend(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nDestLength);$/;"	p	signature:(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nDestLength)
xnOSStrCRC32	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrCRC32(const XnChar* cpString, XnUInt32* nCRC32);$/;"	p	signature:(const XnChar* cpString, XnUInt32* nCRC32)
xnOSStrCaseCmp	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnInt32  xnOSStrCaseCmp(const XnChar* cpFirstString, const XnChar* cpSecondString);$/;"	p	signature:(const XnChar* cpFirstString, const XnChar* cpSecondString)
xnOSStrCmp	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnInt32  xnOSStrCmp(const XnChar* cpFirstString, const XnChar* cpSecondString);$/;"	p	signature:(const XnChar* cpFirstString, const XnChar* cpSecondString)
xnOSStrCopy	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrCopy(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nDestLength);$/;"	p	signature:(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nDestLength)
xnOSStrDup	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnChar* xnOSStrDup(const XnChar* strSource);$/;"	p	signature:(const XnChar* strSource)
xnOSStrFormat	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrFormat(XnChar* cpDestString, const XnUInt32 nDestLength, XnUInt32* pnCharsWritten, const XnChar* cpFormat, ...);$/;"	p	signature:(XnChar* cpDestString, const XnUInt32 nDestLength, XnUInt32* pnCharsWritten, const XnChar* cpFormat, ...)
xnOSStrFormatV	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrFormatV(XnChar* cpDestString, const XnUInt32 nDestLength, XnUInt32* pnCharsWritten, const XnChar* cpFormat, va_list args);$/;"	p	signature:(XnChar* cpDestString, const XnUInt32 nDestLength, XnUInt32* pnCharsWritten, const XnChar* cpFormat, va_list args)
xnOSStrLen	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnUInt32 xnOSStrLen(const XnChar* cpStr);$/;"	p	signature:(const XnChar* cpStr)
xnOSStrNCRC32	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrNCRC32(XnUChar* cpBuffer, XnUInt32 nBufferSize, XnUInt32* nCRC32);$/;"	p	signature:(XnUChar* cpBuffer, XnUInt32 nBufferSize, XnUInt32* nCRC32)
xnOSStrNCopy	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrNCopy(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nCopyLength, const XnUInt32 nDestLength);$/;"	p	signature:(XnChar* cpDestString, const XnChar* cpSrcString, const XnUInt32 nCopyLength, const XnUInt32 nDestLength)
xnOSStrPrefix	/usr/include/ni/XnOSStrings.h	/^XN_C_API XnStatus xnOSStrPrefix(const XnChar* cpPrefixString, XnChar* cpDestString, const XnUInt32 nDestLength);$/;"	p	signature:(const XnChar* cpPrefixString, XnChar* cpDestString, const XnUInt32 nDestLength)
xnOSTellFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSTellFile(const XN_FILE_HANDLE File, XnUInt32* nFilePos);$/;"	p	signature:(const XN_FILE_HANDLE File, XnUInt32* nFilePos)
xnOSTerminateThread	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSTerminateThread(XN_THREAD_HANDLE* pThreadHandle);$/;"	p	signature:(XN_THREAD_HANDLE* pThreadHandle)
xnOSUnLockMutex	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSUnLockMutex(const XN_MUTEX_HANDLE MutexHandle);$/;"	p	signature:(const XN_MUTEX_HANDLE MutexHandle)
xnOSUnlockSemaphore	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSUnlockSemaphore(XN_SEMAPHORE_HANDLE hSemaphore);$/;"	p	signature:(XN_SEMAPHORE_HANDLE hSemaphore)
xnOSWaitAndTerminateThread	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWaitAndTerminateThread(XN_THREAD_HANDLE* pThreadHandle, XnUInt32 nMilliseconds);$/;"	p	signature:(XN_THREAD_HANDLE* pThreadHandle, XnUInt32 nMilliseconds)
xnOSWaitEvent	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWaitEvent(const XN_EVENT_HANDLE EventHandle, XnUInt32 nMilliseconds);$/;"	p	signature:(const XN_EVENT_HANDLE EventHandle, XnUInt32 nMilliseconds)
xnOSWaitForCondition	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWaitForCondition(const XN_EVENT_HANDLE EventHandle, XnUInt32 nMilliseconds, XnConditionFunc pConditionFunc, void* pConditionData);$/;"	p	signature:(const XN_EVENT_HANDLE EventHandle, XnUInt32 nMilliseconds, XnConditionFunc pConditionFunc, void* pConditionData)
xnOSWaitForThreadExit	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWaitForThreadExit(XN_THREAD_HANDLE ThreadHandle, XnUInt32 nMilliseconds);$/;"	p	signature:(XN_THREAD_HANDLE ThreadHandle, XnUInt32 nMilliseconds)
xnOSWasKeyboardHit	/usr/include/ni/XnOS.h	/^XN_C_API XnBool xnOSWasKeyboardHit();$/;"	p	signature:()
xnOSWriteDoubleToINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWriteDoubleToINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnDouble fSrc);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnDouble fSrc)
xnOSWriteFile	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWriteFile(const XN_FILE_HANDLE File, const void* pBuffer, const XnUInt32 nBufferSize);$/;"	p	signature:(const XN_FILE_HANDLE File, const void* pBuffer, const XnUInt32 nBufferSize)
xnOSWriteFloatToINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWriteFloatToINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnFloat fSrc);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnFloat fSrc)
xnOSWriteIntToINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWriteIntToINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnUInt32 nSrc);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnUInt32 nSrc)
xnOSWriteMemoryReport	/usr/include/ni/XnOS.h	/^XN_C_API void xnOSWriteMemoryReport(const XnChar* csFileName);$/;"	p	signature:(const XnChar* csFileName)
xnOSWriteStringToINI	/usr/include/ni/XnOS.h	/^XN_C_API XnStatus xnOSWriteStringToINI(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnChar* cpSrc);$/;"	p	signature:(const XnChar* cpINIFile, const XnChar* cpSection, const XnChar* cpKey, const XnChar* cpSrc)
xnPixelFormatFromString	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnPixelFormatFromString(const XnChar* strName, XnPixelFormat* pFormat);$/;"	p	signature:(const XnChar* strName, XnPixelFormat* pFormat)
xnPixelFormatToString	/usr/include/ni/XnUtils.h	/^XN_C_API const XnChar* xnPixelFormatToString(XnPixelFormat format);$/;"	p	signature:(XnPixelFormat format)
xnPlayerReadNext	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnPlayerReadNext(XnNodeHandle hPlayer);$/;"	p	signature:(XnNodeHandle hPlayer)
xnPrintError	/usr/include/ni/XnStatus.h	/^XN_C_API void xnPrintError(const XnStatus Status, const XnChar* csUserMessage);$/;"	p	signature:(const XnStatus Status, const XnChar* csUserMessage)
xnPrintRegisteredLicenses	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnPrintRegisteredLicenses();$/;"	p	signature:()
xnPrintRegisteredModules	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnPrintRegisteredModules();$/;"	p	signature:()
xnProductionNodeAddRef	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnProductionNodeAddRef(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnProductionNodeDescriptionToString	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnProductionNodeDescriptionToString(const XnProductionNodeDescription* pDescription, XnChar* csResult, XnUInt32 nSize);$/;"	p	signature:(const XnProductionNodeDescription* pDescription, XnChar* csResult, XnUInt32 nSize)
xnProductionNodeRelease	/usr/include/ni/XnContext.h	/^XN_C_API void xnProductionNodeRelease(XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hNode)
xnProductionNodeTypeFromString	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnProductionNodeTypeFromString(const XnChar* strType, XnProductionNodeType* pType);$/;"	p	signature:(const XnChar* strType, XnProductionNodeType* pType)
xnProductionNodeTypeToString	/usr/include/ni/XnUtils.h	/^XN_C_API const XnChar* xnProductionNodeTypeToString(XnProductionNodeType Type);$/;"	p	signature:(XnProductionNodeType Type)
xnProfilingInit	/usr/include/ni/XnProfiling.h	/^XN_C_API XnStatus xnProfilingInit(XnUInt32 nProfilingInterval = 0);$/;"	p	signature:(XnUInt32 nProfilingInterval = 0)
xnProfilingInitFromINI	/usr/include/ni/XnProfiling.h	/^XN_C_API XnStatus xnProfilingInitFromINI(const XnChar* cpINIFileName, const XnChar* cpSectionName);$/;"	p	signature:(const XnChar* cpINIFileName, const XnChar* cpSectionName)
xnProfilingIsActive	/usr/include/ni/XnProfiling.h	/^XN_C_API XnBool xnProfilingIsActive();$/;"	p	signature:()
xnProfilingSectionEnd	/usr/include/ni/XnProfiling.h	/^XN_C_API XnStatus xnProfilingSectionEnd(XnProfilingHandle* pHandle);$/;"	p	signature:(XnProfilingHandle* pHandle)
xnProfilingSectionStart	/usr/include/ni/XnProfiling.h	/^XN_C_API XnStatus xnProfilingSectionStart(const char* csSectionName, XnBool bMT, XnProfilingHandle* pHandle);$/;"	p	signature:(const char* csSectionName, XnBool bMT, XnProfilingHandle* pHandle)
xnProfilingShutdown	/usr/include/ni/XnProfiling.h	/^XN_C_API XnStatus xnProfilingShutdown();$/;"	p	signature:()
xnRecord	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRecord(XnNodeHandle hRecorder);$/;"	p	signature:(XnNodeHandle hRecorder)
xnRegisterCalibrationCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterCalibrationCallbacks(XnNodeHandle hInstance, XnCalibrationStart CalibrationStartCB, XnCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCalibrationStart CalibrationStartCB, XnCalibrationEnd CalibrationEndCB, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterErrorCodeMessages	/usr/include/ni/XnStatusRegister.h	/^XN_C_API XnStatus xnRegisterErrorCodeMessages(XnUInt16 nGroup, XnUInt16 nFirst, XnUInt16 nCount, XnErrorCodeData* pErrorCodeData);$/;"	p	signature:(XnUInt16 nGroup, XnUInt16 nFirst, XnUInt16 nCount, XnErrorCodeData* pErrorCodeData)
xnRegisterExtensionNode	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnRegisterExtensionNode(const XnChar* strTypeName, XnProductionNodeType baseType, XnProductionNodeType* pTypeID);$/;"	p	signature:(const XnChar* strTypeName, XnProductionNodeType baseType, XnProductionNodeType* pTypeID)
xnRegisterGestureCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterGestureCallbacks(XnNodeHandle hInstance, XnGestureRecognized RecognizedCB, XnGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnGestureRecognized RecognizedCB, XnGestureProgress ProgressCB, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterGlobalLicense	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnRegisterGlobalLicense(XnLicense* pLicense);$/;"	p	signature:(XnLicense* pLicense)
xnRegisterHandCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterHandCallbacks(XnNodeHandle hInstance, XnHandCreate CreateCB, XnHandUpdate UpdateCB, XnHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnHandCreate CreateCB, XnHandUpdate UpdateCB, XnHandDestroy DestroyCB, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterModule	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnRegisterModule(const XnChar* strModule, const XnChar* strConfigDir);$/;"	p	signature:(const XnChar* strModule, const XnChar* strConfigDir)
xnRegisterModuleWithOpenNI	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnRegisterModuleWithOpenNI(XnOpenNIModuleInterface* pInterface, const XnChar* strConfigDir, const XnChar* strName);$/;"	p	signature:(XnOpenNIModuleInterface* pInterface, const XnChar* strConfigDir, const XnChar* strName)
xnRegisterToCroppingChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToCroppingChange(XnNodeHandle hInstance, XnStateChangedHandler handler,$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToDepthFieldOfViewChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToDepthFieldOfViewChange(XnNodeHandle hInstance, XnStateChangedHandler handler,$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToEndOfFileReached	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToEndOfFileReached$/;"	p	signature:(XnNodeHandle hPlayer, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToFrameSyncChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToFrameSyncChange(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToGeneralIntValueChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToGeneralIntValueChange$/;"	p	signature:(XnNodeHandle hNode, const XnChar* strCap, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToGenerationRunningChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToGenerationRunningChange$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToGestureChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToGestureChange(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToGlobalErrorStateChange	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnRegisterToGlobalErrorStateChange$/;"	p	signature:(XnContext* pContext, XnErrorStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToJointConfigurationChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToJointConfigurationChange(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToMapOutputModeChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToMapOutputModeChange(XnNodeHandle hInstance, XnStateChangedHandler handler,$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToMirrorChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToMirrorChange$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToNewDataAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToNewDataAvailable$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToNodeErrorStateChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToNodeErrorStateChange$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToPixelFormatChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToPixelFormatChange(XnNodeHandle hInstance, XnStateChangedHandler handler,$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToPoseCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToPoseCallbacks(XnNodeHandle hInstance, XnPoseDetectionCallback PoseDetectionStartCB, XnPoseDetectionCallback PoseDetectionEndCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnPoseDetectionCallback PoseDetectionStartCB, XnPoseDetectionCallback PoseDetectionEndCB, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToPowerLineFrequencyChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToPowerLineFrequencyChange$/;"	p	signature:(XnNodeHandle hGenerator, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToUserPositionChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToUserPositionChange(XnNodeHandle hInstance, XnStateChangedHandler handler,$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToViewPointChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToViewPointChange(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterToWaveOutputModeChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterToWaveOutputModeChanges(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnStateChangedHandler handler, void* pCookie, XnCallbackHandle* phCallback)
xnRegisterUserCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRegisterUserCallbacks(XnNodeHandle hInstance, XnUserHandler NewUserCB, XnUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnUserHandler NewUserCB, XnUserHandler LostUserCB, void* pCookie, XnCallbackHandle* phCallback)
xnRemoveGesture	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRemoveGesture(XnNodeHandle hInstance, const XnChar* strGesture);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strGesture)
xnRemoveNeededNode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRemoveNeededNode(XnNodeHandle hInstance, XnNodeHandle hNeededNode);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hNeededNode)
xnRemoveNodeFromRecording	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRemoveNodeFromRecording(XnNodeHandle hRecorder, XnNodeHandle hNode);$/;"	p	signature:(XnNodeHandle hRecorder, XnNodeHandle hNode)
xnRequestSkeletonCalibration	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnRequestSkeletonCalibration(XnNodeHandle hInstance, XnUserID user, XnBool bForce);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnBool bForce)
xnResetSkeleton	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnResetSkeleton(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnResetViewPoint	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnResetViewPoint(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnResolutionGetFromName	/usr/include/ni/XnUtils.h	/^XN_C_API XnResolution xnResolutionGetFromName(const XnChar* strName);$/;"	p	signature:(const XnChar* strName)
xnResolutionGetFromXYRes	/usr/include/ni/XnUtils.h	/^XN_C_API XnResolution xnResolutionGetFromXYRes(XnUInt32 xRes, XnUInt32 yRes);$/;"	p	signature:(XnUInt32 xRes, XnUInt32 yRes)
xnResolutionGetName	/usr/include/ni/XnUtils.h	/^XN_C_API const XnChar* xnResolutionGetName(XnResolution resolution);$/;"	p	signature:(XnResolution resolution)
xnResolutionGetXRes	/usr/include/ni/XnUtils.h	/^XN_C_API XnUInt32 xnResolutionGetXRes(XnResolution resolution);$/;"	p	signature:(XnResolution resolution)
xnResolutionGetYRes	/usr/include/ni/XnUtils.h	/^XN_C_API XnUInt32 xnResolutionGetYRes(XnResolution resolution);$/;"	p	signature:(XnResolution resolution)
xnSaveSkeletonCalibrationData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSaveSkeletonCalibrationData(XnNodeHandle hInstance, XnUserID user, XnUInt32 nSlot);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, XnUInt32 nSlot)
xnSaveSkeletonCalibrationDataToFile	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSaveSkeletonCalibrationDataToFile(XnNodeHandle hInstance, XnUserID user, const XnChar* strFileName);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user, const XnChar* strFileName)
xnSchedulerAddTask	/usr/include/ni/XnScheduler.h	/^XN_C_API XnStatus xnSchedulerAddTask(XnScheduler* pScheduler, XnUInt64 nInterval, XnTaskCallbackFuncPtr pCallback, void* pCallbackArg, XnScheduledTask** ppTask);$/;"	p	signature:(XnScheduler* pScheduler, XnUInt64 nInterval, XnTaskCallbackFuncPtr pCallback, void* pCallbackArg, XnScheduledTask** ppTask)
xnSchedulerRemoveTask	/usr/include/ni/XnScheduler.h	/^XN_C_API XnStatus xnSchedulerRemoveTask(XnScheduler* pScheduler, XnScheduledTask** ppTask);$/;"	p	signature:(XnScheduler* pScheduler, XnScheduledTask** ppTask)
xnSchedulerRescheduleTask	/usr/include/ni/XnScheduler.h	/^XN_C_API XnStatus xnSchedulerRescheduleTask(XnScheduler* pScheduler, XnScheduledTask* pTask, XnUInt64 nInterval);$/;"	p	signature:(XnScheduler* pScheduler, XnScheduledTask* pTask, XnUInt64 nInterval)
xnSchedulerShutdown	/usr/include/ni/XnScheduler.h	/^XN_C_API XnStatus xnSchedulerShutdown(XnScheduler** ppScheduler);$/;"	p	signature:(XnScheduler** ppScheduler)
xnSchedulerStart	/usr/include/ni/XnScheduler.h	/^XN_C_API XnStatus xnSchedulerStart(XnScheduler** ppScheduler);$/;"	p	signature:(XnScheduler** ppScheduler)
xnSeekPlayerToFrame	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSeekPlayerToFrame(XnNodeHandle hPlayer, const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin);$/;"	p	signature:(XnNodeHandle hPlayer, const XnChar* strNodeName, XnInt32 nFrameOffset, XnPlayerSeekOrigin origin)
xnSeekPlayerToTimeStamp	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSeekPlayerToTimeStamp(XnNodeHandle hPlayer, XnInt64 nTimeOffset, XnPlayerSeekOrigin origin);$/;"	p	signature:(XnNodeHandle hPlayer, XnInt64 nTimeOffset, XnPlayerSeekOrigin origin)
xnSetCropping	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetCropping(XnNodeHandle hInstance, const XnCropping* pCropping);$/;"	p	signature:(XnNodeHandle hInstance, const XnCropping* pCropping)
xnSetGeneralIntValue	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetGeneralIntValue(XnNodeHandle hNode, const XnChar* strCap, XnInt32 nValue);$/;"	p	signature:(XnNodeHandle hNode, const XnChar* strCap, XnInt32 nValue)
xnSetGeneralProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetGeneralProperty(XnNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnUInt32 nBufferSize, const void* pBuffer)
xnSetGlobalMirror	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnSetGlobalMirror(XnContext* pContext, XnBool bMirror);$/;"	p	signature:(XnContext* pContext, XnBool bMirror)
xnSetIntProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetIntProperty(XnNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnUInt64 nValue)
xnSetJointActive	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetJointActive(XnNodeHandle hInstance, XnSkeletonJoint eJoint, XnBool bState);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonJoint eJoint, XnBool bState)
xnSetMapOutputMode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetMapOutputMode(XnNodeHandle hInstance, const XnMapOutputMode* pOutputMode);$/;"	p	signature:(XnNodeHandle hInstance, const XnMapOutputMode* pOutputMode)
xnSetMirror	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetMirror(XnNodeHandle hInstance, XnBool bMirror);$/;"	p	signature:(XnNodeHandle hInstance, XnBool bMirror)
xnSetPixelFormat	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetPixelFormat(XnNodeHandle hInstance, XnPixelFormat Format);$/;"	p	signature:(XnNodeHandle hInstance, XnPixelFormat Format)
xnSetPlaybackSpeed	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetPlaybackSpeed(XnNodeHandle hInstance, XnDouble dSpeed);$/;"	p	signature:(XnNodeHandle hInstance, XnDouble dSpeed)
xnSetPlayerRepeat	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetPlayerRepeat(XnNodeHandle hPlayer, XnBool bRepeat);$/;"	p	signature:(XnNodeHandle hPlayer, XnBool bRepeat)
xnSetPlayerSource	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetPlayerSource(XnNodeHandle hPlayer, XnRecordMedium sourceType, const XnChar* strSource);$/;"	p	signature:(XnNodeHandle hPlayer, XnRecordMedium sourceType, const XnChar* strSource)
xnSetPowerLineFrequency	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetPowerLineFrequency(XnNodeHandle hGenerator, XnPowerLineFrequency nFrequency);$/;"	p	signature:(XnNodeHandle hGenerator, XnPowerLineFrequency nFrequency)
xnSetRealProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetRealProperty(XnNodeHandle hInstance, const XnChar* strName, XnDouble dValue);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, XnDouble dValue)
xnSetRecorderDestination	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetRecorderDestination(XnNodeHandle hRecorder, XnRecordMedium destType, const XnChar* strDest);$/;"	p	signature:(XnNodeHandle hRecorder, XnRecordMedium destType, const XnChar* strDest)
xnSetSkeletonProfile	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetSkeletonProfile(XnNodeHandle hInstance, XnSkeletonProfile eProfile);$/;"	p	signature:(XnNodeHandle hInstance, XnSkeletonProfile eProfile)
xnSetSkeletonSmoothing	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetSkeletonSmoothing(XnNodeHandle hInstance, XnFloat fFactor);$/;"	p	signature:(XnNodeHandle hInstance, XnFloat fFactor)
xnSetStringProperty	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetStringProperty(XnNodeHandle hInstance, const XnChar* strName, const XnChar* strValue);$/;"	p	signature:(XnNodeHandle hInstance, const XnChar* strName, const XnChar* strValue)
xnSetTrackingSmoothing	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetTrackingSmoothing(XnNodeHandle hInstance, XnFloat fFactor);$/;"	p	signature:(XnNodeHandle hInstance, XnFloat fFactor)
xnSetUserPosition	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetUserPosition(XnNodeHandle hInstance, XnUInt32 nIndex, const XnBoundingBox3D* pPosition);$/;"	p	signature:(XnNodeHandle hInstance, XnUInt32 nIndex, const XnBoundingBox3D* pPosition)
xnSetViewPoint	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetViewPoint(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnSetWaveOutputMode	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnSetWaveOutputMode(XnNodeHandle hInstance, const XnWaveOutputMode* OutputMode);$/;"	p	signature:(XnNodeHandle hInstance, const XnWaveOutputMode* OutputMode)
xnShutdown	/usr/include/ni/XnContext.h	/^XN_C_API void xnShutdown(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnStartGenerating	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStartGenerating(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnStartGeneratingAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnStartGeneratingAll(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnStartPoseDetection	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStartPoseDetection(XnNodeHandle hInstance,const  XnChar* strPose, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance,const XnChar* strPose, XnUserID user)
xnStartSkeletonTracking	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStartSkeletonTracking(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnStartTracking	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStartTracking(XnNodeHandle hInstance, const XnPoint3D* pPosition);$/;"	p	signature:(XnNodeHandle hInstance, const XnPoint3D* pPosition)
xnStopFrameSyncWith	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopFrameSyncWith(XnNodeHandle hInstance, XnNodeHandle hOther);$/;"	p	signature:(XnNodeHandle hInstance, XnNodeHandle hOther)
xnStopGenerating	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopGenerating(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnStopGeneratingAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnStopGeneratingAll(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnStopPoseDetection	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopPoseDetection(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnStopSkeletonTracking	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopSkeletonTracking(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnStopTracking	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopTracking(XnNodeHandle hInstance, XnUserID user);$/;"	p	signature:(XnNodeHandle hInstance, XnUserID user)
xnStopTrackingAll	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnStopTrackingAll(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnTellPlayerFrame	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnTellPlayerFrame(XnNodeHandle hPlayer, const XnChar* strNodeName, XnUInt32* pnFrame);$/;"	p	signature:(XnNodeHandle hPlayer, const XnChar* strNodeName, XnUInt32* pnFrame)
xnTellPlayerTimestamp	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnTellPlayerTimestamp(XnNodeHandle hPlayer, XnUInt64* pnTimestamp);$/;"	p	signature:(XnNodeHandle hPlayer, XnUInt64* pnTimestamp)
xnUSBAbortEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBAbortEndPoint(XN_USB_EP_HANDLE pEPHandle);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle)
xnUSBCloseDevice	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBCloseDevice(XN_USB_DEV_HANDLE pDevHandle);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle)
xnUSBCloseEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBCloseEndPoint(XN_USB_EP_HANDLE pEPHandle);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle)
xnUSBEnumerateDevices	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBEnumerateDevices(XnUInt16 nVendorID, XnUInt16 nProductID, const XnUSBConnectionString** pastrDevicePaths, XnUInt32* pnCount);$/;"	p	signature:(XnUInt16 nVendorID, XnUInt16 nProductID, const XnUSBConnectionString** pastrDevicePaths, XnUInt32* pnCount)
xnUSBFinishReadEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBFinishReadEndPoint(XN_USB_EP_HANDLE pEPHandle, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut)
xnUSBFlushEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBFlushEndPoint(XN_USB_EP_HANDLE pEPHandle);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle)
xnUSBFreeDevicesList	/usr/include/ni/XnUSB.h	/^XN_C_API void xnUSBFreeDevicesList(const XnUSBConnectionString* astrDevicePaths);$/;"	p	signature:(const XnUSBConnectionString* astrDevicePaths)
xnUSBGetConfig	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBGetConfig(XN_USB_DEV_HANDLE pDevHandle, XnUInt8* pnConfig);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUInt8* pnConfig)
xnUSBGetDeviceSpeed	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBGetDeviceSpeed(XN_USB_DEV_HANDLE pDevHandle, XnUSBDeviceSpeed* pDevSpeed);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUSBDeviceSpeed* pDevSpeed)
xnUSBGetEndPointMaxPacketSize	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBGetEndPointMaxPacketSize(XN_USB_EP_HANDLE pEPHandle, XnUInt32* pnMaxPacketSize);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUInt32* pnMaxPacketSize)
xnUSBGetInterface	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBGetInterface(XN_USB_DEV_HANDLE pDevHandle, XnUInt8* pnInterface, XnUInt8* pnAltInterface);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUInt8* pnInterface, XnUInt8* pnAltInterface)
xnUSBInit	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBInit();$/;"	p	signature:()
xnUSBInitReadThread	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBInitReadThread(XN_USB_EP_HANDLE pEPHandle, XnUInt32 nBufferSize, XnUInt32 nNumBuffers, XnUInt32 nTimeOut, XnUSBReadCallbackFunctionPtr pCallbackFunction, void* pCallbackData);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUInt32 nBufferSize, XnUInt32 nNumBuffers, XnUInt32 nTimeOut, XnUSBReadCallbackFunctionPtr pCallbackFunction, void* pCallbackData)
xnUSBOpenDeviceByPath	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBOpenDeviceByPath(const XnUSBConnectionString strDevicePath, XN_USB_DEV_HANDLE* pDevHandlePtr);$/;"	p	signature:(const XnUSBConnectionString strDevicePath, XN_USB_DEV_HANDLE* pDevHandlePtr)
xnUSBOpenEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBOpenEndPoint(XN_USB_DEV_HANDLE pDevHandle, XnUInt16 nEndPointID, XnUSBEndPointType nEPType, XnUSBDirectionType nDirType, XN_USB_EP_HANDLE* pEPHandlePtr);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUInt16 nEndPointID, XnUSBEndPointType nEPType, XnUSBDirectionType nDirType, XN_USB_EP_HANDLE* pEPHandlePtr)
xnUSBQueueReadEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBQueueReadEndPoint(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut)
xnUSBReadEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBReadEndPoint(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut)
xnUSBReceiveControl	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBReceiveControl(XN_USB_DEV_HANDLE pDevHandle, XnUSBControlType nType, XnUInt8 nRequest, XnUInt16 nValue, XnUInt16 nIndex, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUSBControlType nType, XnUInt8 nRequest, XnUInt16 nValue, XnUInt16 nIndex, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32* pnBytesReceived, XnUInt32 nTimeOut)
xnUSBResetEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBResetEndPoint(XN_USB_EP_HANDLE pEPHandle);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle)
xnUSBSendControl	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBSendControl(XN_USB_DEV_HANDLE pDevHandle, XnUSBControlType nType, XnUInt8 nRequest, XnUInt16 nValue, XnUInt16 nIndex, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUSBControlType nType, XnUInt8 nRequest, XnUInt16 nValue, XnUInt16 nIndex, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut)
xnUSBSetCallbackHandler	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBSetCallbackHandler(XnUInt16 nVendorID, XnUInt16 nProductID, void* pExtraParam, XnUSBEventCallbackFunctionPtr pCallbackFunction, void* pCallbackData);$/;"	p	signature:(XnUInt16 nVendorID, XnUInt16 nProductID, void* pExtraParam, XnUSBEventCallbackFunctionPtr pCallbackFunction, void* pCallbackData)
xnUSBSetConfig	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBSetConfig(XN_USB_DEV_HANDLE pDevHandle, XnUInt8 nConfig);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUInt8 nConfig)
xnUSBSetInterface	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBSetInterface(XN_USB_DEV_HANDLE pDevHandle, XnUInt8 nInterface, XnUInt8 nAltInterface);$/;"	p	signature:(XN_USB_DEV_HANDLE pDevHandle, XnUInt8 nInterface, XnUInt8 nAltInterface)
xnUSBShutdown	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBShutdown();$/;"	p	signature:()
xnUSBShutdownReadThread	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBShutdownReadThread(XN_USB_EP_HANDLE pEPHandle);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle)
xnUSBWriteEndPoint	/usr/include/ni/XnUSB.h	/^XN_C_API XnStatus xnUSBWriteEndPoint(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut);$/;"	p	signature:(XN_USB_EP_HANDLE pEPHandle, XnUChar* pBuffer, XnUInt32 nBufferSize, XnUInt32 nTimeOut)
xnUnlockNodeForChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnUnlockNodeForChanges(XnNodeHandle hInstance, XnLockHandle hLock);$/;"	p	signature:(XnNodeHandle hInstance, XnLockHandle hLock)
xnUnregisterCalibrationCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterCalibrationCallbacks(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromCroppingChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromCroppingChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromDepthFieldOfViewChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromDepthFieldOfViewChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromEndOfFileReached	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromEndOfFileReached$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromFrameSyncChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromFrameSyncChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromGeneralIntValueChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromGeneralIntValueChange$/;"	p	signature:(XnNodeHandle hNode, const XnChar* strCap, XnCallbackHandle hCallback)
xnUnregisterFromGenerationRunningChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromGenerationRunningChange$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromGestureChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromGestureChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromGlobalErrorStateChange	/usr/include/ni/XnContext.h	/^XN_C_API void xnUnregisterFromGlobalErrorStateChange$/;"	p	signature:(XnContext* pContext, XnCallbackHandle hCallback)
xnUnregisterFromJointConfigurationChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromJointConfigurationChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromMapOutputModeChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromMapOutputModeChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromMirrorChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromMirrorChange$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromNewDataAvailable	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromNewDataAvailable$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromNodeErrorStateChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromNodeErrorStateChange$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromPixelFormatChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromPixelFormatChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromPoseCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromPoseCallbacks(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromPowerLineFrequencyChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromPowerLineFrequencyChange$/;"	p	signature:(XnNodeHandle hGenerator, XnCallbackHandle hCallback)
xnUnregisterFromUserPositionChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromUserPositionChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromViewPointChange	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromViewPointChange(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterFromWaveOutputModeChanges	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterFromWaveOutputModeChanges(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterGestureCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterGestureCallbacks(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterGlobalLicense	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnUnregisterGlobalLicense(XnLicense* pLicense);$/;"	p	signature:(XnLicense* pLicense)
xnUnregisterHandCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterHandCallbacks(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnUnregisterModule	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnUnregisterModule(const XnChar* strModule);$/;"	p	signature:(const XnChar* strModule)
xnUnregisterUserCallbacks	/usr/include/ni/XnPrdNode.h	/^XN_C_API void xnUnregisterUserCallbacks(XnNodeHandle hInstance, XnCallbackHandle hCallback);$/;"	p	signature:(XnNodeHandle hInstance, XnCallbackHandle hCallback)
xnVersionCompare	/usr/include/ni/XnUtils.h	/^XN_C_API XnInt32 xnVersionCompare(const XnVersion* pVersion1, const XnVersion* pVersion2);$/;"	p	signature:(const XnVersion* pVersion1, const XnVersion* pVersion2)
xnVersionToString	/usr/include/ni/XnUtils.h	/^XN_C_API XnStatus xnVersionToString(const XnVersion* pVersion, XnChar* csResult, XnUInt32 nSize);$/;"	p	signature:(const XnVersion* pVersion, XnChar* csResult, XnUInt32 nSize)
xnWaitAndUpdateAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnWaitAndUpdateAll(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnWaitAndUpdateData	/usr/include/ni/XnPrdNode.h	/^XN_C_API XnStatus xnWaitAndUpdateData(XnNodeHandle hInstance);$/;"	p	signature:(XnNodeHandle hInstance)
xnWaitAnyUpdateAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnWaitAnyUpdateAll(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnWaitNoneUpdateAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnWaitNoneUpdateAll(XnContext* pContext);$/;"	p	signature:(XnContext* pContext)
xnWaitOneUpdateAll	/usr/include/ni/XnContext.h	/^XN_C_API XnStatus xnWaitOneUpdateAll(XnContext* pContext, XnNodeHandle hNode);$/;"	p	signature:(XnContext* pContext, XnNodeHandle hNode)
~Context	/usr/include/ni/XnCppWrapper.h	/^		~Context() $/;"	f	class:xn::Context	access:public	signature:()
~EnumerationErrors	/usr/include/ni/XnCppWrapper.h	/^		~EnumerationErrors() { Free(); }$/;"	f	class:xn::EnumerationErrors	access:public	signature:()
~INiNodeAllocator	/usr/include/ni/IXnNodeAllocator.h	/^	virtual ~INiNodeAllocator() {}$/;"	f	class:INiNodeAllocator	access:public	signature:()
~Module	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~Module() {}$/;"	f	class:xn::Module	access:public	signature:()
~ModuleAlternativeViewPointInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAlternativeViewPointInterface() {}$/;"	f	class:xn::ModuleAlternativeViewPointInterface	access:public	signature:()
~ModuleAntiFlickerInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAntiFlickerInterface() {}$/;"	f	class:xn::ModuleAntiFlickerInterface	access:public	signature:()
~ModuleAudioGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleAudioGenerator() {}$/;"	f	class:xn::ModuleAudioGenerator	access:public	signature:()
~ModuleCodec	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleCodec() {}$/;"	f	class:xn::ModuleCodec	access:public	signature:()
~ModuleCroppingInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleCroppingInterface() {}$/;"	f	class:xn::ModuleCroppingInterface	access:public	signature:()
~ModuleDepthGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDepthGenerator() {}$/;"	f	class:xn::ModuleDepthGenerator	access:public	signature:()
~ModuleDevice	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDevice() {}$/;"	f	class:xn::ModuleDevice	access:public	signature:()
~ModuleDeviceIdentificationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleDeviceIdentificationInterface() {}$/;"	f	class:xn::ModuleDeviceIdentificationInterface	access:public	signature:()
~ModuleErrorStateInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleErrorStateInterface() {}$/;"	f	class:xn::ModuleErrorStateInterface	access:public	signature:()
~ModuleExportedProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleExportedProductionNode() {}$/;"	f	class:xn::ModuleExportedProductionNode	access:public	signature:()
~ModuleExtendedSerializationInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleExtendedSerializationInterface() {}$/;"	f	class:xn::ModuleExtendedSerializationInterface	access:public	signature:()
~ModuleGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleGenerator() {}$/;"	f	class:xn::ModuleGenerator	access:public	signature:()
~ModuleGestureGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleGestureGenerator() {}$/;"	f	class:xn::ModuleGestureGenerator	access:public	signature:()
~ModuleHandsGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleHandsGenerator() {}$/;"	f	class:xn::ModuleHandsGenerator	access:public	signature:()
~ModuleIRGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleIRGenerator() {}$/;"	f	class:xn::ModuleIRGenerator	access:public	signature:()
~ModuleImageGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleImageGenerator() {}$/;"	f	class:xn::ModuleImageGenerator	access:public	signature:()
~ModuleLockAwareInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleLockAwareInterface() {}$/;"	f	class:xn::ModuleLockAwareInterface	access:public	signature:()
~ModuleMapGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleMapGenerator() {}$/;"	f	class:xn::ModuleMapGenerator	access:public	signature:()
~ModuleMirrorInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleMirrorInterface() {}$/;"	f	class:xn::ModuleMirrorInterface	access:public	signature:()
~ModuleNodeNotifications	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleNodeNotifications() {}$/;"	f	class:xn::ModuleNodeNotifications	access:public	signature:()
~ModulePlayer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModulePlayer() {}$/;"	f	class:xn::ModulePlayer	access:public	signature:()
~ModulePoseDetectionInteface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModulePoseDetectionInteface() {}$/;"	f	class:xn::ModulePoseDetectionInteface	access:public	signature:()
~ModuleProductionNode	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleProductionNode() {}$/;"	f	class:xn::ModuleProductionNode	access:public	signature:()
~ModuleRecorder	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleRecorder() {}$/;"	f	class:xn::ModuleRecorder	access:public	signature:()
~ModuleSceneAnalyzer	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleSceneAnalyzer() {}$/;"	f	class:xn::ModuleSceneAnalyzer	access:public	signature:()
~ModuleSkeletonInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleSkeletonInterface() {}$/;"	f	class:xn::ModuleSkeletonInterface	access:public	signature:()
~ModuleUserGenerator	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleUserGenerator() {}$/;"	f	class:xn::ModuleUserGenerator	access:public	signature:()
~ModuleUserPositionInterface	/usr/include/ni/XnModuleCppInterface.h	/^		virtual ~ModuleUserPositionInterface() {}$/;"	f	class:xn::ModuleUserPositionInterface	access:public	signature:()
~NodeInfo	/usr/include/ni/XnCppWrapper.h	/^		~NodeInfo()$/;"	f	class:xn::NodeInfo	access:public	signature:()
~NodeInfoList	/usr/include/ni/XnCppWrapper.h	/^		inline ~NodeInfoList()$/;"	f	class:xn::NodeInfoList	access:public	signature:()
~NodeWrapper	/usr/include/ni/XnCppWrapper.h	/^		inline ~NodeWrapper()$/;"	f	class:xn::NodeWrapper	access:public	signature:()
~OutputMetaData	/usr/include/ni/XnCppWrapper.h	/^		virtual ~OutputMetaData() { Free(); }$/;"	f	class:xn::OutputMetaData	access:public	signature:()
~Query	/usr/include/ni/XnCppWrapper.h	/^		~Query()$/;"	f	class:xn::Query	access:public	signature:()
~XnArray	/usr/include/ni/XnArray.h	/^	virtual ~XnArray()$/;"	f	class:XnArray	access:public	signature:()
~XnAutoCSLocker	/usr/include/ni/XnOSCpp.h	/^	inline ~XnAutoCSLocker()$/;"	f	class:XnAutoCSLocker	access:public	signature:()
~XnAutoMutexLocker	/usr/include/ni/XnOSCpp.h	/^	inline ~XnAutoMutexLocker()$/;"	f	class:XnAutoMutexLocker	access:public	signature:()
~XnEvent	/usr/include/ni/XnEvent.h	/^	~XnEvent()$/;"	f	class:XnEvent	access:public	signature:()
~XnEventInterface	/usr/include/ni/XnEvent.h	/^	virtual ~XnEventInterface() {}$/;"	f	class:XnEventInterface	access:public	signature:()
~XnHash	/usr/include/ni/XnHash.h	/^	virtual ~XnHash()$/;"	f	class:XnHash	access:public	signature:()
~XnList	/usr/include/ni/XnList.h	/^	virtual ~XnList()$/;"	f	class:XnList	access:public	signature:()
~XnOSEvent	/usr/include/ni/XnOSCpp.h	/^	~XnOSEvent() $/;"	f	class:XnOSEvent	access:public	signature:()
~XnQueue	/usr/include/ni/XnQueue.h	/^	virtual ~XnQueue() {}$/;"	f	class:XnQueue	access:public	signature:()
~XnStack	/usr/include/ni/XnStack.h	/^	~XnStack() {}$/;"	f	class:XnStack	access:public	signature:()
~XnThreadSafeQueue	/usr/include/ni/XnThreadSafeQueue.h	/^	~XnThreadSafeQueue()$/;"	f	class:XnThreadSafeQueue	access:public	signature:()
