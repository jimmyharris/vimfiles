# Preprocessor Commands
snippet req
	require(${1:package}, quietly=${2:TRUE})
snippet lib
	library(${1:package})
snippet src
	source('${1:filename}')
snippet script
	source('script/${1:filename}')
snippet ld
	load('${1:filename}')
# Control Sequences
snippet fn
	${1:my.function} <- function(${1:args}) {
	  ${2:# code}
	}
snippet fun
	function(${1}) {
	  ${2:# code}
	}
snippet if
	if (${1}) {
	  ${2:# do this}
	}
snippet ife
	if (${1}) {
	  ${2:# do this}
	} else {
	  ${3:# do that}
	}
snippet eli
	else if ($1) {
	  ${2:# do this}
	}
snippet for
	for ( ${1:i} %in% ${2:seq} ) {
	  ${3:# do stuff}
	} 
# Foreach package
snippet femc
	foreach( ${1:iterators}, ${2:.combine=${3:rbind} ) %dopar% {
	  ${4:# do stuff in parallel}
	}
snippet mcopts	
	.options.multicore=list( ${1:preschedule=FALSE} )
snippet comb
	.combine=${1:rbind}
snippet fe
	foreach( ${1:iterators} ) ${2}
snippet :
	%:% ${1}
snippet do
	%do% {
	  ${1:# do stuff}
	}
snippet dop
	%dopar% {
	  ${1:# do stuff}
	}
# TestThat Package
snippet con 
	context('${1}')
snippet tt
	test_that("${1}",{
	  ${2:p <- before() # Preconditions}
	  ${3:# Expectations}
	})
snippet exp
	expect_that(${1:expression}, ${2:expectation})
snippet expt
	expect_true(${1:expression})
snippet expf
	expect_false(${1:expression})
snippet expeq
	expect_equal(${1:expression}, ${2:value})
snippet expid
	expect_identical(${1:expression}, ${2:object})
snippet expa
	expect_is(${1:expression}, ${2:a_class})
snippet experr
	expect_error(${1:expression}, ${2:'regexp'})
snippet expp
	expect_output(${1:expression}, ${2:'regexp'})
snippet expm
	expect_match(${1:expression}, ${2:'regexp'})
snippet expmsg
	expect_message(${1:expression}, ${2:'regexp'})
snippet expw
	expect_warning(${1:expression}, ${2:'regexp'})
snippet exptlt
	expect_that( ${1:expression}, takes_less_than( ${2:seconds} ) )
